"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WebKitRemoteDebugger = exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _logger = _interopRequireDefault(require("./logger"));

var _appiumBaseDriver = require("appium-base-driver");

var _remoteDebugger = require("./remote-debugger");

var _webkitRpcClient = _interopRequireDefault(require("./webkit-rpc-client"));

var _lodash = _interopRequireDefault(require("lodash"));

var _url = _interopRequireDefault(require("url"));

var _requestPromise = _interopRequireDefault(require("request-promise"));

var _helpers = require("./helpers");

class WebKitRemoteDebugger extends _remoteDebugger.RemoteDebugger {
  constructor(opts = {}) {
    opts = Object.assign({
      host: 'localhost'
    }, opts);
    super(_lodash.default.defaults({
      debuggerType: _remoteDebugger.DEBUGGER_TYPES.webkit
    }, opts));
    this.webkitResponseTimeout = opts.webkitResponseTimeout || _remoteDebugger.RPC_RESPONSE_TIMEOUT_MS;
    this.dataMethods = {};
  }

  connect(pageId) {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _this.rpcClient = new _webkitRpcClient.default(_this.host, _this.port, _this.webkitResponseTimeout);
      yield _this.rpcClient.connect(pageId);
    })();
  }

  disconnect() {
    if (this.rpcClient && this.rpcClient.isConnected()) {
      this.rpcClient.disconnect();
    }
  }

  isConnected() {
    return !!(this.rpcClient && this.rpcClient.isConnected());
  }

  pageArrayFromJson(ignoreAboutBlankUrl = false) {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug(`Getting WebKitRemoteDebugger pageArray: ${_this2.host}, ${_this2.port}`);

      let pageElementJSON = yield _this2.getJsonFromUrl(_this2.host, _this2.port, '/json');

      if (pageElementJSON[0] && pageElementJSON[0].deviceId) {
        _logger.default.debug(`Device JSON: ${(0, _helpers.simpleStringify)(pageElementJSON)}`);

        let devices = pageElementJSON.filter(device => device.deviceId !== 'SIMULATOR');

        if (devices.length > 1) {
          _logger.default.debug(`Connected to ${devices.length} devices. ` + `Choosing the first, with udid '${devices[0].deviceId}'.`);
        }

        _this2.port = devices[0].url.split(':')[1];

        _logger.default.debug(`Received notification that ios-webkit-debug-proxy is listening on port '${_this2.port}'`);

        pageElementJSON = yield _this2.getJsonFromUrl(_this2.host, _this2.port, '/json');
      }

      _logger.default.debug(`Page element JSON: ${(0, _helpers.simpleStringify)(pageElementJSON)}`);

      let newPageArray = pageElementJSON.filter(pageObject => {
        return pageObject.url && (!ignoreAboutBlankUrl || pageObject.url !== 'about:blank');
      }).map(pageObject => {
        let urlArray = pageObject.webSocketDebuggerUrl.split('/').reverse();
        let id = urlArray[0];
        return {
          id,
          title: pageObject.title,
          url: pageObject.url,
          isKey: !!id
        };
      });
      return newPageArray;
    })();
  }

  getJsonFromUrl(hostname, port, pathname) {
    return (0, _asyncToGenerator2.default)(function* () {
      let uri = _url.default.format({
        protocol: 'http',
        hostname,
        port,
        pathname
      });

      _logger.default.debug(`Sending request to: ${uri}`);

      return JSON.parse((yield (0, _requestPromise.default)({
        uri,
        method: 'GET'
      })));
    })();
  }

  convertResult(res) {
    if (res && res.wasThrown) {
      let message = res.result.value || res.result;
      throw new _appiumBaseDriver.errors.JavaScriptError(message);
    }

    if (res && res.result && res.result.type === 'undefined') {
      res.result.value = {};
    }

    return super.convertResult(res && res.result ? res.result.value : res);
  }

}

exports.WebKitRemoteDebugger = exports.default = WebKitRemoteDebugger;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
