"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _logger = _interopRequireDefault(require("./logger"));

var _lodash = _interopRequireDefault(require("lodash"));

class RpcMessageHandler {
  constructor(specialHandlers) {
    this.setHandlers();
    this.errorHandlers = {};
    this.specialHandlers = _lodash.default.clone(specialHandlers);
    this.dataHandlers = {};
    this.willNavigateWithoutReload = false;
  }

  setDataMessageHandler(key, errorHandler, handler) {
    this.errorHandlers[key] = errorHandler;
    this.dataHandlers[key] = handler;
  }

  setSpecialMessageHandler(key, errorHandler, handler) {
    this.errorHandlers[key] = errorHandler;
    this.specialHandlers[key] = handler;
  }

  getSpecialMessageHandler(key) {
    return this.specialHandlers[key];
  }

  setTimelineEventHandler(timelineEventHandler) {
    this.timelineEventHandler = timelineEventHandler;
  }

  setConsoleLogEventHandler(consoleLogEventHandler) {
    this.consoleLogEventHandler = consoleLogEventHandler;
  }

  setNetworkEventHandler(networkLogEventHandler) {
    this.networkLogEventHandler = networkLogEventHandler;
  }

  hasErrorHandler(key) {
    return _lodash.default.has(this.errorHandlers, key);
  }

  hasSpecialMessageHandler(key) {
    return _lodash.default.has(this.specialHandlers, key);
  }

  allowNavigationWithoutReload(allow = true) {
    this.willNavigateWithoutReload = allow;
  }

  handleMessage(plist) {
    let handlerFor = plist.__selector;

    if (!handlerFor) {
      _logger.default.debug('Got an invalid plist');

      return;
    }

    if (_lodash.default.has(this.handlers, handlerFor)) {
      this.handlers[handlerFor](plist);
    } else {
      _logger.default.debug(`Debugger got a message for '${handlerFor}' and have no ` + `handler, doing nothing.`);
    }
  }

  handleSpecialMessage(handler, ...args) {
    const fn = this.specialHandlers[handler];

    if (fn) {
      if (handler !== '_rpc_forwardGetListing:' && handler !== '_rpc_applicationDisconnected:' && handler !== '_rpc_applicationConnected:' && handler !== '_rpc_applicationUpdated:' && handler !== '_rpc_reportConnectedDriverList:') {
        this.specialHandlers[handler] = null;
      }

      fn(...args);
    } else {
      _logger.default.warn(`Tried to access special message handler '${handler}' ` + `but none was found`);
    }
  }

  parseDataKey(plist) {
    try {
      return JSON.parse(plist.__argument.WIRMessageDataKey.toString('utf8'));
    } catch (err) {
      _logger.default.error(`Unparseable message data: ${_lodash.default.truncate(JSON.stringify(plist), {
        length: 100
      })}`);

      throw new Error(`Unable to parse message data: ${err.message}`);
    }
  }

  handleDataMessage(plist) {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      const dataKey = _this.parseDataKey(plist);

      const msgId = (dataKey.id || '').toString();
      let result = dataKey.result;
      let error = dataKey.error || null;

      if (result && result.wasThrown) {
        let message = result.result && (result.result.value || result.result.description) ? result.result.value || result.result.description : 'Error occurred in handling data message';
        error = new Error(message);
      }

      if (error) {
        if (_this.hasErrorHandler(msgId)) {
          _this.errorHandlers[msgId](error);
        } else {
          _logger.default.error(`Error occurred in handling data message: ${error}`);

          _logger.default.error('No error handler present, ignoring');
        }

        return;
      }

      if (dataKey.method === 'Profiler.resetProfiles') {
        _logger.default.debug('Device is telling us to reset profiles. Should probably ' + 'do some kind of callback here');
      } else if (dataKey.method === 'Page.frameNavigated') {
        if (!_this.willNavigateWithoutReload && !_this.pageLoading) {
          _logger.default.debug('Frame navigated, unloading page');

          if (_lodash.default.isFunction(_this.specialHandlers['Page.frameNavigated'])) {
            _this.specialHandlers['Page.frameNavigated']('remote-debugger');

            _this.specialHandlers['Page.frameNavigated'] = null;
          }
        } else {
          _logger.default.debug('Frame navigated but we were warned about it, not ' + 'considering page state unloaded');

          _this.willNavigateWithoutReload = false;
        }
      } else if (dataKey.method === 'Page.loadEventFired' && _lodash.default.isFunction(_this.specialHandlers.pageLoad)) {
        yield _this.specialHandlers.pageLoad();
      } else if (dataKey.method === 'Page.frameDetached' && _lodash.default.isFunction(_this.specialHandlers.frameDetached)) {
        yield _this.specialHandlers.frameDetached();
      } else if (dataKey.method === 'Timeline.eventRecorded' && _lodash.default.isFunction(_this.timelineEventHandler)) {
        _this.timelineEventHandler(dataKey.params.record);
      } else if (dataKey.method === 'Console.messageAdded' && _lodash.default.isFunction(_this.consoleLogEventHandler)) {
        _this.consoleLogEventHandler(dataKey.params.message);
      } else if (dataKey.method && dataKey.method.startsWith('Network.') && _lodash.default.isFunction(_this.networkLogEventHandler)) {
        _this.networkLogEventHandler(dataKey.method, dataKey.params);
      } else if (_lodash.default.isFunction(_this.dataHandlers[msgId])) {
        _logger.default.debug('Found data handler for response');

        if (result.result && result.result.value) {
          result = result.result.value;
        }

        _this.dataHandlers[msgId](result);

        _this.dataHandlers[msgId] = null;
      } else if (_this.dataHandlers[msgId] === null) {
        _logger.default.error(`Debugger returned data for message ${msgId} ` + `but we already ran that callback! WTF??`);
      } else {
        if (msgId || result || error) {
          _logger.default.error(`Debugger returned data for message '${msgId}' ` + `but we were not waiting for that message! ` + `result: '${JSON.stringify(result)}'; ` + `error: '${error}'`);
        }
      }
    })();
  }

  setHandlers() {
    this.handlers = {
      '_rpc_reportSetup:': plist => {
        this.handleSpecialMessage('_rpc_reportIdentifier:', plist.__argument.WIRSimulatorNameKey, plist.__argument.WIRSimulatorBuildKey, plist.__argument.WIRSimulatorProductVersionKey);
      },
      '_rpc_reportConnectedApplicationList:': plist => {
        this.handleSpecialMessage('_rpc_reportConnectedApplicationList:', plist.__argument.WIRApplicationDictionaryKey);
      },
      '_rpc_applicationSentListing:': plist => {
        this.handleSpecialMessage('_rpc_forwardGetListing:', plist.__argument.WIRApplicationIdentifierKey, plist.__argument.WIRListingKey);
      },
      '_rpc_applicationConnected:': plist => {
        this.handleSpecialMessage('_rpc_applicationConnected:', plist.__argument);
      },
      '_rpc_applicationDisconnected:': plist => {
        this.handleSpecialMessage('_rpc_applicationDisconnected:', plist.__argument);
      },
      '_rpc_applicationUpdated:': plist => {
        this.handleSpecialMessage('_rpc_applicationUpdated:', plist.__argument);
      },
      '_rpc_reportConnectedDriverList:': plist => {
        this.handleSpecialMessage('_rpc_reportConnectedDriverList:', plist.__argument);
      },
      '_rpc_applicationSentData:': this.handleDataMessage.bind(this)
    };
  }

}

exports.default = RpcMessageHandler;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
