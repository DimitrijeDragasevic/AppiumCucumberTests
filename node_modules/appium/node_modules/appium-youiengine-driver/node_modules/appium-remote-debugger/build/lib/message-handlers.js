"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _logger = _interopRequireDefault(require("./logger"));

var _remoteDebugger = require("./remote-debugger");

var _helpers = require("./helpers");

function onPageChange(appIdKey, pageDict) {
  if (this.appDict[appIdKey]) {
    if (this.appDict[appIdKey].pageDict && this.appDict[appIdKey].pageDict.resolve) {
      this.appDict[appIdKey].pageDict.resolve(pageDict);
    }

    this.appDict[appIdKey].pageDict = (0, _helpers.pageArrayFromDict)(pageDict);
  }

  if (this.appIdKey !== appIdKey) {
    _logger.default.debug(`Received page change notice for app '${appIdKey}' ` + `but listening for '${this.appIdKey}'. Ignoring.`);

    return;
  }

  _logger.default.debug(`Page changed: ${(0, _helpers.simpleStringify)(pageDict)}`);

  this.emit(_remoteDebugger.RemoteDebugger.EVENT_PAGE_CHANGE, {
    appIdKey: appIdKey.replace('PID:', ''),
    pageArray: (0, _helpers.pageArrayFromDict)(pageDict)
  });
}

function onAppConnect(dict) {
  let appIdKey = dict.WIRApplicationIdentifierKey;

  _logger.default.debug(`Notified that new application '${appIdKey}' has connected`);

  this.updateAppsWithDict(dict);
}

function onAppDisconnect(dict) {
  let appIdKey = dict.WIRApplicationIdentifierKey;

  _logger.default.debug(`Application '${appIdKey}' disconnected. Removing from app dictionary.`);

  _logger.default.debug(`Current app is ${this.appIdKey}`);

  delete this.appDict[appIdKey];

  if (this.appIdKey === appIdKey) {
    _logger.default.debug(`No longer have app id. Attempting to find new one.`);

    this.appIdKey = (0, _helpers.getDebuggerAppKey)(this.bundleId, this.platformVersion, this.appDict);
  }

  if (!this.appDict) {
    _logger.default.debug('Main app disconnected. Disconnecting altogether.');

    this.connected = false;
    this.emit(_remoteDebugger.RemoteDebugger.EVENT_DISCONNECT, true);
  }
}

function onAppUpdate(dict) {
  let appIdKey = dict.WIRApplicationIdentifierKey;

  _logger.default.debug(`Notified that application '${appIdKey}' has been updated.`);

  this.updateAppsWithDict(dict);
}

function onReportDriverList(dict) {
  _logger.default.debug(`Notified of connected drivers: ${JSON.stringify(dict.WIRDriverDictionaryKey)}.`);
}

const messageHandlers = {
  onPageChange,
  onAppConnect,
  onAppDisconnect,
  onAppUpdate,
  onReportDriverList
};
var _default = messageHandlers;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9tZXNzYWdlLWhhbmRsZXJzLmpzIl0sIm5hbWVzIjpbIm9uUGFnZUNoYW5nZSIsImFwcElkS2V5IiwicGFnZURpY3QiLCJhcHBEaWN0IiwicmVzb2x2ZSIsImxvZyIsImRlYnVnIiwiZW1pdCIsIlJlbW90ZURlYnVnZ2VyIiwiRVZFTlRfUEFHRV9DSEFOR0UiLCJyZXBsYWNlIiwicGFnZUFycmF5Iiwib25BcHBDb25uZWN0IiwiZGljdCIsIldJUkFwcGxpY2F0aW9uSWRlbnRpZmllcktleSIsInVwZGF0ZUFwcHNXaXRoRGljdCIsIm9uQXBwRGlzY29ubmVjdCIsImJ1bmRsZUlkIiwicGxhdGZvcm1WZXJzaW9uIiwiY29ubmVjdGVkIiwiRVZFTlRfRElTQ09OTkVDVCIsIm9uQXBwVXBkYXRlIiwib25SZXBvcnREcml2ZXJMaXN0IiwiSlNPTiIsInN0cmluZ2lmeSIsIldJUkRyaXZlckRpY3Rpb25hcnlLZXkiLCJtZXNzYWdlSGFuZGxlcnMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQU9BLFNBQVNBLFlBQVQsQ0FBdUJDLFFBQXZCLEVBQWlDQyxRQUFqQyxFQUEyQztBQUV6QyxNQUFJLEtBQUtDLE9BQUwsQ0FBYUYsUUFBYixDQUFKLEVBQTRCO0FBQzFCLFFBQUksS0FBS0UsT0FBTCxDQUFhRixRQUFiLEVBQXVCQyxRQUF2QixJQUFtQyxLQUFLQyxPQUFMLENBQWFGLFFBQWIsRUFBdUJDLFFBQXZCLENBQWdDRSxPQUF2RSxFQUFnRjtBQUU5RSxXQUFLRCxPQUFMLENBQWFGLFFBQWIsRUFBdUJDLFFBQXZCLENBQWdDRSxPQUFoQyxDQUF3Q0YsUUFBeEM7QUFDRDs7QUFFRCxTQUFLQyxPQUFMLENBQWFGLFFBQWIsRUFBdUJDLFFBQXZCLEdBQWtDLGdDQUFrQkEsUUFBbEIsQ0FBbEM7QUFDRDs7QUFHRCxNQUFJLEtBQUtELFFBQUwsS0FBa0JBLFFBQXRCLEVBQWdDO0FBQzlCSSxvQkFBSUMsS0FBSixDQUFXLHdDQUF1Q0wsUUFBUyxJQUFqRCxHQUNDLHNCQUFxQixLQUFLQSxRQUFTLGNBRDlDOztBQUVBO0FBQ0Q7O0FBRURJLGtCQUFJQyxLQUFKLENBQVcsaUJBQWdCLDhCQUFnQkosUUFBaEIsQ0FBMEIsRUFBckQ7O0FBQ0EsT0FBS0ssSUFBTCxDQUFVQywrQkFBZUMsaUJBQXpCLEVBQTRDO0FBQzFDUixJQUFBQSxRQUFRLEVBQUVBLFFBQVEsQ0FBQ1MsT0FBVCxDQUFpQixNQUFqQixFQUF5QixFQUF6QixDQURnQztBQUUxQ0MsSUFBQUEsU0FBUyxFQUFFLGdDQUFrQlQsUUFBbEI7QUFGK0IsR0FBNUM7QUFJRDs7QUFFRCxTQUFTVSxZQUFULENBQXVCQyxJQUF2QixFQUE2QjtBQUMzQixNQUFJWixRQUFRLEdBQUdZLElBQUksQ0FBQ0MsMkJBQXBCOztBQUNBVCxrQkFBSUMsS0FBSixDQUFXLGtDQUFpQ0wsUUFBUyxpQkFBckQ7O0FBRUEsT0FBS2Msa0JBQUwsQ0FBd0JGLElBQXhCO0FBQ0Q7O0FBRUQsU0FBU0csZUFBVCxDQUEwQkgsSUFBMUIsRUFBZ0M7QUFDOUIsTUFBSVosUUFBUSxHQUFHWSxJQUFJLENBQUNDLDJCQUFwQjs7QUFDQVQsa0JBQUlDLEtBQUosQ0FBVyxnQkFBZUwsUUFBUywrQ0FBbkM7O0FBQ0FJLGtCQUFJQyxLQUFKLENBQVcsa0JBQWlCLEtBQUtMLFFBQVMsRUFBMUM7O0FBSUEsU0FBTyxLQUFLRSxPQUFMLENBQWFGLFFBQWIsQ0FBUDs7QUFHQSxNQUFJLEtBQUtBLFFBQUwsS0FBa0JBLFFBQXRCLEVBQWdDO0FBQzlCSSxvQkFBSUMsS0FBSixDQUFXLG9EQUFYOztBQUNBLFNBQUtMLFFBQUwsR0FBZ0IsZ0NBQWtCLEtBQUtnQixRQUF2QixFQUFpQyxLQUFLQyxlQUF0QyxFQUF1RCxLQUFLZixPQUE1RCxDQUFoQjtBQUNEOztBQUVELE1BQUksQ0FBQyxLQUFLQSxPQUFWLEVBQW1CO0FBRWpCRSxvQkFBSUMsS0FBSixDQUFVLGtEQUFWOztBQUNBLFNBQUthLFNBQUwsR0FBaUIsS0FBakI7QUFDQSxTQUFLWixJQUFMLENBQVVDLCtCQUFlWSxnQkFBekIsRUFBMkMsSUFBM0M7QUFDRDtBQUNGOztBQUVELFNBQVNDLFdBQVQsQ0FBc0JSLElBQXRCLEVBQTRCO0FBQzFCLE1BQUlaLFFBQVEsR0FBR1ksSUFBSSxDQUFDQywyQkFBcEI7O0FBQ0FULGtCQUFJQyxLQUFKLENBQVcsOEJBQTZCTCxRQUFTLHFCQUFqRDs7QUFFQSxPQUFLYyxrQkFBTCxDQUF3QkYsSUFBeEI7QUFDRDs7QUFFRCxTQUFTUyxrQkFBVCxDQUE2QlQsSUFBN0IsRUFBbUM7QUFDakNSLGtCQUFJQyxLQUFKLENBQVcsa0NBQWlDaUIsSUFBSSxDQUFDQyxTQUFMLENBQWVYLElBQUksQ0FBQ1ksc0JBQXBCLENBQTRDLEdBQXhGO0FBQ0Q7O0FBRUQsTUFBTUMsZUFBZSxHQUFHO0FBQ3RCMUIsRUFBQUEsWUFEc0I7QUFFdEJZLEVBQUFBLFlBRnNCO0FBR3RCSSxFQUFBQSxlQUhzQjtBQUl0QkssRUFBQUEsV0FKc0I7QUFLdEJDLEVBQUFBO0FBTHNCLENBQXhCO2VBUWVJLGUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7IFJlbW90ZURlYnVnZ2VyIH0gZnJvbSAnLi9yZW1vdGUtZGVidWdnZXInO1xuaW1wb3J0IHsgcGFnZUFycmF5RnJvbURpY3QsIGdldERlYnVnZ2VyQXBwS2V5LCBzaW1wbGVTdHJpbmdpZnkgfSBmcm9tICcuL2hlbHBlcnMnO1xuXG4vKlxuICogR2VuZXJpYyBjYWxsYmFja3MgdXNlZCB0aHJvdWdob3V0IHRoZSBsaWZlY3ljbGUgb2YgdGhlIFJlbW90ZSBEZWJ1Z2dlci5cbiAqIFRoZXNlIHdpbGwgYmUgYWRkZWQgdG8gdGhlIHByb3RvdHlwZS5cbiAqL1xuXG5mdW5jdGlvbiBvblBhZ2VDaGFuZ2UgKGFwcElkS2V5LCBwYWdlRGljdCkge1xuICAvLyBzYXZlIHRoZSBwYWdlIGRpY3QgZm9yIHRoaXMgYXBwXG4gIGlmICh0aGlzLmFwcERpY3RbYXBwSWRLZXldKSB7XG4gICAgaWYgKHRoaXMuYXBwRGljdFthcHBJZEtleV0ucGFnZURpY3QgJiYgdGhpcy5hcHBEaWN0W2FwcElkS2V5XS5wYWdlRGljdC5yZXNvbHZlKSB7XG4gICAgICAvLyBwYWdlRGljdCBpcyBhIHByb21pc2UsIHNvIHJlc29sdmVcbiAgICAgIHRoaXMuYXBwRGljdFthcHBJZEtleV0ucGFnZURpY3QucmVzb2x2ZShwYWdlRGljdCk7XG4gICAgfVxuICAgIC8vIGtlZXAgdHJhY2sgb2YgdGhlIHBhZ2UgZGljdGlvbmFyeVxuICAgIHRoaXMuYXBwRGljdFthcHBJZEtleV0ucGFnZURpY3QgPSBwYWdlQXJyYXlGcm9tRGljdChwYWdlRGljdCk7XG4gIH1cblxuICAvLyBvbmx5IGFjdCBpZiB0aGlzIGlzIHRoZSBjb3JyZWN0IGFwcFxuICBpZiAodGhpcy5hcHBJZEtleSAhPT0gYXBwSWRLZXkpIHtcbiAgICBsb2cuZGVidWcoYFJlY2VpdmVkIHBhZ2UgY2hhbmdlIG5vdGljZSBmb3IgYXBwICcke2FwcElkS2V5fScgYCArXG4gICAgICAgICAgICAgIGBidXQgbGlzdGVuaW5nIGZvciAnJHt0aGlzLmFwcElkS2V5fScuIElnbm9yaW5nLmApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxvZy5kZWJ1ZyhgUGFnZSBjaGFuZ2VkOiAke3NpbXBsZVN0cmluZ2lmeShwYWdlRGljdCl9YCk7XG4gIHRoaXMuZW1pdChSZW1vdGVEZWJ1Z2dlci5FVkVOVF9QQUdFX0NIQU5HRSwge1xuICAgIGFwcElkS2V5OiBhcHBJZEtleS5yZXBsYWNlKCdQSUQ6JywgJycpLFxuICAgIHBhZ2VBcnJheTogcGFnZUFycmF5RnJvbURpY3QocGFnZURpY3QpXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBvbkFwcENvbm5lY3QgKGRpY3QpIHtcbiAgbGV0IGFwcElkS2V5ID0gZGljdC5XSVJBcHBsaWNhdGlvbklkZW50aWZpZXJLZXk7XG4gIGxvZy5kZWJ1ZyhgTm90aWZpZWQgdGhhdCBuZXcgYXBwbGljYXRpb24gJyR7YXBwSWRLZXl9JyBoYXMgY29ubmVjdGVkYCk7XG5cbiAgdGhpcy51cGRhdGVBcHBzV2l0aERpY3QoZGljdCk7XG59XG5cbmZ1bmN0aW9uIG9uQXBwRGlzY29ubmVjdCAoZGljdCkge1xuICBsZXQgYXBwSWRLZXkgPSBkaWN0LldJUkFwcGxpY2F0aW9uSWRlbnRpZmllcktleTtcbiAgbG9nLmRlYnVnKGBBcHBsaWNhdGlvbiAnJHthcHBJZEtleX0nIGRpc2Nvbm5lY3RlZC4gUmVtb3ZpbmcgZnJvbSBhcHAgZGljdGlvbmFyeS5gKTtcbiAgbG9nLmRlYnVnKGBDdXJyZW50IGFwcCBpcyAke3RoaXMuYXBwSWRLZXl9YCk7XG5cbiAgLy8gZ2V0IHJpZCBvZiB0aGUgZW50cnkgaW4gb3VyIGFwcCBkaWN0aW9uYXJ5LFxuICAvLyBzaW5jZSBpdCBpcyBubyBsb25nZXIgYXZhaWxhYmxlXG4gIGRlbGV0ZSB0aGlzLmFwcERpY3RbYXBwSWRLZXldO1xuXG4gIC8vIGlmIHRoZSBkaXNjb25uZWN0ZWQgYXBwIGlzIHRoZSBvbmUgd2UgYXJlIGNvbm5lY3RlZCB0bywgdHJ5IHRvIGZpbmQgYW5vdGhlclxuICBpZiAodGhpcy5hcHBJZEtleSA9PT0gYXBwSWRLZXkpIHtcbiAgICBsb2cuZGVidWcoYE5vIGxvbmdlciBoYXZlIGFwcCBpZC4gQXR0ZW1wdGluZyB0byBmaW5kIG5ldyBvbmUuYCk7XG4gICAgdGhpcy5hcHBJZEtleSA9IGdldERlYnVnZ2VyQXBwS2V5KHRoaXMuYnVuZGxlSWQsIHRoaXMucGxhdGZvcm1WZXJzaW9uLCB0aGlzLmFwcERpY3QpO1xuICB9XG5cbiAgaWYgKCF0aGlzLmFwcERpY3QpIHtcbiAgICAvLyB0aGlzIG1lYW5zIHdlIG5vIGxvbmdlciBoYXZlIGFueSBhcHBzLiB3aGF0IHRoZSB3aGF0P1xuICAgIGxvZy5kZWJ1ZygnTWFpbiBhcHAgZGlzY29ubmVjdGVkLiBEaXNjb25uZWN0aW5nIGFsdG9nZXRoZXIuJyk7XG4gICAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmVtaXQoUmVtb3RlRGVidWdnZXIuRVZFTlRfRElTQ09OTkVDVCwgdHJ1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gb25BcHBVcGRhdGUgKGRpY3QpIHtcbiAgbGV0IGFwcElkS2V5ID0gZGljdC5XSVJBcHBsaWNhdGlvbklkZW50aWZpZXJLZXk7XG4gIGxvZy5kZWJ1ZyhgTm90aWZpZWQgdGhhdCBhcHBsaWNhdGlvbiAnJHthcHBJZEtleX0nIGhhcyBiZWVuIHVwZGF0ZWQuYCk7XG5cbiAgdGhpcy51cGRhdGVBcHBzV2l0aERpY3QoZGljdCk7XG59XG5cbmZ1bmN0aW9uIG9uUmVwb3J0RHJpdmVyTGlzdCAoZGljdCkge1xuICBsb2cuZGVidWcoYE5vdGlmaWVkIG9mIGNvbm5lY3RlZCBkcml2ZXJzOiAke0pTT04uc3RyaW5naWZ5KGRpY3QuV0lSRHJpdmVyRGljdGlvbmFyeUtleSl9LmApO1xufVxuXG5jb25zdCBtZXNzYWdlSGFuZGxlcnMgPSB7XG4gIG9uUGFnZUNoYW5nZSxcbiAgb25BcHBDb25uZWN0LFxuICBvbkFwcERpc2Nvbm5lY3QsXG4gIG9uQXBwVXBkYXRlLFxuICBvblJlcG9ydERyaXZlckxpc3QsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBtZXNzYWdlSGFuZGxlcnM7XG4iXSwiZmlsZSI6ImxpYi9tZXNzYWdlLWhhbmRsZXJzLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
