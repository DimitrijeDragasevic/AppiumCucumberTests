"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.install = install;
exports.needsInstall = needsInstall;
exports.SAFARI_LAUNCHER_BUNDLE = exports.SAFARI_LAUNCHER_APP_FILE = void 0;

require("source-map-support/register");

var _appiumXcode = _interopRequireDefault(require("appium-xcode"));

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("./logger"));

var _path = _interopRequireDefault(require("path"));

const SAFARI_LAUNCHER_DIR = _path.default.resolve(__dirname, '..', '..', 'build', 'SafariLauncher');

const SAFARI_LAUNCHER_APP_FILE = _path.default.resolve(__dirname, '..', '..', 'build', 'SafariLauncher', 'SafariLauncher.app');

exports.SAFARI_LAUNCHER_APP_FILE = SAFARI_LAUNCHER_APP_FILE;

const SAFARI_LAUNCHER_REPO = _path.default.resolve(__dirname, '..', '..', 'node_modules', 'safari-launcher');

const SAFARI_LAUNCHER_CONFIG_FILE = _path.default.resolve(SAFARI_LAUNCHER_REPO, 'build.xcconfig');

const SAFARI_LAUNCHER_BUNDLE = 'com.bytearc.SafariLauncher';
exports.SAFARI_LAUNCHER_BUNDLE = SAFARI_LAUNCHER_BUNDLE;
const sdks = ['iphoneos'];

async function cleanApp(appRoot, sdk) {
  _logger.default.debug(`Cleaning SafariLauncher for ${sdk}`);

  try {
    await (0, _teen_process.exec)('xcodebuild', ['-sdk', sdk, 'clean'], {
      cwd: appRoot
    });
  } catch (err) {
    _logger.default.error(err);

    throw err;
  }
}

async function cleanAll() {
  _logger.default.info("Cleaning SafariLauncher");

  let sdkVer = await _appiumXcode.default.getMaxIOSSDK();

  for (let sdk of sdks) {
    let fullSdk = sdk + sdkVer;
    await cleanApp(SAFARI_LAUNCHER_REPO, fullSdk);
  }

  await _appiumSupport.fs.rimraf(SAFARI_LAUNCHER_DIR);

  _logger.default.info("Finished cleaning SafariLauncher");
}

async function buildApp(appRoot, sdk) {
  try {
    _logger.default.debug(`Building SafariLauncher for ${sdk}`);

    let args = ['-sdk', sdk, '-xcconfig', SAFARI_LAUNCHER_CONFIG_FILE];
    await (0, _teen_process.exec)('xcodebuild', args, {
      cwd: appRoot
    });
  } catch (err) {
    _logger.default.error(err);

    throw err;
  }
}

async function buildAll() {
  _logger.default.info("Building SafariLauncher");

  let sdkVer = await _appiumXcode.default.getMaxIOSSDK();

  for (let sdk of sdks) {
    let fullSdk = sdk + sdkVer;
    await buildApp(SAFARI_LAUNCHER_REPO, fullSdk);
  }

  _logger.default.info("Finished building SafariLauncher");
}

async function renameAll() {
  try {
    _logger.default.info("Renaming SafariLauncher");

    if (!(await _appiumSupport.fs.exists(SAFARI_LAUNCHER_DIR))) {
      await _appiumSupport.fs.mkdir(SAFARI_LAUNCHER_DIR);
    }

    let file = _path.default.resolve(SAFARI_LAUNCHER_REPO, 'build', 'Release-iphoneos', 'SafariLauncher.app');

    await _appiumSupport.fs.rename(file, SAFARI_LAUNCHER_APP_FILE);

    _logger.default.info("Finished renaming SafariLauncher");
  } catch (err) {
    _logger.default.warn("Could not rename SafariLauncher");

    _logger.default.errorAndThrow(err);
  }
}

async function updateConfig() {
  _logger.default.info('Updating config for Safari Launcher');

  let config = `BUNDLE_ID = ${SAFARI_LAUNCHER_BUNDLE}
IDENTITY_NAME = iPhone Developer
IDENTITY_CODE =`;
  await _appiumSupport.fs.writeFile(SAFARI_LAUNCHER_CONFIG_FILE, config);
}

async function install() {
  await cleanAll();
  await updateConfig();
  await buildAll();
  await renameAll();
}

async function needsInstall() {
  _logger.default.debug(`Checking for presence of SafariLauncher at '${SAFARI_LAUNCHER_APP_FILE}'`);

  let exists = await _appiumSupport.fs.exists(SAFARI_LAUNCHER_APP_FILE);

  _logger.default.debug(`SafariLauncher ${exists ? 'exists' : 'does not exist'}`);

  return !exists;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
