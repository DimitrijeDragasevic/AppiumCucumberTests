"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger"));

var _appiumSupport = require("appium-support");

var _appiumBaseDriver = require("appium-base-driver");

var _lodash = _interopRequireDefault(require("lodash"));

var _js2xmlparser = _interopRequireDefault(require("js2xmlparser2"));

var _xmldom = _interopRequireDefault(require("xmldom"));

var _xpath = _interopRequireDefault(require("xpath"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _utils = require("../utils");

const MAGIC_FIRST_VIS_CHILD_SEL = /\/\*\[@firstVisible ?= ?('|")true\1\]/;
const MAGIC_SCROLLABLE_SEL = /\/\/\*\[@scrollable ?= ?('|")true\1\]/;
let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

helpers.findElOrEls = async function (strategy, selector, mult, context) {
  context = (0, _utils.unwrapEl)(context);

  if (this.isWebContext()) {
    return await this.findWebElementOrElements(strategy, selector, mult, context);
  } else {
    return await this.findUIElementOrElements(strategy, selector, mult, context);
  }
};

helpers.findUIElementOrElements = async function (strategy, selector, mult, context) {
  if (strategy !== "xpath") {
    selector = _appiumSupport.util.escapeSpecialChars(selector, "'");
  }

  if (typeof context === "undefined" || !context) {
    context = '';
  } else if (typeof context === "string") {
    context = _appiumSupport.util.escapeSpecialChars(context, "'");
  }

  if (strategy === 'xpath' && MAGIC_SCROLLABLE_SEL.test(selector)) {
    return await this.findScrollableElOrEls(mult, context);
  }

  if (strategy === 'xpath' && MAGIC_FIRST_VIS_CHILD_SEL.test(selector)) {
    if (mult) {
      throw new Error("Cannot get multiple first children");
    }

    return await this.getFirstVisibleChild(context);
  }

  if (strategy === 'class name' && selector.indexOf('UIA') !== 0) {
    throw new _appiumBaseDriver.errors.InvalidSelectorError(`The class name selector must use full UIA class names. Try 'UIA${selector}' instead.`);
  }

  if (!selector) new _appiumBaseDriver.errors.InvalidSelectorError('Missing selector');

  let createGetElementCommand = function (strategy, selector, mult, context) {
    let ext = mult ? 's' : '';
    let command = "";
    context = !context ? context : `, '${context}'`;

    switch (strategy) {
      case "name":
        command = `au.getElement${ext}ByName('${selector}'${context})`;
        break;

      case "accessibility id":
        command = `au.getElement${ext}ByAccessibilityId('${selector}'${context})`;
        break;

      case "id":
        command = `au.getElement${ext}ById('${selector}')`;
        break;

      case "-ios uiautomation":
        command = `au.getElement${ext}ByUIAutomation('${selector}'${context})`;
        break;

      default:
        command = `au.getElement${ext}ByType('${selector}'${context})`;
    }

    return command;
  };

  let getLocalizedStringForSelector = function (selector, strings) {
    let newSelector = selector;

    if (strings) {
      let localizedSelector = strings[selector];

      if (localizedSelector) {
        newSelector = localizedSelector;
      } else {
        _logger.default.debug(`Id selector, '${selector}', not found in Localizable.strings.`);
      }
    }

    return newSelector;
  };

  let res;

  let doFind = async () => {
    if (strategy === "xpath") {
      res = await this.findUIElementsByXpath(selector, mult, context);
    } else if (strategy === "id") {
      let findByAxIdCmd = createGetElementCommand("accessibility id", selector, mult, context);
      res = await this.uiAutoClient.sendCommand(findByAxIdCmd);

      if (!(res && _lodash.default.size(res) > 0)) {
        let findByIdCmd = createGetElementCommand("id", getLocalizedStringForSelector(selector, this.opts.localizableStrings), mult, context);
        res = await this.uiAutoClient.sendCommand(findByIdCmd);
      }
    } else {
      let command = createGetElementCommand(strategy, selector, mult, context);
      res = await this.uiAutoClient.sendCommand(command);
    }

    return _lodash.default.size(res) > 0;
  };

  try {
    await this.implicitWaitForCondition(doFind);
  } catch (err) {
    if (err.message && err.message.match(/Condition unmet/)) {
      res = [];
    } else {
      throw err;
    }
  }

  if (mult) {
    return res;
  } else {
    if (!res || _lodash.default.size(res) === 0) {
      throw new _appiumBaseDriver.errors.NoSuchElementError();
    }

    return res;
  }
};

let _pathFromDomNode = function (node) {
  let path = null;

  for (let attrObj of _lodash.default.values(node.attributes)) {
    if (attrObj.name === "path") {
      path = attrObj.value;
    }
  }

  return path;
};

let _xmlSourceFromJson = function (jsonSource) {
  if (typeof jsonSource === "string") {
    jsonSource = JSON.parse(jsonSource);
  }

  return (0, _js2xmlparser.default)("AppiumAUT", jsonSource, {
    wrapArray: {
      enabled: false,
      elementName: "element"
    },
    declaration: {
      include: true
    },
    prettyPrinting: {
      indentString: "    "
    }
  });
};

let _performXpathQueryOnJson = function (selector, jsonSource) {
  let xmlSource = _xmlSourceFromJson(jsonSource);

  let dom = new _xmldom.default.DOMParser().parseFromString(xmlSource);
  return _xpath.default.select(selector, dom);
};

commands.findUIElementsByXpath = async function (selector, mult, context = null, curRetry = 1) {
  let sourceXml;

  try {
    sourceXml = await this.getSourceForElementForXML(context);
  } catch (err) {
    _logger.default.warn("Error getting source, can't continue finding element by XPath");

    throw err;
  }

  let selectedNodes = _performXpathQueryOnJson(selector, sourceXml);

  if (!mult) {
    selectedNodes = selectedNodes.slice(0, 1);
  }

  let indexPaths = [];

  for (let node of selectedNodes) {
    let ip = _pathFromDomNode(node);

    if (ip !== null) {
      indexPaths.push(ip);
    }
  }

  if (indexPaths.length < 1) {
    return [];
  }

  let methodName;
  let methodArgs = [];

  if (!mult) {
    methodName = "getElementByIndexPath";
    methodArgs[0] = `'${indexPaths[0]}'`;
  } else {
    methodName = "getElementsByIndexPaths";
    methodArgs[0] = JSON.stringify(indexPaths);
  }

  if (context) {
    methodArgs[1] = `au.getElement('${context}')`;
  }

  let proxyCmd = `au.${methodName}(${methodArgs.join(", ")})`;
  let res;

  try {
    res = await this.uiAutoClient.sendCommand(proxyCmd);
  } catch (err) {
    if (curRetry < 3) {
      _logger.default.debug("Got a warning from uiauto that some index paths " + "could not be resolved, trying again");

      await _bluebird.default.delay(300);
      return await this.findUIElementsByXpath(selector, mult, context, curRetry + 1);
    }

    throw err;
  }

  return res;
};

helpers.findScrollableElOrEls = async function (mult, context) {
  const scrollTypes = ['UIAScrollView', 'UIATableView', 'UIACollectionView', 'UIAWebView'];
  let res = [];
  const ext = mult ? 's' : '';

  for (const scrollType of scrollTypes) {
    const command = `au.getElement${ext}ByType('${scrollType}'${context})`;

    if (mult) {
      let elements = await this.uiAutoClient.sendCommand(command);

      if (!_lodash.default.isEmpty(elements)) {
        res.push(...elements);
      }
    } else {
      let element = await this.uiAutoClient.sendCommand(command);

      if (element) {
        return element;
      }
    }
  }

  if (mult) {
    return res;
  }

  throw new _appiumBaseDriver.errors.NoSuchElementError();
};

helpers.getFirstVisibleChild = async function (elementId) {
  let visibleEls = await this.findElementsFromElement('-ios uiautomation', '.elements().withPredicate("isVisible == 1");', elementId);
  return _lodash.default.first(visibleEls);
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
