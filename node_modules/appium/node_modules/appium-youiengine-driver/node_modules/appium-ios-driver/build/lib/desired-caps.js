"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.desiredCapValidation = desiredCapValidation;
exports.default = exports.desiredCapConstraints = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

const desiredCapConstraints = {
  platformName: {
    presence: true,
    isString: true,
    inclusionCaseInsensitive: ['iOS']
  },
  browserName: {
    isString: true
  },
  app: {
    isString: true
  },
  launchTimeout: {},
  calendarFormat: {
    isString: true
  },
  bundleId: {
    isString: true
  },
  udid: {
    isString: true
  },
  locationServicesEnabled: {
    isBoolean: true
  },
  locationServicesAuthorized: {
    isBoolean: true
  },
  autoAcceptAlerts: {
    isBoolean: true
  },
  autoDismissAlerts: {
    isBoolean: true
  },
  nativeInstrumentsLib: {
    isBoolean: true
  },
  nativeWebTap: {
    isBoolean: true
  },
  safariInitialUrl: {
    isString: true
  },
  safariAllowPopups: {
    isBoolean: true
  },
  safariIgnoreFraudWarning: {
    isBoolean: true
  },
  safariOpenLinksInBackground: {
    isBoolean: true
  },
  safariGarbageCollect: {
    isBoolean: true
  },
  keepKeyChains: {
    isBoolean: true
  },
  localizableStringsDir: {
    isString: true
  },
  processArguments: {},
  interKeyDelay: {
    isNumber: true
  },
  showIOSLog: {
    isBoolean: true
  },
  sendKeyStrategy: {
    isString: true,
    inclusion: ['oneByOne', 'grouped', 'setValue']
  },
  screenshotWaitTimeout: {
    isNumber: true
  },
  waitForAppScript: {
    isString: true
  },
  webviewConnectRetries: {
    isNumber: true
  },
  appName: {
    isString: true
  },
  clearSystemFiles: {
    isBoolean: true
  },
  customSSLCert: {
    isString: true
  },
  webkitResponseTimeout: {
    isNumber: true
  },
  remoteDebugProxy: {
    isString: true
  },
  enablePerformanceLogging: {
    isBoolean: true
  },
  enableAsyncExecuteFromHttps: {
    isBoolean: true
  },
  realDeviceLogger: {
    isString: true
  },
  fullContextList: {
    isBoolean: true
  },
  ignoreAboutBlankUrl: {
    isBoolean: true
  }
};
exports.desiredCapConstraints = desiredCapConstraints;

function desiredCapValidation(caps) {
  if ((caps.browserName || '').toLowerCase() !== 'safari' && !caps.app && !caps.bundleId) {
    let msg = 'The desired capabilities must include either an app or a bundleId for iOS';

    _logger.default.errorAndThrow(msg);
  }

  if (caps.launchTimeout) {
    let msg = 'launchTimeout must be a number, object, or string JSON object';

    if (!_lodash.default.isNumber(caps.launchTimeout)) {
      if (_lodash.default.isString(caps.launchTimeout)) {
        try {
          caps.launchTimeout = JSON.parse(caps.launchTimeout);
        } catch (err) {
          _logger.default.errorAndThrow(msg);
        }
      }

      if (!_lodash.default.isObject(caps.launchTimeout)) {
        _logger.default.errorAndThrow(msg);
      }
    }
  }

  if (caps.processArguments) {
    if (_lodash.default.isString(caps.processArguments)) {
      try {
        caps.processArguments = JSON.parse(caps.processArguments);
      } catch (ign) {}
    } else if (!_lodash.default.isObject(caps.processArguments)) {
      _logger.default.errorAndThrow('processArguments must be a string, object, or a string JSON object');
    }
  }

  if (typeof caps.enablePerformanceLogging !== 'boolean' && typeof caps.loggingPrefs === 'object' && caps.loggingPrefs.performance) {
    caps.enablePerformanceLogging = !!caps.loggingPrefs.performance;
  }

  return true;
}

var _default = desiredCapConstraints;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
