"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumBaseDriver = require("appium-base-driver");

var _appiumSupport = require("appium-support");

var _cookies = _interopRequireDefault(require("../cookies"));

var _logger = _interopRequireDefault(require("../logger"));

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;
const ELEMENT_OFFSET = 5000;
const {
  W3C_WEB_ELEMENT_IDENTIFIER
} = _appiumSupport.util;

commands.setFrame = async function (frame) {
  if (!this.isWebContext()) {
    frame = frame ? frame : 'target.frontMostApp()';
    let command = `wd_frame = ${frame}`;
    return await this.uiAutoClient.sendCommand(command);
  }

  let atom;

  if (_lodash.default.isNull(frame)) {
    this.curWebFrames = [];

    _logger.default.debug('Leaving web frame and going back to default content');

    return;
  }

  if (helpers.hasElementId(frame)) {
    let atomsElement = this.useAtomsElement(helpers.getElementId(frame));
    let value = await this.executeAtom('get_frame_window', [atomsElement]);

    _logger.default.debug(`Entering new web frame: '${value.WINDOW}'`);

    this.curWebFrames.unshift(value.WINDOW);
  } else {
    atom = _lodash.default.isNumber(frame) ? 'frame_by_index' : 'frame_by_id_or_name';
    let value = await this.executeAtom(atom, [frame]);

    if (_lodash.default.isNull(value) || _lodash.default.isUndefined(value.WINDOW)) {
      throw new _appiumBaseDriver.errors.NoSuchFrameError();
    }

    _logger.default.debug(`Entering new web frame: '${value.WINDOW}'`);

    this.curWebFrames.unshift(value.WINDOW);
  }
};

commands.getCssProperty = async function (propertyName, el) {
  let atomsElement = this.useAtomsElement(el);
  return await this.executeAtom('get_value_of_css_property', [atomsElement, propertyName]);
};

commands.submit = async function (el) {
  if (this.isWebContext()) {
    let atomsElement = this.useAtomsElement(el);
    await this.executeAtom('submit', [atomsElement]);
  } else {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }
};

commands.refresh = async function () {
  if (this.isWebContext()) {
    await this.executeAtom('refresh', []);
  } else {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }
};

commands.getUrl = async function () {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  let url = await this.remote.execute('window.location.href');
  return url;
};

commands.title = async function () {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  return await this.executeAtom('title', [], true);
};

commands.getCookies = async function () {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  _logger.default.debug('Retrieving all cookies');

  let script = 'return document.cookie';
  let jsCookies = await this.executeAtom('execute_script', [script, []]);
  let cookies = [];

  try {
    for (let [name, value] of _lodash.default.toPairs(_cookies.default.createJWPCookie(undefined, jsCookies))) {
      cookies.push({
        name,
        value
      });
    }

    return cookies;
  } catch (err) {
    _logger.default.error(err);

    throw new _appiumBaseDriver.errors.UnknownError(`Error parsing cookies from result: '${jsCookies}'`);
  }
};

commands.setCookie = async function (cookie) {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  cookie = _lodash.default.clone(cookie);

  if (!cookie.path) {
    cookie.path = "/";
  }

  let jsCookie = _cookies.default.createJSCookie(cookie.name, cookie.value, {
    expires: _lodash.default.isNumber(cookie.expiry) ? new Date(cookie.expiry * 1000).toUTCString() : cookie.expiry,
    path: cookie.path,
    domain: cookie.domain,
    httpOnly: cookie.httpOnly,
    secure: cookie.secure
  });

  let script = `document.cookie = ${JSON.stringify(jsCookie)}`;
  await this.executeAtom('execute_script', [script, []]);
};

commands.deleteCookie = async function (cookieName) {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  let cookies = await this.getCookies();

  if (_lodash.default.indexOf(_lodash.default.map(cookies, 'name'), cookieName) === -1) {
    _logger.default.debug(`Cookie '${cookieName}' not found. Ignoring.`);

    return true;
  }

  return await this._deleteCookie(cookieName);
};

commands.deleteCookies = async function () {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  let cookies = await this.getCookies();

  if (cookies.length) {
    for (let cookie of cookies) {
      await this._deleteCookie(cookie.name);
    }
  }

  return true;
};

helpers._deleteCookie = async function (cookieName) {
  _logger.default.debug(`Deleting cookie '${cookieName}'`);

  let webCookie = _cookies.default.expireCookie(cookieName, {
    path: "/"
  });

  let script = `document.cookie = ${JSON.stringify(webCookie)}`;
  await this.executeAtom('execute_script', [script, []]);
};

extensions.findWebElementOrElements = async function (strategy, selector, many, ctx) {
  let atomsElement = this.getAtomsElement(ctx);
  let element;

  let doFind = async () => {
    element = await this.executeAtom(`find_element${many ? 's' : ''}`, [strategy, selector, atomsElement]);
    return !_lodash.default.isNull(element);
  };

  try {
    await this.implicitWaitForCondition(doFind);
  } catch (err) {
    if (err.message && _lodash.default.isFunction(err.message.match) && err.message.match(/Condition unmet/)) {
      element = [];
    } else {
      throw err;
    }
  }

  if (many) {
    return element;
  } else {
    if (!element || _lodash.default.size(element) === 0) {
      throw new _appiumBaseDriver.errors.NoSuchElementError();
    }

    return element;
  }
};

extensions.webFlickElement = async function (el, xoffset, yoffset) {
  let atomsElement = await this.useAtomsElement(el);
  let {
    x,
    y
  } = await this.executeAtom('get_top_left_coordinates', [atomsElement]);
  let {
    width,
    height
  } = await this.executeAtom('get_size', [atomsElement]);
  x = x + width / 2;
  y = y + height / 2;
  let from = await this.translateWebCoords({
    x,
    y
  });
  let to = await this.translateWebCoords({
    x: x + xoffset,
    y: y + yoffset
  });
  let args = {
    from,
    to
  };
  let command = `au.flick(${JSON.stringify(args)})`;
  await this.uiAutoClient.sendCommand(command);
};

extensions.mobileWebNav = async function (navType) {
  this.remote.allowNavigationWithoutReload();
  await this.executeAtom('execute_script', [`history.${navType}();`, null]);
};

extensions.nativeWebTap = async function (el) {
  let atomsElement = this.useAtomsElement(el);
  let {
    x,
    y
  } = await this.executeAtom('get_top_left_coordinates', [atomsElement]);
  let {
    width,
    height
  } = await this.executeAtom('get_size', [atomsElement]);
  x = x + width / 2;
  y = y + height / 2 + (await this.getExtraNativeWebTapOffset());
  this.curWebCoords = {
    x,
    y
  };
  await this.clickWebCoords();
  await _bluebird.default.delay(500);
};

extensions.getExtraNativeWebTapOffset = async function () {
  return 0;
};

extensions.clickWebCoords = async function () {
  let coords = await this.translateWebCoords(this.curWebCoords);
  await this.clickCoords(coords);
};

extensions.translateWebCoords = async function (coords) {
  _logger.default.debug(`Translating coordinates (${JSON.stringify(coords)}) to web coordinates`);

  let wvCmd = 'au.getElementsByType(\'webview\')';
  let webviewIndex = this.webContextIndex();
  let yOffset = this.opts.curOrientation === 'LANDSCAPE' ? this.landscapeWebCoordsOffset : 0;
  let webviews = await this.uiAutoClient.sendCommand(wvCmd);

  if (webviews.length < 1) {
    throw new _appiumBaseDriver.errors.UnknownError.code('Could not find any webviews to click inside!');
  }

  if (_lodash.default.isUndefined(webviews[webviewIndex])) {
    _logger.default.warn(`Could not find webview at index ${webviewIndex}, taking ` + `last available one for clicking purposes`);

    webviewIndex = webviews.length - 1;
  }

  let wvId = helpers.getElementId(webviews[webviewIndex]);
  let locCmd = `au.getElement('${wvId}').rect()`;
  let rect = await this.uiAutoClient.sendCommand(locCmd);
  let wvPos = {
    x: rect.origin.x,
    y: rect.origin.y
  };
  let realDims = {
    w: rect.size.width,
    h: rect.size.height
  };
  let cmd = '(function () { return {w: document.width, h: document.height}; })()';
  let {
    w,
    h
  } = await this.remote.execute(cmd);
  let wvDims = {
    w,
    h
  };

  if (wvDims && realDims && wvPos) {
    let xRatio = realDims.w / wvDims.w;
    let yRatio = realDims.h / wvDims.h;
    let serviceBarHeight = 20;

    if (parseFloat(this.opts.platformVersion) >= 8) {
      serviceBarHeight = 0;
    }

    let newCoords = {
      x: wvPos.x + Math.round(xRatio * coords.x),
      y: wvPos.y + yOffset + Math.round(yRatio * coords.y) - serviceBarHeight
    };

    _logger.default.debug(`Converted web coords ${JSON.stringify(coords)} ` + `into real coords ${JSON.stringify(newCoords)}`);

    return newCoords;
  }
};

helpers.clickCoords = async function (coords) {
  if (this.useRobot) {
    throw new _appiumBaseDriver.errors.NotYetImplementedError();
  } else {
    let opts = coords;
    opts.tapCount = 1;
    opts.duration = 0.3;
    opts.touchCount = 1;
    let command = `au.complexTap(${JSON.stringify(opts)})`;
    await this.uiAutoClient.sendCommand(command);
  }
};

helpers.executeAtom = async function (atom, args, alwaysDefaultFrame = false) {
  let frames = alwaysDefaultFrame === true ? [] : this.curWebFrames;
  let promise = this.remote.executeAtom(atom, args, frames);
  return await this.waitForAtom(promise);
};

helpers.executeAtomAsync = async function (atom, args, responseUrl) {
  let promise = new _bluebird.default((resolve, reject) => {
    this.asyncPromise = {
      resolve,
      reject
    };
  });
  await this.remote.executeAtomAsync(atom, args, this.curWebFrames, responseUrl);
  return await this.waitForAtom(promise);
};

helpers.waitForAtom = async function (promise) {
  let done = false;
  let error = null;
  promise.then(res => {
    done = true;
    return res;
  }).catch(err => {
    _logger.default.debug(`Error received while executing atom: ${err.message}`);

    done = true;
    error = err;
  });

  for (let i = 0; i < 10; i++) {
    if (done) break;
    await _bluebird.default.delay(500);
    if (done) break;

    if (await this.checkForAlert()) {
      return '';
    }
  }

  let res = await promise;

  if (error) {
    throw error;
  }

  return this.parseExecuteResponse(res);
};

helpers.checkForAlert = async function () {
  if (!_lodash.default.isNull(this.uiAutoClient)) {
    _logger.default.debug('atom did not return yet, checking to see if ' + 'we are blocked by an alert');

    let present = await this.uiAutoClient.sendCommand('au.alertIsPresent()');

    if (!present) {
      _logger.default.debug('No alert found.');
    } else {
      _logger.default.debug('Found an alert, returning control to client');
    }

    return present;
  }
};

helpers.getAtomsElement = function (wdId) {
  let atomsId;

  try {
    atomsId = this.webElementIds[parseInt(wdId, 10) - ELEMENT_OFFSET];
  } catch (e) {
    return null;
  }

  if (_lodash.default.isUndefined(atomsId)) {
    return null;
  }

  return {
    ELEMENT: atomsId
  };
};

helpers.useAtomsElement = function (el) {
  if (parseInt(el, 10) < ELEMENT_OFFSET) {
    _logger.default.debug(`Element with id '${el}' passed in for use with ` + `atoms, but it's out of our internal scope. Adding ${ELEMENT_OFFSET}.`);

    el = (parseInt(el, 10) + ELEMENT_OFFSET).toString();
  }

  let atomsElement = this.getAtomsElement(el);

  if (atomsElement === null) {
    throw new _appiumBaseDriver.errors.UnknownError(`Error converting element ID for using in WD atoms: '${el}'`);
  }

  return atomsElement;
};

helpers.convertElementsForAtoms = function (args = []) {
  let newArgs = [];

  for (let arg of args) {
    if (helpers.hasElementId(arg)) {
      let elementId = helpers.getElementId(arg);
      let atomsElement = this.getAtomsElement(elementId);

      if (atomsElement === null) {
        throw new _appiumBaseDriver.errors.UnknownError(`Error converting element ID for using in WD atoms: '${elementId}'`);
      }

      newArgs.push(atomsElement);
    } else {
      newArgs.push(arg);
    }
  }

  return newArgs;
};

helpers.parseExecuteResponse = function (res) {
  if (_lodash.default.isNull(res) || _lodash.default.isUndefined(res)) return null;
  let wdElement = null;

  if (!_lodash.default.isArray(res)) {
    if (helpers.hasElementId(res)) {
      wdElement = this.parseElementResponse(res);

      if (wdElement === null) {
        throw new _appiumBaseDriver.errors.UnknownError(`Error converting element ID atom for using in WD: '${helpers.getElementId(res)}'`);
      }

      res = wdElement;
    }
  } else {
    let args = [];

    for (let arg of res) {
      wdElement = arg;

      if (helpers.hasElementId(arg)) {
        wdElement = this.parseElementResponse(arg);

        if (wdElement === null) {
          throw new _appiumBaseDriver.errors.UnknownError(`Error converting element ID atom for using in WD: '${helpers.getElementId(arg)}'`);
        }

        args.push(wdElement);
      } else {
        args.push(arg);
      }
    }

    res = args;
  }

  return res;
};

helpers.parseElementResponse = function (element) {
  let objId = helpers.getElementId(element);
  let clientId = (ELEMENT_OFFSET + this.webElementIds.length).toString();
  this.webElementIds.push(objId);
  return {
    ELEMENT: clientId
  };
};

helpers.getElementId = function (element) {
  return element.ELEMENT || element[W3C_WEB_ELEMENT_IDENTIFIER];
};

helpers.hasElementId = function (element) {
  return _appiumSupport.util.hasValue(element) && (_appiumSupport.util.hasValue(element.ELEMENT) || _appiumSupport.util.hasValue(element[W3C_WEB_ELEMENT_IDENTIFIER]));
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
