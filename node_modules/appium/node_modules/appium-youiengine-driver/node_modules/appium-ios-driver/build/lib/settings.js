"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setLocale = setLocale;
exports.setPreferences = setPreferences;
exports.setLocaleAndPreferences = setLocaleAndPreferences;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

const SETTINGS_CAPS = ['locationServicesEnabled', 'locationServicesAuthorized'];
const SAFARI_SETTINGS_CAPS = ['safariAllowPopups', 'safariIgnoreFraudWarning', 'safariOpenLinksInBackground'];

async function launchAndQuitSimulator(sim, safari) {
  _logger.default.debug('No simulator directories found.');

  return await sim.launchAndQuit(safari);
}

function checkPreferences(settings, opts = {}) {
  for (let setting of settings) {
    if (_lodash.default.has(opts, setting)) {
      return true;
    }
  }

  return false;
}

async function setLocaleAndPreferences(sim, opts, safari = false, shutdownFn = _lodash.default.noop) {
  const localConfig = await setLocale(sim, opts, {}, safari);
  const prefsUpdated = await setPreferences(sim, opts, safari);

  if (localConfig._updated || prefsUpdated) {
    _logger.default.debug("Updated settings. Rebooting the simulator if it's already open");

    await shutdownFn(sim);
  }

  delete localConfig._updated;
  return localConfig;
}

async function setLocale(sim, opts, localeConfig = {}, safari = false) {
  if (!opts.language && !opts.locale && !opts.calendarFormat) {
    _logger.default.debug("No reason to set locale");

    return {
      _updated: false
    };
  }

  if (await sim.isFresh()) {
    await launchAndQuitSimulator(sim, safari);
  }

  _logger.default.debug('Setting locale information');

  localeConfig = {
    language: opts.language || localeConfig.language,
    locale: opts.locale || localeConfig.locale,
    calendarFormat: opts.calendarFormat || localeConfig.calendarFormat,
    _updated: false
  };

  try {
    let updated = await sim.updateLocale(opts.language, opts.locale, opts.calendarFormat);

    if (updated) {
      localeConfig._updated = true;
    }
  } catch (e) {
    _logger.default.errorAndThrow(`Appium was unable to set locale info: ${e}`);
  }

  return localeConfig;
}

async function setPreferences(sim, opts, safari = false) {
  let needToSetPrefs = checkPreferences(SETTINGS_CAPS, opts);
  let needToSetSafariPrefs = checkPreferences(SAFARI_SETTINGS_CAPS, opts);

  if (!needToSetPrefs && !needToSetSafariPrefs) {
    _logger.default.debug("No iOS / app preferences to set");

    return false;
  }

  _logger.default.debug("Setting iOS and app preferences");

  if (await sim.isFresh()) {
    await launchAndQuitSimulator(sim, safari);
  }

  try {
    if (needToSetPrefs) {
      await setLocServicesPrefs(sim, opts);
    }
  } catch (e) {
    _logger.default.error("Error setting location services preferences, prefs will not work");

    _logger.default.error(e);
  }

  try {
    if (needToSetSafariPrefs) {
      await setSafariPrefs(sim, opts);
    }
  } catch (e) {
    _logger.default.error("Error setting safari preferences, prefs will not work");

    _logger.default.error(e);
  }

  return true;
}

async function setLocServicesPrefs(sim, opts = {}) {
  let locServ = _lodash.default.find([opts.locationServicesEnabled, opts.locationServicesAuthorized], c => {
    return !_lodash.default.isUndefined(c);
  });

  if (!_lodash.default.isUndefined(locServ)) {
    locServ = locServ ? 1 : 0;

    _logger.default.debug(`Setting location services to ${locServ}`);

    await sim.updateSettings('locationServices', {
      LocationServicesEnabled: locServ,
      'LocationServicesEnabledIn7.0': locServ,
      'LocationServicesEnabledIn8.0': locServ
    });
  }

  if (!_lodash.default.isUndefined(opts.locationServicesAuthorized)) {
    if (!opts.bundleId) {
      let msg = "Can't set location services for app without bundle ID";

      _logger.default.errorAndThrow(msg);
    }

    let locAuth = !!opts.locationServicesAuthorized;

    if (locAuth) {
      _logger.default.debug("Authorizing location services for app");
    } else {
      _logger.default.debug("De-authorizing location services for app");
    }

    await sim.updateLocationSettings(opts.bundleId, locAuth);
  }
}

async function setSafariPrefs(sim, opts = {}) {
  let safariSettings = {};

  if (_lodash.default.has(opts, 'safariAllowPopups')) {
    let val = !!opts.safariAllowPopups;

    _logger.default.debug(`Setting javascript window opening to '${val}'`);

    safariSettings.WebKitJavaScriptCanOpenWindowsAutomatically = val;
    safariSettings.JavaScriptCanOpenWindowsAutomatically = val;
  }

  if (_lodash.default.has(opts, 'safariIgnoreFraudWarning')) {
    let val = !opts.safariIgnoreFraudWarning;

    _logger.default.debug(`Setting fraudulent website warning to '${val}'`);

    safariSettings.WarnAboutFraudulentWebsites = val;
  }

  if (_lodash.default.has(opts, 'safariOpenLinksInBackground')) {
    let val = opts.safariOpenLinksInBackground ? 1 : 0;

    _logger.default.debug(`Setting opening links in background to '${!!val}'`);

    safariSettings.OpenLinksInBackground = val;
  }

  if (_lodash.default.size(safariSettings) > 0) {
    await sim.updateSafariSettings(safariSettings);
  }
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
