"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _uuidJs = _interopRequireDefault(require("uuid-js"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _path = _interopRequireDefault(require("path"));

var _asyncbox = require("asyncbox");

var _appiumSupport = require("appium-support");

var _utils = require("../uiauto/utils");

var _logger = _interopRequireDefault(require("../logger"));

var _appiumBaseDriver = require("appium-base-driver");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

commands.getScreenshot = async function () {
  let guid = _uuidJs.default.create();

  let shotFile = `screenshot${guid}`;

  let shotFolder = _path.default.resolve(this.opts.tmpDir, 'appium-instruments/Run 1/');

  if (!(await _appiumSupport.fs.exists(shotFolder))) {
    _logger.default.debug(`Creating folder '${shotFolder}'`);

    await (0, _appiumSupport.mkdirp)(shotFolder);
  }

  let shotPath = _path.default.resolve(shotFolder, `${shotFile}.png`);

  _logger.default.debug(`Taking screenshot: '${shotPath}'`);

  let takeScreenShot = async () => {
    await this.uiAutoClient.sendCommand(`au.capture('${shotFile}')`);
    let screenshotWaitTimeout = (this.opts.screenshotWaitTimeout || 10) * 1000;

    _logger.default.debug(`Waiting ${screenshotWaitTimeout} ms for screenshot to be generated.`);

    let startMs = Date.now();
    let success = false;

    while (Date.now() - startMs < screenshotWaitTimeout) {
      if (await _appiumSupport.fs.hasAccess(shotPath)) {
        success = true;
        break;
      }

      await _bluebird.default.delay(300);
    }

    if (!success) {
      throw new _appiumBaseDriver.errors.UnknownError('Timed out waiting for screenshot file');
    }

    if ((await this.getOrientation()) === 'LANDSCAPE') {
      _logger.default.debug('Rotating landscape screenshot');

      await (0, _utils.rotateImage)(shotPath, -90);
    }

    return await _appiumSupport.fs.readFile(shotPath);
  };

  let data = await (0, _asyncbox.retry)(3, takeScreenShot);
  return Buffer.from(data).toString('base64');
};

commands.getViewportScreenshot = async function () {
  const windowSize = await this.getWindowSize();
  const scale = await this.getDevicePixelRatio();
  const statusBarHeight = (await this.getStatusBarHeight()) * scale;
  const screenshot = await this.getScreenshot();
  let rect = {
    left: 0,
    top: statusBarHeight,
    width: windowSize.width * scale,
    height: windowSize.height * scale - statusBarHeight
  };
  let newScreenshot = await _appiumSupport.imageUtil.cropBase64Image(screenshot, rect);
  return newScreenshot;
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9zY3JlZW5zaG90LmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiaGVscGVycyIsImV4dGVuc2lvbnMiLCJnZXRTY3JlZW5zaG90IiwiZ3VpZCIsInV1aWQiLCJjcmVhdGUiLCJzaG90RmlsZSIsInNob3RGb2xkZXIiLCJwYXRoIiwicmVzb2x2ZSIsIm9wdHMiLCJ0bXBEaXIiLCJmcyIsImV4aXN0cyIsImxvZ2dlciIsImRlYnVnIiwic2hvdFBhdGgiLCJ0YWtlU2NyZWVuU2hvdCIsInVpQXV0b0NsaWVudCIsInNlbmRDb21tYW5kIiwic2NyZWVuc2hvdFdhaXRUaW1lb3V0Iiwic3RhcnRNcyIsIkRhdGUiLCJub3ciLCJzdWNjZXNzIiwiaGFzQWNjZXNzIiwiQiIsImRlbGF5IiwiZXJyb3JzIiwiVW5rbm93bkVycm9yIiwiZ2V0T3JpZW50YXRpb24iLCJyZWFkRmlsZSIsImRhdGEiLCJCdWZmZXIiLCJmcm9tIiwidG9TdHJpbmciLCJnZXRWaWV3cG9ydFNjcmVlbnNob3QiLCJ3aW5kb3dTaXplIiwiZ2V0V2luZG93U2l6ZSIsInNjYWxlIiwiZ2V0RGV2aWNlUGl4ZWxSYXRpbyIsInN0YXR1c0JhckhlaWdodCIsImdldFN0YXR1c0JhckhlaWdodCIsInNjcmVlbnNob3QiLCJyZWN0IiwibGVmdCIsInRvcCIsIndpZHRoIiwiaGVpZ2h0IiwibmV3U2NyZWVuc2hvdCIsImltYWdlVXRpbCIsImNyb3BCYXNlNjRJbWFnZSIsIk9iamVjdCIsImFzc2lnbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQSxJQUFJQSxRQUFRLEdBQUcsRUFBZjtBQUFBLElBQW1CQyxPQUFPLEdBQUcsRUFBN0I7QUFBQSxJQUFpQ0MsVUFBVSxHQUFHLEVBQTlDOzs7O0FBRUFGLFFBQVEsQ0FBQ0csYUFBVCxHQUF5QixrQkFBa0I7QUFDekMsTUFBSUMsSUFBSSxHQUFHQyxn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Q0FBQ0MsTUFBUCxDQUFjcEQsVUFBZCxFQUEwQkYsUUFBMUIsRUFBb0NDLE9BQXBDO2VBRWVDLFUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdXVpZCBmcm9tICd1dWlkLWpzJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgcmV0cnkgfSBmcm9tICdhc3luY2JveCc7XG5pbXBvcnQgeyBmcywgbWtkaXJwLCBpbWFnZVV0aWwgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgeyByb3RhdGVJbWFnZSB9IGZyb20gJy4uL3VpYXV0by91dGlscyc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4uL2xvZ2dlcic7XG5pbXBvcnQgeyBlcnJvcnMgfSBmcm9tICdhcHBpdW0tYmFzZS1kcml2ZXInO1xuXG5cbmxldCBjb21tYW5kcyA9IHt9LCBoZWxwZXJzID0ge30sIGV4dGVuc2lvbnMgPSB7fTtcblxuY29tbWFuZHMuZ2V0U2NyZWVuc2hvdCA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgbGV0IGd1aWQgPSB1dWlkLmNyZWF0ZSgpO1xuICBsZXQgc2hvdEZpbGUgPSBgc2NyZWVuc2hvdCR7Z3VpZH1gO1xuXG4gIGxldCBzaG90Rm9sZGVyID0gcGF0aC5yZXNvbHZlKHRoaXMub3B0cy50bXBEaXIsICdhcHBpdW0taW5zdHJ1bWVudHMvUnVuIDEvJyk7XG4gIGlmICghKGF3YWl0IGZzLmV4aXN0cyhzaG90Rm9sZGVyKSkpIHtcbiAgICBsb2dnZXIuZGVidWcoYENyZWF0aW5nIGZvbGRlciAnJHtzaG90Rm9sZGVyfSdgKTtcbiAgICBhd2FpdCBta2RpcnAoc2hvdEZvbGRlcik7XG4gIH1cblxuICBsZXQgc2hvdFBhdGggPSBwYXRoLnJlc29sdmUoc2hvdEZvbGRlciwgYCR7c2hvdEZpbGV9LnBuZ2ApO1xuICBsb2dnZXIuZGVidWcoYFRha2luZyBzY3JlZW5zaG90OiAnJHtzaG90UGF0aH0nYCk7XG5cbiAgbGV0IHRha2VTY3JlZW5TaG90ID0gYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IHRoaXMudWlBdXRvQ2xpZW50LnNlbmRDb21tYW5kKGBhdS5jYXB0dXJlKCcke3Nob3RGaWxlfScpYCk7XG5cbiAgICBsZXQgc2NyZWVuc2hvdFdhaXRUaW1lb3V0ID0gKHRoaXMub3B0cy5zY3JlZW5zaG90V2FpdFRpbWVvdXQgfHwgMTApICogMTAwMDtcbiAgICBsb2dnZXIuZGVidWcoYFdhaXRpbmcgJHtzY3JlZW5zaG90V2FpdFRpbWVvdXR9IG1zIGZvciBzY3JlZW5zaG90IHRvIGJlIGdlbmVyYXRlZC5gKTtcbiAgICBsZXQgc3RhcnRNcyA9IERhdGUubm93KCk7XG5cbiAgICBsZXQgc3VjY2VzcyA9IGZhbHNlO1xuICAgIHdoaWxlICgoRGF0ZS5ub3coKSAtIHN0YXJ0TXMpIDwgc2NyZWVuc2hvdFdhaXRUaW1lb3V0KSB7XG4gICAgICBpZiAoYXdhaXQgZnMuaGFzQWNjZXNzKHNob3RQYXRoKSkge1xuICAgICAgICBzdWNjZXNzID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBhd2FpdCBCLmRlbGF5KDMwMCk7XG4gICAgfVxuICAgIGlmICghc3VjY2Vzcykge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5Vbmtub3duRXJyb3IoJ1RpbWVkIG91dCB3YWl0aW5nIGZvciBzY3JlZW5zaG90IGZpbGUnKTtcbiAgICB9XG5cbiAgICAvLyBjaGVjayB0aGUgcm90YXRpb24sIGFuZCByb3RhdGUgaWYgbmVjZXNzYXJ5XG4gICAgaWYgKGF3YWl0IHRoaXMuZ2V0T3JpZW50YXRpb24oKSA9PT0gJ0xBTkRTQ0FQRScpIHtcbiAgICAgIGxvZ2dlci5kZWJ1ZygnUm90YXRpbmcgbGFuZHNjYXBlIHNjcmVlbnNob3QnKTtcbiAgICAgIGF3YWl0IHJvdGF0ZUltYWdlKHNob3RQYXRoLCAtOTApO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgZnMucmVhZEZpbGUoc2hvdFBhdGgpO1xuICB9O1xuXG4gIC8vIFJldHJ5aW5nIHRoZSB3aG9sZSBzY3JlZW5zaG90IHByb2Nlc3MgZm9yIHRocmVlIHRpbWVzLlxuICBsZXQgZGF0YSA9IGF3YWl0IHJldHJ5KDMsIHRha2VTY3JlZW5TaG90KTtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKGRhdGEpLnRvU3RyaW5nKCdiYXNlNjQnKTtcbn07XG5cbmNvbW1hbmRzLmdldFZpZXdwb3J0U2NyZWVuc2hvdCA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgY29uc3Qgd2luZG93U2l6ZSA9IGF3YWl0IHRoaXMuZ2V0V2luZG93U2l6ZSgpO1xuICBjb25zdCBzY2FsZSA9IGF3YWl0IHRoaXMuZ2V0RGV2aWNlUGl4ZWxSYXRpbygpO1xuICAvLyBzdGF0dXMgYmFyIGhlaWdodCBjb21lcyBpbiB1bnNjYWxlZCwgc28gc2NhbGUgaXRcbiAgY29uc3Qgc3RhdHVzQmFySGVpZ2h0ID0gYXdhaXQgdGhpcy5nZXRTdGF0dXNCYXJIZWlnaHQoKSAqIHNjYWxlO1xuICBjb25zdCBzY3JlZW5zaG90ID0gYXdhaXQgdGhpcy5nZXRTY3JlZW5zaG90KCk7XG4gIGxldCByZWN0ID0ge1xuICAgIGxlZnQ6IDAsXG4gICAgdG9wOiBzdGF0dXNCYXJIZWlnaHQsXG4gICAgd2lkdGg6IHdpbmRvd1NpemUud2lkdGggKiBzY2FsZSxcbiAgICBoZWlnaHQ6IHdpbmRvd1NpemUuaGVpZ2h0ICogc2NhbGUgLSBzdGF0dXNCYXJIZWlnaHRcbiAgfTtcbiAgbGV0IG5ld1NjcmVlbnNob3QgPSBhd2FpdCBpbWFnZVV0aWwuY3JvcEJhc2U2NEltYWdlKHNjcmVlbnNob3QsIHJlY3QpO1xuICByZXR1cm4gbmV3U2NyZWVuc2hvdDtcbn07XG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgY29tbWFuZHMsIGhlbHBlcnMpO1xuZXhwb3J0IHtjb21tYW5kcywgaGVscGVyc307XG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sImZpbGUiOiJsaWIvY29tbWFuZHMvc2NyZWVuc2hvdC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
