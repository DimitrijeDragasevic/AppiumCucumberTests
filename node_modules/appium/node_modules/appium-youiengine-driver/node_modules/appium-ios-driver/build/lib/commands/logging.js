"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _iosLog = _interopRequireDefault(require("../device-log/ios-log"));

var _iosCrashLog = _interopRequireDefault(require("../device-log/ios-crash-log"));

var _logger = _interopRequireDefault(require("../logger"));

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

extensions.extractLogs = async function (logType, logsContainer = {}) {
  if (_lodash.default.isEmpty(logsContainer)) {
    throw new Error('No logs currently available. Is the device/simulator started?');
  }

  const logObject = logsContainer[logType];
  const logs = logObject ? await logObject.getLogs() : null;

  if (logs) {
    return logs;
  }

  throw new Error(`No logs of type '${logType}' found.`);
};

extensions.supportedLogTypes = {
  syslog: {
    description: 'System Logs - Device logs for iOS applications on real devices and simulators',
    getter: async self => await self.extractLogs('syslog', self.logs)
  },
  crashlog: {
    description: 'Crash Logs - Crash reports for iOS applications on real devices and simulators',
    getter: async self => await self.extractLogs('crashlog', self.logs)
  },
  performance: {
    description: 'Performance Logs - Debug Timelines on real devices and simulators',
    getter: async self => await self.extractLogs('performance', self.logs)
  },
  server: {
    description: 'Appium server logs',
    getter: self => {
      if (!self.relaxedSecurityEnabled) {
        throw new Error('Appium server must have relaxed security flag set ' + 'in order to retrieve server logs');
      }

      return _logger.default.unwrap().record.map(x => {
        return {
          timestamp: Date.now(),
          level: 'ALL',
          message: _lodash.default.isEmpty(x.prefix) ? x.message : `[${x.prefix}] ${x.message}`
        };
      });
    }
  }
};

helpers.startLogCapture = async function (sim) {
  if (!_lodash.default.isEmpty(this.logs)) {
    _logger.default.warn("Trying to start iOS log capture but it's already started!");

    return;
  }

  this.logs.crashlog = new _iosCrashLog.default();
  this.logs.syslog = new _iosLog.default({
    sim,
    udid: this.opts.udid,
    showLogs: this.opts.showIOSLog,
    realDeviceLogger: this.opts.realDeviceLogger,
    xcodeVersion: this.xcodeVersion
  });

  try {
    await this.logs.syslog.startCapture();
  } catch (err) {
    _logger.default.warn("Could not capture logs from device. Continuing without capturing logs.");

    return;
  }

  await this.logs.crashlog.startCapture();
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9sb2dnaW5nLmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiaGVscGVycyIsImV4dGVuc2lvbnMiLCJleHRyYWN0TG9ncyIsImxvZ1R5cGUiLCJsb2dzQ29udGFpbmVyIiwiXyIsImlzRW1wdHkiLCJFcnJvciIsImxvZ09iamVjdCIsImxvZ3MiLCJnZXRMb2dzIiwic3VwcG9ydGVkTG9nVHlwZXMiLCJzeXNsb2ciLCJkZXNjcmlwdGlvbiIsImdldHRlciIsInNlbGYiLCJjcmFzaGxvZyIsInBlcmZvcm1hbmNlIiwic2VydmVyIiwicmVsYXhlZFNlY3VyaXR5RW5hYmxlZCIsImxvZ2dlciIsInVud3JhcCIsInJlY29yZCIsIm1hcCIsIngiLCJ0aW1lc3RhbXAiLCJEYXRlIiwibm93IiwibGV2ZWwiLCJtZXNzYWdlIiwicHJlZml4Iiwic3RhcnRMb2dDYXB0dXJlIiwic2ltIiwid2FybiIsIklPU0NyYXNoTG9nIiwiSU9TTG9nIiwidWRpZCIsIm9wdHMiLCJzaG93TG9ncyIsInNob3dJT1NMb2ciLCJyZWFsRGV2aWNlTG9nZ2VyIiwieGNvZGVWZXJzaW9uIiwic3RhcnRDYXB0dXJlIiwiZXJyIiwiT2JqZWN0IiwiYXNzaWduIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUdBLElBQUlBLFFBQVEsR0FBRyxFQUFmO0FBQUEsSUFBbUJDLE9BQU8sR0FBRyxFQUE3QjtBQUFBLElBQWlDQyxVQUFVLEdBQUcsRUFBOUM7Ozs7QUFFQUEsVUFBVSxDQUFDQyxXQUFYLEdBQXlCLGdCQUFnQkMsT0FBaEIsRUFBeUJDLGFBQWEsR0FBRyxFQUF6QyxFQUE2QztBQUdwRSxNQUFJQyxnQkFBRUMsT0FBRixDQUFVRixhQUFWLENBQUosRUFBOEI7QUFDNUIsVUFBTSxJQUFJRyxLQUFKLENBQVUsK0RBQVYsQ0FBTjtBQUNEOztBQUdELFFBQU1DLFNBQVMsR0FBR0osYUFBYSxDQUFDRCxPQUFELENBQS9CO0FBQ0Es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TyxRQUFWLENBQW1CMEIsWUFBbkIsRUFBTjtBQUNELENBcEJEOztBQXVCQUUsTUFBTSxDQUFDQyxNQUFQLENBQWM1QyxVQUFkLEVBQTBCRixRQUExQixFQUFvQ0MsT0FBcEM7ZUFFZUMsVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgSU9TTG9nIGZyb20gJy4uL2RldmljZS1sb2cvaW9zLWxvZyc7XG5pbXBvcnQgSU9TQ3Jhc2hMb2cgZnJvbSAnLi4vZGV2aWNlLWxvZy9pb3MtY3Jhc2gtbG9nJztcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi4vbG9nZ2VyJztcblxuXG5sZXQgY29tbWFuZHMgPSB7fSwgaGVscGVycyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbmV4dGVuc2lvbnMuZXh0cmFjdExvZ3MgPSBhc3luYyBmdW5jdGlvbiAobG9nVHlwZSwgbG9nc0NvbnRhaW5lciA9IHt9KSB7XG4gIC8vIG1ha2Ugc3VyZSB0aGF0IHdlIGhhdmUgbG9ncyBhdCBhbGxcbiAgLy8gb3RoZXJ3aXNlIGl0J3Mgbm90IGJlZW4gaW5pdGlhbGl6ZWRcbiAgaWYgKF8uaXNFbXB0eShsb2dzQ29udGFpbmVyKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignTm8gbG9ncyBjdXJyZW50bHkgYXZhaWxhYmxlLiBJcyB0aGUgZGV2aWNlL3NpbXVsYXRvciBzdGFydGVkPycpO1xuICB9XG5cbiAgLy8gSWYgbG9ncyBjYXB0dXJlZCBzdWNjZXNzZnVsbHkgc2VuZCByZXNwb25zZSB3aXRoIGRhdGEsIGVsc2Ugc2VuZCBlcnJvclxuICBjb25zdCBsb2dPYmplY3QgPSBsb2dzQ29udGFpbmVyW2xvZ1R5cGVdO1xuICBjb25zdCBsb2dzID0gbG9nT2JqZWN0ID8gYXdhaXQgbG9nT2JqZWN0LmdldExvZ3MoKSA6IG51bGw7XG4gIGlmIChsb2dzKSB7XG4gICAgcmV0dXJuIGxvZ3M7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKGBObyBsb2dzIG9mIHR5cGUgJyR7bG9nVHlwZX0nIGZvdW5kLmApO1xufTtcblxuZXh0ZW5zaW9ucy5zdXBwb3J0ZWRMb2dUeXBlcyA9IHtcbiAgc3lzbG9nOiB7XG4gICAgZGVzY3JpcHRpb246ICdTeXN0ZW0gTG9ncyAtIERldmljZSBsb2dzIGZvciBpT1MgYXBwbGljYXRpb25zIG9uIHJlYWwgZGV2aWNlcyBhbmQgc2ltdWxhdG9ycycsXG4gICAgZ2V0dGVyOiBhc3luYyAoc2VsZikgPT4gYXdhaXQgc2VsZi5leHRyYWN0TG9ncygnc3lzbG9nJywgc2VsZi5sb2dzKSxcbiAgfSxcbiAgY3Jhc2hsb2c6IHtcbiAgICBkZXNjcmlwdGlvbjogJ0NyYXNoIExvZ3MgLSBDcmFzaCByZXBvcnRzIGZvciBpT1MgYXBwbGljYXRpb25zIG9uIHJlYWwgZGV2aWNlcyBhbmQgc2ltdWxhdG9ycycsXG4gICAgZ2V0dGVyOiBhc3luYyAoc2VsZikgPT4gYXdhaXQgc2VsZi5leHRyYWN0TG9ncygnY3Jhc2hsb2cnLCBzZWxmLmxvZ3MpLFxuICB9LFxuICBwZXJmb3JtYW5jZToge1xuICAgIGRlc2NyaXB0aW9uOiAnUGVyZm9ybWFuY2UgTG9ncyAtIERlYnVnIFRpbWVsaW5lcyBvbiByZWFsIGRldmljZXMgYW5kIHNpbXVsYXRvcnMnLFxuICAgIGdldHRlcjogYXN5bmMgKHNlbGYpID0+IGF3YWl0IHNlbGYuZXh0cmFjdExvZ3MoJ3BlcmZvcm1hbmNlJywgc2VsZi5sb2dzKSxcbiAgfSxcbiAgc2VydmVyOiB7XG4gICAgZGVzY3JpcHRpb246ICdBcHBpdW0gc2VydmVyIGxvZ3MnLFxuICAgIGdldHRlcjogKHNlbGYpID0+IHtcbiAgICAgIGlmICghc2VsZi5yZWxheGVkU2VjdXJpdHlFbmFibGVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQXBwaXVtIHNlcnZlciBtdXN0IGhhdmUgcmVsYXhlZCBzZWN1cml0eSBmbGFnIHNldCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdpbiBvcmRlciB0byByZXRyaWV2ZSBzZXJ2ZXIgbG9ncycpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxvZ2dlci51bndyYXAoKS5yZWNvcmRcbiAgICAgICAgLm1hcCgoeCkgPT4ge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAvLyBucG1sb2cgZG9lcyBub3Qga2VlcCB0aW1lc3RhbXBzIGluIHRoZSBoaXN0b3J5XG4gICAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICAgICAgICBsZXZlbDogJ0FMTCcsXG4gICAgICAgICAgICBtZXNzYWdlOiBfLmlzRW1wdHkoeC5wcmVmaXgpID8geC5tZXNzYWdlIDogYFske3gucHJlZml4fV0gJHt4Lm1lc3NhZ2V9YCxcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9LFxuICB9LFxufTtcblxuaGVscGVycy5zdGFydExvZ0NhcHR1cmUgPSBhc3luYyBmdW5jdGlvbiAoc2ltKSB7XG4gIGlmICghXy5pc0VtcHR5KHRoaXMubG9ncykpIHtcbiAgICBsb2dnZXIud2FybihcIlRyeWluZyB0byBzdGFydCBpT1MgbG9nIGNhcHR1cmUgYnV0IGl0J3MgYWxyZWFkeSBzdGFydGVkIVwiKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5sb2dzLmNyYXNobG9nID0gbmV3IElPU0NyYXNoTG9nKCk7XG4gIHRoaXMubG9ncy5zeXNsb2cgPSBuZXcgSU9TTG9nKHtcbiAgICBzaW0sXG4gICAgdWRpZDogdGhpcy5vcHRzLnVkaWQsXG4gICAgc2hvd0xvZ3M6IHRoaXMub3B0cy5zaG93SU9TTG9nLFxuICAgIHJlYWxEZXZpY2VMb2dnZXI6IHRoaXMub3B0cy5yZWFsRGV2aWNlTG9nZ2VyLFxuICAgIHhjb2RlVmVyc2lvbjogdGhpcy54Y29kZVZlcnNpb24sXG4gIH0pO1xuICB0cnkge1xuICAgIGF3YWl0IHRoaXMubG9ncy5zeXNsb2cuc3RhcnRDYXB0dXJlKCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZ2dlci53YXJuKFwiQ291bGQgbm90IGNhcHR1cmUgbG9ncyBmcm9tIGRldmljZS4gQ29udGludWluZyB3aXRob3V0IGNhcHR1cmluZyBsb2dzLlwiKTtcbiAgICByZXR1cm47XG4gIH1cbiAgYXdhaXQgdGhpcy5sb2dzLmNyYXNobG9nLnN0YXJ0Q2FwdHVyZSgpO1xufTtcblxuXG5PYmplY3QuYXNzaWduKGV4dGVuc2lvbnMsIGNvbW1hbmRzLCBoZWxwZXJzKTtcbmV4cG9ydCB7IGNvbW1hbmRzLCBoZWxwZXJzIH07XG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sImZpbGUiOiJsaWIvY29tbWFuZHMvbG9nZ2luZy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
