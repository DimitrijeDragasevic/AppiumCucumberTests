"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _appiumBaseDriver = require("appium-base-driver");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _utils = require("../utils");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

commands.getAttribute = async function (attribute, el) {
  el = (0, _utils.unwrapEl)(el);

  if (this.isWebContext()) {
    let atomsElement = this.getAtomsElement(el);

    if (_lodash.default.isNull(atomsElement)) {
      throw new _appiumBaseDriver.errors.UnknownError(`Error converting element ID for using in WD atoms: '${el}'`);
    } else {
      return await this.executeAtom('get_attribute_value', [atomsElement, attribute]);
    }
  } else {
    if (attribute === 'contentSize') {
      return await this.getElementContentSize(el);
    }

    if (_lodash.default.includes(['label', 'name', 'value', 'values', 'hint'], attribute)) {
      let command = `au.getElement('${el}').${attribute}()`;
      return await this.uiAutoClient.sendCommand(command);
    } else {
      throw new _appiumBaseDriver.errors.UnknownCommandError(`UIAElements don't have the attribute '${attribute}'`);
    }
  }
};

commands.clear = async function (el) {
  el = (0, _utils.unwrapEl)(el);

  if (this.isWebContext()) {
    let atomsElement = this.useAtomsElement(el);
    await this.executeAtom('clear', [atomsElement]);
  } else {
    let command = `au.getElement('${el}').setValue('')`;
    await this.uiAutoClient.sendCommand(command);
  }
};

commands.setValueImmediate = async function (value, el) {
  el = (0, _utils.unwrapEl)(el);
  value = _appiumSupport.util.escapeSpecialChars(value, "'");
  let command = `au.getElement('${el}').setValue('${value}')`;
  await this.uiAutoClient.sendCommand(command);
};

commands.setValue = async function (value, el) {
  el = (0, _utils.unwrapEl)(el);

  if (this.isWebContext()) {
    let atomsElement = this.useAtomsElement(el);
    await this.executeAtom('click', [atomsElement]);
    await this.executeAtom('type', [atomsElement, value]);
  } else {
    if (value instanceof Array) {
      value = value.join("");
    }

    if (typeof value !== 'string') {
      value = value.toString();
    }

    value = _appiumSupport.util.escapeSpecialChars(value, "'");
    value = value.replace(/\\\\n/g, "\\n");

    if (this.opts.useRobot) {
      throw new _appiumBaseDriver.errors.NotYetImplementedError();
    } else {
      let command = `au.getElement('${el}').setValueByType('${value}')`;
      await this.uiAutoClient.sendCommand(command);
    }
  }
};

commands.getText = async function (el) {
  el = (0, _utils.unwrapEl)(el);

  if (this.isWebContext()) {
    let atomsElement = this.useAtomsElement(el);
    return await this.executeAtom('get_text', [atomsElement]);
  } else {
    let command = `au.getElement('${el}').text()`;
    let res = await this.uiAutoClient.sendCommand(command);
    res = res ? res.toString() : '';
    return res;
  }
};

commands.elementDisplayed = async function (el) {
  el = (0, _utils.unwrapEl)(el);

  if (this.isWebContext()) {
    let atomsElement = this.useAtomsElement(el);
    return await this.executeAtom('is_displayed', [atomsElement]);
  } else {
    let command = `au.getElement('${el}').isDisplayed()`;
    return await this.uiAutoClient.sendCommand(command);
  }
};

commands.elementEnabled = async function (el) {
  el = (0, _utils.unwrapEl)(el);

  if (this.isWebContext()) {
    let atomsElement = this.useAtomsElement(el);
    return await this.executeAtom('is_enabled', [atomsElement]);
  } else {
    let command = `au.getElement('${el}').isEnabled() === 1`;
    return await this.uiAutoClient.sendCommand(command);
  }
};

commands.elementSelected = async function (el) {
  el = (0, _utils.unwrapEl)(el);

  if (this.isWebContext()) {
    let atomsElement = this.useAtomsElement(el);
    return await this.executeAtom('is_selected', [atomsElement]);
  } else {
    let command = `au.getElement('${el}').isSelected()`;
    return await this.uiAutoClient.sendCommand(command);
  }
};

commands.getName = async function (el) {
  el = (0, _utils.unwrapEl)(el);

  if (this.isWebContext()) {
    let atomsElement = this.useAtomsElement(el);
    let script = 'return arguments[0].tagName.toLowerCase()';
    return await this.executeAtom('execute_script', [script, [atomsElement]]);
  } else {
    let command = `au.getElement('${el}').type()`;
    return await this.uiAutoClient.sendCommand(command);
  }
};

commands.getLocation = async function (el) {
  el = (0, _utils.unwrapEl)(el);

  if (this.isWebContext()) {
    let atomsElement = await this.useAtomsElement(el);
    return await this.executeAtom('get_top_left_coordinates', [atomsElement]);
  } else {
    let command = `au.getElement('${el}').getElementLocation()`;
    return await this.uiAutoClient.sendCommand(command);
  }
};

commands.getLocationInView = async function (el) {
  return await this.getLocation(el);
};

commands.getSize = async function (el) {
  el = (0, _utils.unwrapEl)(el);

  if (this.isWebContext()) {
    let atomsElement = this.getAtomsElement(el);

    if (atomsElement === null) {
      throw new _appiumBaseDriver.errors.UnknownError(`Error converting element ID for using in WD atoms: '${el}'`);
    } else {
      return await this.executeAtom('get_size', [atomsElement]);
    }
  } else {
    let command = `au.getElement('${el}').getElementSize()`;
    return await this.uiAutoClient.sendCommand(command);
  }
};

commands.getElementContentSize = async function (el) {
  el = (0, _utils.unwrapEl)(el);
  const command = `au.getElement('${el}').childElementsFrames()`;
  const frames = await this.uiAutoClient.sendCommand(command);
  const type = await this.getName(el);
  let contentHeight = 0;

  switch (type) {
    case "UIATableView":
      {
        const firstElementFrame = _lodash.default.first(frames);

        const lastElementFrame = _lodash.default.last(frames);

        contentHeight = lastElementFrame.origin.y + lastElementFrame.size.height - firstElementFrame.origin.y;
        break;
      }

    case "UIACollectionView":
      {
        let firstElementFrame = _lodash.default.first(frames);

        let elementsInRow = 0;

        for (const [i, frame] of frames.entries()) {
          if (frame.origin.y !== firstElementFrame.origin.y) {
            elementsInRow = i;
            break;
          }
        }

        const spaceBetweenElements = frames[elementsInRow].origin.y - frames[elementsInRow - 1].origin.y - frames[elementsInRow - 1].size.height;
        const numberOfRows = Math.ceil(frames.length / elementsInRow);
        contentHeight = numberOfRows * firstElementFrame.size.height + spaceBetweenElements * (numberOfRows - 1);
        break;
      }

    default:
      {
        return null;
      }
  }

  const size = await this.getSize(el);
  const topLeftCoord = await this.getLocationInView(el);
  return JSON.stringify({
    width: size.width,
    height: size.height,
    top: topLeftCoord.y,
    left: topLeftCoord.x,
    scrollableOffset: contentHeight
  });
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
