"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("./logger"));

var _basedevice = _interopRequireDefault(require("./basedevice"));

class BlueSky extends _basedevice.default {
  constructor() {
    super();
    let channelId;
    let caps;
    let shell;
  }

  closeApp() {
    _logger.default.info(`BlueSky: Close App`);

    this.shell.exec(`curl -d '' http://${this.caps.youiEngineAppAddress}:8060/keypress/home`);
  }

  endSession() {
    _logger.default.info(`BlueSky: End Session`);

    if (this.caps.fullReset) {
      this.removeApp(this.channelId);
    } else {
      this.closeApp();
    }
  }

  installApp(appPath) {
    _logger.default.info(`BlueSky: Installing and launching app`);

    if (this.isAppInstalled(this.channelId)) {
      this.removeApp(this.channelId);
    }

    this.shell.exec(`curl -v -# -f -i --user '${this.caps.username}:${this.caps.password}' --digest --progress-bar -F 'mysubmit=Install' -F 'archive=@${appPath}' -F 'passwd=' http://${this.caps.youiEngineAppAddress}/plugin_install | grep '<font color' | sed 's/<font color=\'red\'>//' `);
    this.launchApp();
  }

  isAppInstalled(channelId = this.channelId) {
    _logger.default.info(`BlueSky: Check if App is installed`);

    let devAppInstalled = false;
    let installedApps = this.shell.exec(`curl http://${this.caps.youiEngineAppAddress}:8060/query/apps`);

    if (installedApps.includes(`id="${channelId}"`)) {
      devAppInstalled = true;
    }

    return devAppInstalled;
  }

  launchApp() {
    _logger.default.info(`BlueSky: Launch app`);

    this.shell.exec(`curl -d '' http://${this.caps.youiEngineAppAddress}:8060/launch/${this.channelId}`);
  }

  removeApp(channelId = this.channelId) {
    _logger.default.info(`BlueSky: Delete app`);

    this.shell.exec(`curl --user ${this.caps.username}:${this.caps.password} --digest --progress-bar --show-error -F 'mysubmit=Delete' -F 'archive=' --output /tmp/dev_server_out --write-out '%{http_code}' 'http://${this.caps.youiEngineAppAddress}/plugin_install'`);
  }

  startSession(caps) {
    _logger.default.info(`BlueSky: Start Session`);

    this.caps = caps;
    this.shell = require('shelljs');
    this.channelId = 'dev';

    if (caps.channelId) {
      this.channelId = caps.channelId;
    }

    let devAppInstalled = this.isAppInstalled(this.channelId);

    if (caps.fullReset || !devAppInstalled) {
      this.installApp(caps.app);
    } else {
      this.launchApp();
    }
  }

}

var _default = BlueSky;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9ibHVlc2t5LmpzIl0sIm5hbWVzIjpbIkJsdWVTa3kiLCJCYXNlRGV2aWNlIiwiY29uc3RydWN0b3IiLCJjaGFubmVsSWQiLCJjYXBzIiwic2hlbGwiLCJjbG9zZUFwcCIsImxvZ2dlciIsImluZm8iLCJleGVjIiwieW91aUVuZ2luZUFwcEFkZHJlc3MiLCJlbmRTZXNzaW9uIiwiZnVsbFJlc2V0IiwicmVtb3ZlQXBwIiwiaW5zdGFsbEFwcCIsImFwcFBhdGgiLCJpc0FwcEluc3RhbGxlZCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJsYXVuY2hBcHAiLCJkZXZBcHBJbnN0YWxsZWQiLCJpbnN0YWxsZWRBcHBzIiwiaW5jbHVkZXMiLCJzdGFydFNlc3Npb24iLCJyZXF1aXJlIiwiYXBwIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUVBLE1BQU1BLE9BQU4sU0FBc0JDLG1CQUF0QixDQUFpQztBQUUvQkMsRUFBQUEsV0FBVyxHQUFJO0FBQ2I7QUFDQSxRQUFJQyxTQUFKO0FBQ0EsUUFBSUMsSUFBSjtBQUNBLFFBQUlDLEtBQUo7QUFDRDs7QUFFREMsRUFBQUEsUUFBUSxHQUFJO0FBQ1ZDLG9CQUFPQyxJQUFQLENBQWEsb0JBQWI7O0FBQ0EsU0FBS0gsS0FBTCxDQUFXSSxJQUFYLENBQWlCLHFCQUFvQixLQUFLTCxJQUFMLENBQVVNLG9CQUFxQixxQkFBcEU7QUFDRDs7QUFFREMsRUFBQUEsVUFBVSxHQUFJO0FBQ1pKLG9CQUFPQyxJQUFQLENBQWEsc0JBQWI7O0FBQ0EsUUFBSSxLQUFLSixJQUFMLENBQVVRLFNBQWQsRUFBeUI7QUFDdkIsV0FBS0MsU0FBTCxDQUFlLEtBQUtWLFNBQXBCO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsV0FBS0csUUFBTDtBQUNEO0FBQ0Y7O0FBRURRLEVBQUFBLFVBQVUsQ0FBRUMsT0FBRixFQUFXO0FBQ25CUixvQkFBT0MsSUFBUCxDQUFhLHVDQUFiOztBQUNBLFFBQUksS0FBS1EsY0FBTCxDQUFvQixLQUFLYixTQUF6QixDQUFKLEVBQXdDO0FBQ3RDLFdBQUtVLFNBQUwsQ0FBZSxLQUFLVixTQUFwQjtBQUNEOztBQUNELFNBQUtFLEtBQUwsQ0FBV0ksSUFBWCxDQUFpQiw0QkFBMkIsS0FBS0wsSUFBTCxDQUFVYSxRQUFTLElBQUcsS0FBS2IsSUFBTCxDQUFVYyxRQUFTLGdFQUErREgsT0FBUSx5QkFBd0IsS0FBS1gsSUFBTCxDQUFVTSxvQkFBcUIsd0VBQW5OO0FBQ0EsU0FBS1MsU0FBTDtBQUNEOztBQUNESCxFQUFBQSxjQUFjLENBQUViLFNBQVMsR0FBRyxLQUFLQSxTQUFuQixFQUE4QjtBQUMxQ0ksb0JBQU9DLElBQVAsQ0FBYSxvQ0FBYjs7QUFFQSxRQUFJWSxlQUFlLEdBQUcsS0FBdEI7QUFDQSxRQUFJQyxhQUFhLEdBQUcsS0FBS2hCLEtBQUwsQ0FBV0ksSUFBWCxDQUFpQixlQUFjLEtBQUtMLElBQUwsQ0FBVU0sb0JBQXFCLGtCQUE5RCxDQUFwQjs7QUFDQSxRQUFJVyxhQUFhLENBQUNDLFFBQWQsQ0FBd0IsT0FBTW5CLFNBQVUsR0FBeEMsQ0FBSixFQUFpRDtBQUMvQ2lCLE1BQUFBLGVBQWUsR0FBRyxJQUFsQjtBQUNEOztBQUNELFdBQU9BLGVBQVA7QUFDRDs7QUFFREQsRUFBQUEsU0FBUyxHQUFJO0FBQ1haLG9CQUFPQyxJQUFQLENBQWEscUJBQWI7O0FBQ0EsU0FBS0gsS0FBTCxDQUFXSSxJQUFYLENBQWlCLHFCQUFvQixLQUFLTCxJQUFMLENBQVVNLG9CQUFxQixnQkFBZSxLQUFLUCxTQUFVLEVBQWxHO0FBQ0Q7O0FBRURVLEVBQUFBLFNBQVMsQ0FBRVYsU0FBUyxHQUFHLEtBQUtBLFNBQW5CLEVBQThCO0FBQ3JDSSxvQkFBT0MsSUFBUCxDQUFhLHFCQUFiOztBQUNBLFNBQUtILEtBQUwsQ0FBV0ksSUFBWCxDQUFpQixlQUFjLEtBQUtMLElBQUwsQ0FBVWEsUUFBUyxJQUFHLEtBQUtiLElBQUwsQ0FBVWMsUUFBUyw0SUFBMkksS0FBS2QsSUFBTCxDQUFVTSxvQkFBcUIsa0JBQWxQO0FBQ0Q7O0FBRURhLEVBQUFBLFlBQVksQ0FBRW5CLElBQUYsRUFBUTtBQUNsQkcsb0JBQU9DLElBQVAsQ0FBYSx3QkFBYjs7QUFDQSxTQUFLSixJQUFMLEdBQVlBLElBQVo7QUFDQSxTQUFLQyxLQUFMLEdBQWFtQixPQUFPLENBQUMsU0FBRCxDQUFwQjtBQUNBLFNBQUtyQixTQUFMLEdBQWlCLEtBQWpCOztBQUNBLFFBQUlDLElBQUksQ0FBQ0QsU0FBVCxFQUFvQjtBQUNsQixXQUFLQSxTQUFMLEdBQWlCQyxJQUFJLENBQUNELFNBQXRCO0FBQ0Q7O0FBRUQsUUFBSWlCLGVBQWUsR0FBRyxLQUFLSixjQUFMLENBQW9CLEtBQUtiLFNBQXpCLENBQXRCOztBQUVBLFFBQUlDLElBQUksQ0FBQ1EsU0FBTCxJQUFrQixDQUFDUSxlQUF2QixFQUF3QztBQUN0QyxXQUFLTixVQUFMLENBQWdCVixJQUFJLENBQUNxQixHQUFyQjtBQUNELEtBRkQsTUFFTTtBQUNKLFdBQUtOLFNBQUw7QUFDRDtBQUNGOztBQXBFOEI7O2VBd0VsQm5CLE8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCBCYXNlRGV2aWNlIGZyb20gJy4vYmFzZWRldmljZSc7XG5cbmNsYXNzIEJsdWVTa3kgZXh0ZW5kcyBCYXNlRGV2aWNlIHtcblxuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoKTtcbiAgICBsZXQgY2hhbm5lbElkO1xuICAgIGxldCBjYXBzO1xuICAgIGxldCBzaGVsbDtcbiAgfVxuXG4gIGNsb3NlQXBwICgpIHtcbiAgICBsb2dnZXIuaW5mbyhgQmx1ZVNreTogQ2xvc2UgQXBwYCk7XG4gICAgdGhpcy5zaGVsbC5leGVjKGBjdXJsIC1kICcnIGh0dHA6Ly8ke3RoaXMuY2Fwcy55b3VpRW5naW5lQXBwQWRkcmVzc306ODA2MC9rZXlwcmVzcy9ob21lYCk7XG4gIH07XG5cbiAgZW5kU2Vzc2lvbiAoKSB7XG4gICAgbG9nZ2VyLmluZm8oYEJsdWVTa3k6IEVuZCBTZXNzaW9uYCk7XG4gICAgaWYgKHRoaXMuY2Fwcy5mdWxsUmVzZXQpIHtcbiAgICAgIHRoaXMucmVtb3ZlQXBwKHRoaXMuY2hhbm5lbElkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jbG9zZUFwcCgpO1xuICAgIH1cbiAgfTtcblxuICBpbnN0YWxsQXBwIChhcHBQYXRoKSB7XG4gICAgbG9nZ2VyLmluZm8oYEJsdWVTa3k6IEluc3RhbGxpbmcgYW5kIGxhdW5jaGluZyBhcHBgKTtcbiAgICBpZiAodGhpcy5pc0FwcEluc3RhbGxlZCh0aGlzLmNoYW5uZWxJZCkpe1xuICAgICAgdGhpcy5yZW1vdmVBcHAodGhpcy5jaGFubmVsSWQpO1xuICAgIH1cbiAgICB0aGlzLnNoZWxsLmV4ZWMoYGN1cmwgLXYgLSMgLWYgLWkgLS11c2VyICcke3RoaXMuY2Fwcy51c2VybmFtZX06JHt0aGlzLmNhcHMucGFzc3dvcmR9JyAtLWRpZ2VzdCAtLXByb2dyZXNzLWJhciAtRiAnbXlzdWJtaXQ9SW5zdGFsbCcgLUYgJ2FyY2hpdmU9QCR7YXBwUGF0aH0nIC1GICdwYXNzd2Q9JyBodHRwOi8vJHt0aGlzLmNhcHMueW91aUVuZ2luZUFwcEFkZHJlc3N9L3BsdWdpbl9pbnN0YWxsIHwgZ3JlcCAnPGZvbnQgY29sb3InIHwgc2VkICdzLzxmb250IGNvbG9yPVxcJ3JlZFxcJz4vLycgYCk7XG4gICAgdGhpcy5sYXVuY2hBcHAoKTtcbiAgfTtcbiAgaXNBcHBJbnN0YWxsZWQgKGNoYW5uZWxJZCA9IHRoaXMuY2hhbm5lbElkKSB7XG4gICAgbG9nZ2VyLmluZm8oYEJsdWVTa3k6IENoZWNrIGlmIEFwcCBpcyBpbnN0YWxsZWRgKTtcbiAgICAvLyBDaGVjayBpZiBhcHAgaXMgaW5zdGFsbGVkXG4gICAgbGV0IGRldkFwcEluc3RhbGxlZCA9IGZhbHNlO1xuICAgIGxldCBpbnN0YWxsZWRBcHBzID0gdGhpcy5zaGVsbC5leGVjKGBjdXJsIGh0dHA6Ly8ke3RoaXMuY2Fwcy55b3VpRW5naW5lQXBwQWRkcmVzc306ODA2MC9xdWVyeS9hcHBzYCk7XG4gICAgaWYgKGluc3RhbGxlZEFwcHMuaW5jbHVkZXMoYGlkPVwiJHtjaGFubmVsSWR9XCJgKSkge1xuICAgICAgZGV2QXBwSW5zdGFsbGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGRldkFwcEluc3RhbGxlZDtcbiAgfTtcblxuICBsYXVuY2hBcHAgKCkge1xuICAgIGxvZ2dlci5pbmZvKGBCbHVlU2t5OiBMYXVuY2ggYXBwYCk7XG4gICAgdGhpcy5zaGVsbC5leGVjKGBjdXJsIC1kICcnIGh0dHA6Ly8ke3RoaXMuY2Fwcy55b3VpRW5naW5lQXBwQWRkcmVzc306ODA2MC9sYXVuY2gvJHt0aGlzLmNoYW5uZWxJZH1gKTtcbiAgfTtcblxuICByZW1vdmVBcHAgKGNoYW5uZWxJZCA9IHRoaXMuY2hhbm5lbElkKSB7XG4gICAgbG9nZ2VyLmluZm8oYEJsdWVTa3k6IERlbGV0ZSBhcHBgKTtcbiAgICB0aGlzLnNoZWxsLmV4ZWMoYGN1cmwgLS11c2VyICR7dGhpcy5jYXBzLnVzZXJuYW1lfToke3RoaXMuY2Fwcy5wYXNzd29yZH0gLS1kaWdlc3QgLS1wcm9ncmVzcy1iYXIgLS1zaG93LWVycm9yIC1GICdteXN1Ym1pdD1EZWxldGUnIC1GICdhcmNoaXZlPScgLS1vdXRwdXQgL3RtcC9kZXZfc2VydmVyX291dCAtLXdyaXRlLW91dCAnJXtodHRwX2NvZGV9JyAnaHR0cDovLyR7dGhpcy5jYXBzLnlvdWlFbmdpbmVBcHBBZGRyZXNzfS9wbHVnaW5faW5zdGFsbCdgKTtcbiAgfTtcblxuICBzdGFydFNlc3Npb24gKGNhcHMpIHtcbiAgICBsb2dnZXIuaW5mbyhgQmx1ZVNreTogU3RhcnQgU2Vzc2lvbmApO1xuICAgIHRoaXMuY2FwcyA9IGNhcHM7XG4gICAgdGhpcy5zaGVsbCA9IHJlcXVpcmUoJ3NoZWxsanMnKTtcbiAgICB0aGlzLmNoYW5uZWxJZCA9ICdkZXYnO1xuICAgIGlmIChjYXBzLmNoYW5uZWxJZCkge1xuICAgICAgdGhpcy5jaGFubmVsSWQgPSBjYXBzLmNoYW5uZWxJZDtcbiAgICB9XG4gICAgLy8gQ2hlY2sgaWYgYXBwIGlzIGluc3RhbGxlZFxuICAgIGxldCBkZXZBcHBJbnN0YWxsZWQgPSB0aGlzLmlzQXBwSW5zdGFsbGVkKHRoaXMuY2hhbm5lbElkKTtcblxuICAgIGlmIChjYXBzLmZ1bGxSZXNldCB8fCAhZGV2QXBwSW5zdGFsbGVkKSB7XG4gICAgICB0aGlzLmluc3RhbGxBcHAoY2Fwcy5hcHApO1xuICAgIH0gZWxzZXtcbiAgICAgIHRoaXMubGF1bmNoQXBwKCk7XG4gICAgfVxuICB9O1xuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEJsdWVTa3k7XG4iXSwiZmlsZSI6ImxpYi9ibHVlc2t5LmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
