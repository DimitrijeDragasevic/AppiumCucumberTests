"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("./logger"));

var _index = _interopRequireDefault(require("./commands/index"));

var _iosDeploy = _interopRequireDefault(require("./ios-deploy"));

var _asyncbox = require("asyncbox");

var _utils = require("./utils");

var _basedevice = _interopRequireDefault(require("./basedevice"));

class TvOs extends _basedevice.default {
  constructor() {
    super();
    let bundleId;
    let caps;
    let iosdeploy;
    let driver;
  }

  async execScript(script) {
    let shell = require('shelljs');

    script += ` --id ${this.caps.udid}`;

    _logger.default.info(`script: ${script}`);

    try {
      return await shell.exec(script);
    } catch (err) {
      _logger.default.debug(`Stdout: '${err.stdout}'. Stderr: '${err.stderr}'.`);

      throw new Error(`Could not run '${script}': '${err.message}'`);
      return false;
    }
  }

  async closeApp() {
    _logger.default.info(`tvOS: Close App`);

    let commandObject = {
      name: 'CloseApp'
    };
    let commandJSON = JSON.stringify(commandObject);
    let data = await this.driver.executeSocketCommand(commandJSON);
    let result;

    try {
      result = JSON.parse(data);
    } catch (e) {
      throw new Error("Bad response from CloseApp");
    }

    if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_UNKNOWN_COMMAND) {
      throw new Error("This command is only supported in You.i Engine v5.1.0+");
    }
  }

  async endSession() {
    _logger.default.info(`tvOS: End Session`);

    if (this.caps.fullReset) {
      await this.removeApp(this.bundleId);
    } else {
      await this.closeApp();
    }
  }

  async installApp(appPath) {
    _logger.default.info(`tvOS: Installing and launching app`);

    await this.iosdeploy.installApp(appPath);
  }

  async isAppInstalled(bundleId) {
    _logger.default.info(`tvOS: Check if App is installed`);

    return await this.iosdeploy.isAppInstalled(bundleId);
  }

  async launchApp() {
    _logger.default.info(`tvOS: Launching app`);

    await this.iosdeploy.launchApp(this.caps.app);
  }

  async removeApp(bundleId) {
    _logger.default.info(`Deleting app`);

    await this.iosdeploy.removeApp(bundleId);
  }

  async startSession(caps, driver) {
    _logger.default.info(`tvOS: Start Session`);

    this.caps = caps;
    this.driver = driver;
    this.iosdeploy = new _iosDeploy.default(caps.udid);
    await this.iosdeploy.checkStatus();

    let shell = require('shelljs');

    this.bundleId = await shell.exec(`osascript -e 'id of app "${caps.app}"'`).replace(/(\r\n|\n|\r)/gm, "");
    let devAppInstalled = await this.isAppInstalled(this.bundleId);

    if (caps.fullReset || !devAppInstalled) {
      await this.installApp(caps.app);
    } else {
      await this.launchApp();
    }
  }

}

var _default = TvOs;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
