"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _utils = require("../utils");

var _logger = _interopRequireDefault(require("../logger"));

let commands = {};

commands.installApp = async function (appPath) {
  await this.device.installApp(appPath);
};

commands.removeApp = async function (bundleId) {
  await this.device.removeApp(bundleId);
};

commands.closeApp = async function () {
  await this.device.closeApp();
};

commands.launchApp = async function () {
  await this.device.launchApp();
};

commands.isAppInstalled = async function (bundleId) {
  return await this.device.isAppInstalled(bundleId);
};

commands.yiCloseApp = async function () {
  let commandObject = {
    name: 'CloseApp'
  };
  let commandJSON = JSON.stringify(commandObject);
  let data = await this.executeSocketCommand(commandJSON);

  try {
    JSON.parse(data);
  } catch (e) {
    throw new Error("Bad response from CloseApp");
  }
};

commands.getPageSource = async function () {
  let source;
  let commandObject = {
    name: 'GetSRC'
  };
  let commandJSON = JSON.stringify(commandObject);
  source = await this.executeSocketCommand(commandJSON);

  if (source) {
    return source.toString();
  } else {
    throw new Error("Bad response from getTreeForXML");
  }
};

commands.getWindowSize = async function () {
  let commandObject = {
    name: `getWindowSize`
  };
  let commandJSON = JSON.stringify(commandObject);
  let data = await this.executeSocketCommand(commandJSON);
  let result;

  try {
    result = JSON.parse(data);
  } catch (e) {
    throw new Error("Bad response from window_size");
  }

  if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_NO_SUCH_WINDOW) {
    throw new Error("Could not find the requested surface");
  } else if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_UNKNOWN_COMMAND) {
    throw new Error("The requested command is not supported in the version of You.i Engine currently running.");
  }

  return result.value;
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9nZW5lcmFsLmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiaW5zdGFsbEFwcCIsImFwcFBhdGgiLCJkZXZpY2UiLCJyZW1vdmVBcHAiLCJidW5kbGVJZCIsImNsb3NlQXBwIiwibGF1bmNoQXBwIiwiaXNBcHBJbnN0YWxsZWQiLCJ5aUNsb3NlQXBwIiwiY29tbWFuZE9iamVjdCIsIm5hbWUiLCJjb21tYW5kSlNPTiIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwiZXhlY3V0ZVNvY2tldENvbW1hbmQiLCJwYXJzZSIsImUiLCJFcnJvciIsImdldFBhZ2VTb3VyY2UiLCJzb3VyY2UiLCJ0b1N0cmluZyIsImdldFdpbmRvd1NpemUiLCJyZXN1bHQiLCJzdGF0dXMiLCJ5b3VpRW5naW5lRHJpdmVyUmV0dXJuVmFsdWVzIiwiV0VCRFJJVkVSX05PX1NVQ0hfV0lORE9XIiwiV0VCRFJJVkVSX1VOS05PV05fQ09NTUFORCIsInZhbHVlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUVBLElBQUlBLFFBQVEsR0FBRyxFQUFmOztBQUVBQSxRQUFRLENBQUNDLFVBQVQsR0FBc0IsZ0JBQWdCQyxPQUFoQixFQUF5QjtBQUM3QyxRQUFNLEtBQUtDLE1BQUwsQ0FBWUYsVUFBWixDQUF1QkMsT0FBdkIsQ0FBTjtBQUNELENBRkQ7O0FBSUFGLFFBQVEsQ0FBQ0ksU0FBVCxHQUFxQixnQkFBZ0JDLFFBQWhCLEVBQTBCO0FBQzdDLFFBQU0sS0FBS0YsTUFBTCxDQUFZQyxTQUFaLENBQXNCQyxRQUF0QixDQUFOO0FBQ0QsQ0FGRDs7QUFJQUwsUUFBUSxDQUFDTSxRQUFULEdBQW9CLGtCQUFrQjtBQUNwQyxRQUFNLEtBQUtILE1BQUwsQ0FBWUcsUUFBWixFQUFOO0FBQ0QsQ0FGRDs7QUFJQU4sUUFBUSxDQUFDTyxTQUFULEdBQXFCLGtCQUFrQjtBQUNyQyxRQUFNLEtBQUtKLE1BQUwsQ0FBWUksU0FBWixFQUFOO0FBQ0QsQ0FGRDs7QUFJQVAsUUFBUSxDQUFDUSxjQUFULEdBQTBCLGdCQUFnQkgsUUFBaEIsRUFBMEI7QUFDbEQsU0FBTyxNQUFNLEtBQUtGLE1BQUwsQ0FBWUssY0FBWixDQUEyQkgsUUFBM0IsQ0FBYjtBQUNELENBRkQ7O0FBSUFMLFFBQVEsQ0FBQ1MsVUFBVCxHQUFzQixrQkFBa0I7QUFDdEMsTUFBSUMsYUFBYSxHQUFHO0FBQ2xCQyxJQUFBQSxJQUFJLEVBQUU7QUFEWSxHQUFwQjtBQUdBLE1BQUlDLFdBQVcsR0FBR0MsSUFBSSxDQUFDQyxTQUFMLENBQWVKLGFBQWYsQ0FBbEI7QUFFQSxNQUFJSyxJQUFJLEdBQUcsTUFBTSxLQUFLQyxvQkFBTCxDQUEwQkosV0FBMUIsQ0FBakI7O0FBQ0EsTUFBSTtBQUNGQyxJQUFBQSxJQUFJLENBQUNJLEtBQUwsQ0FBV0YsSUFBWDtBQUNELEdBRkQsQ0FFRSxPQUFPRyxDQUFQLEVBQVU7QUFDVixVQUFNLElBQUlDLEtBQUosQ0FBVSw0QkFBVixDQUFOO0FBQ0Q7QUFDRixDQVpEOztBQWNBbkIsUUFBUSxDQUFDb0IsYUFBVCxHQUF5QixrQkFBa0I7QUFFekMsTUFBSUMsTUFBSjtBQUVBLE1BQUlYLGFBQWEsR0FBRztBQUNsQkMsSUFBQUEsSUFBSSxFQUFFO0FBRFksR0FBcEI7QUFHQSxNQUFJQyxXQUFXLEdBQUdDLElBQUksQ0FBQ0MsU0FBTCxDQUFlSixhQUFmLENBQWxCO0FBRUFXLEVBQUFBLE1BQU0sR0FBRyxNQUFNLEtBQUtMLG9CQUFMLENBQTBCSixXQUExQixDQUFmOztBQUVBLE1BQUlTLE1BQUosRUFBWTtBQUNWLFdBQU9BLE1BQU0sQ0FBQ0MsUUFBUCxFQUFQO0FBQ0QsR0FGRCxNQUVPO0FBR0wsVUFBTSxJQUFJSCxLQUFKLENBQVUsaUNBQVYsQ0FBTjtBQUNEO0FBQ0YsQ0FsQkQ7O0FBb0JBbkIsUUFBUSxDQUFDdUIsYUFBVCxHQUF5QixrQkFBa0I7QUFFekMsTUFBSWIsYUFBYSxHQUFHO0FBQ2xCQyxJQUFBQSxJQUFJLEVBQUc7QUFEVyxHQUFwQjtBQUdBLE1BQUlDLFdBQVcsR0FBR0MsSUFBSSxDQUFDQyxTQUFMLENBQWVKLGFBQWYsQ0FBbEI7QUFFQSxNQUFJSyxJQUFJLEdBQUcsTUFBTSxLQUFLQyxvQkFBTCxDQUEwQkosV0FBMUIsQ0FBakI7QUFFQSxNQUFJWSxNQUFKOztBQUNBLE1BQUk7QUFDRkEsSUFBQUEsTUFBTSxHQUFHWCxJQUFJLENBQUNJLEtBQUwsQ0FBV0YsSUFBWCxDQUFUO0FBQ0QsR0FGRCxDQUVFLE9BQU9HLENBQVAsRUFBVTtBQUNWLFVBQU0sSUFBSUMsS0FBSixDQUFVLCtCQUFWLENBQU47QUFDRDs7QUFHRCxNQUFJSyxNQUFNLENBQUNDLE1BQVAsS0FBa0JDLG9DQUE2QkMsd0JBQW5ELEVBQTZFO0FBQzNFLFVBQU0sSUFBSVIsS0FBSixDQUFVLHNDQUFWLENBQU47QUFDRCxHQUZELE1BRU8sSUFBSUssTUFBTSxDQUFDQyxNQUFQLEtBQWtCQyxvQ0FBNkJFLHlCQUFuRCxFQUE4RTtBQUNuRixVQUFNLElBQUlULEtBQUosQ0FBVSwwRkFBVixDQUFOO0FBQ0Q7O0FBRUQsU0FBT0ssTUFBTSxDQUFDSyxLQUFkO0FBQ0QsQ0F4QkQ7O2VBMEJlN0IsUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHlvdWlFbmdpbmVEcml2ZXJSZXR1cm5WYWx1ZXMgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4uL2xvZ2dlcic7XG5cbmxldCBjb21tYW5kcyA9IHt9O1xuXG5jb21tYW5kcy5pbnN0YWxsQXBwID0gYXN5bmMgZnVuY3Rpb24gKGFwcFBhdGgpIHtcbiAgYXdhaXQgdGhpcy5kZXZpY2UuaW5zdGFsbEFwcChhcHBQYXRoKTtcbn1cblxuY29tbWFuZHMucmVtb3ZlQXBwID0gYXN5bmMgZnVuY3Rpb24gKGJ1bmRsZUlkKSB7XG4gIGF3YWl0IHRoaXMuZGV2aWNlLnJlbW92ZUFwcChidW5kbGVJZCk7XG59XG5cbmNvbW1hbmRzLmNsb3NlQXBwID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBhd2FpdCB0aGlzLmRldmljZS5jbG9zZUFwcCgpO1xufVxuXG5jb21tYW5kcy5sYXVuY2hBcHAgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGF3YWl0IHRoaXMuZGV2aWNlLmxhdW5jaEFwcCgpO1xufVxuXG5jb21tYW5kcy5pc0FwcEluc3RhbGxlZCA9IGFzeW5jIGZ1bmN0aW9uIChidW5kbGVJZCkge1xuICByZXR1cm4gYXdhaXQgdGhpcy5kZXZpY2UuaXNBcHBJbnN0YWxsZWQoYnVuZGxlSWQpO1xufVxuXG5jb21tYW5kcy55aUNsb3NlQXBwID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBsZXQgY29tbWFuZE9iamVjdCA9IHtcbiAgICBuYW1lOiAnQ2xvc2VBcHAnXG4gIH07XG4gIGxldCBjb21tYW5kSlNPTiA9IEpTT04uc3RyaW5naWZ5KGNvbW1hbmRPYmplY3QpO1xuXG4gIGxldCBkYXRhID0gYXdhaXQgdGhpcy5leGVjdXRlU29ja2V0Q29tbWFuZChjb21tYW5kSlNPTik7XG4gIHRyeSB7XG4gICAgSlNPTi5wYXJzZShkYXRhKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkJhZCByZXNwb25zZSBmcm9tIENsb3NlQXBwXCIpO1xuICB9XG59XG5cbmNvbW1hbmRzLmdldFBhZ2VTb3VyY2UgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG5cbiAgbGV0IHNvdXJjZTtcblxuICBsZXQgY29tbWFuZE9iamVjdCA9IHtcbiAgICBuYW1lOiAnR2V0U1JDJ1xuICB9O1xuICBsZXQgY29tbWFuZEpTT04gPSBKU09OLnN0cmluZ2lmeShjb21tYW5kT2JqZWN0KTtcblxuICBzb3VyY2UgPSBhd2FpdCB0aGlzLmV4ZWN1dGVTb2NrZXRDb21tYW5kKGNvbW1hbmRKU09OKTtcblxuICBpZiAoc291cmNlKSB7XG4gICAgcmV0dXJuIHNvdXJjZS50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIC8vIHRoaXMgc2hvdWxkIG5ldmVyIGhhcHBlbiBidXQgd2UndmUgcmVjZWl2ZWQgYnVnIHJlcG9ydHM7IHRoaXMgd2lsbCBoZWxwIHVzIHRyYWNrIGRvd25cbiAgICAvLyB3aGF0J3Mgd3JvbmcgaW4gZ2V0VHJlZUZvclhNTFxuICAgIHRocm93IG5ldyBFcnJvcihcIkJhZCByZXNwb25zZSBmcm9tIGdldFRyZWVGb3JYTUxcIik7XG4gIH1cbn07XG5cbmNvbW1hbmRzLmdldFdpbmRvd1NpemUgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG5cbiAgbGV0IGNvbW1hbmRPYmplY3QgPSB7XG4gICAgbmFtZTogYGdldFdpbmRvd1NpemVgXG4gIH07XG4gIGxldCBjb21tYW5kSlNPTiA9IEpTT04uc3RyaW5naWZ5KGNvbW1hbmRPYmplY3QpO1xuXG4gIGxldCBkYXRhID0gYXdhaXQgdGhpcy5leGVjdXRlU29ja2V0Q29tbWFuZChjb21tYW5kSlNPTik7XG5cbiAgbGV0IHJlc3VsdDtcbiAgdHJ5IHtcbiAgICByZXN1bHQgPSBKU09OLnBhcnNlKGRhdGEpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQmFkIHJlc3BvbnNlIGZyb20gd2luZG93X3NpemVcIik7XG4gIH1cblxuICAvLyBnZXQgc3RhdHVzIHJldHVybmVkIGFuZCBoYW5kbGUgZXJyb3JzIHJldHVybmVkIGZyb20gc2VydmVyXG4gIGlmIChyZXN1bHQuc3RhdHVzID09PSB5b3VpRW5naW5lRHJpdmVyUmV0dXJuVmFsdWVzLldFQkRSSVZFUl9OT19TVUNIX1dJTkRPVykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIHRoZSByZXF1ZXN0ZWQgc3VyZmFjZVwiKTtcbiAgfSBlbHNlIGlmIChyZXN1bHQuc3RhdHVzID09PSB5b3VpRW5naW5lRHJpdmVyUmV0dXJuVmFsdWVzLldFQkRSSVZFUl9VTktOT1dOX0NPTU1BTkQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgcmVxdWVzdGVkIGNvbW1hbmQgaXMgbm90IHN1cHBvcnRlZCBpbiB0aGUgdmVyc2lvbiBvZiBZb3UuaSBFbmdpbmUgY3VycmVudGx5IHJ1bm5pbmcuXCIpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdC52YWx1ZTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbW1hbmRzO1xuIl0sImZpbGUiOiJsaWIvY29tbWFuZHMvZ2VuZXJhbC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
