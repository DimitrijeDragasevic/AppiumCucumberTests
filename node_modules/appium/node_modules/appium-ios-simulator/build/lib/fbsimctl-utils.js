"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.execFbsimctl = execFbsimctl;
exports.setGeoLocation = setGeoLocation;
exports.focus = focus;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("./logger"));

var _teen_process = require("teen_process");

var _appiumSupport = require("appium-support");

var _shellQuote = require("shell-quote");

const FBSIMCTL = 'fbsimctl';

async function assertPresence() {
  try {
    await _appiumSupport.fs.which(FBSIMCTL);
  } catch (err) {
    throw new Error(`${FBSIMCTL} tool should be present in PATH. ` + `Use 'brew tap facebook/fb && brew install fbsimctl --HEAD' command to install it`);
  }
}

async function execFbsimctl(args) {
  await assertPresence();

  _logger.default.debug(`Executing: ${FBSIMCTL} ${(0, _shellQuote.quote)(args)}`);

  try {
    const {
      stdout
    } = await (0, _teen_process.exec)(FBSIMCTL, args);

    _logger.default.debug(`Command output: ${stdout}`);

    return stdout;
  } catch (err) {
    throw new Error(`Cannot execute "${FBSIMCTL} ${(0, _shellQuote.quote)(args)}". Original error: ${err.stderr || err.message}`);
  }
}

async function setGeoLocation(udid, latitude, longitude) {
  await assertPresence();
  latitude = `${latitude}`.trim();
  longitude = `${longitude}`.trim();

  try {
    const latitudeWithComma = latitude.replace('.', ',');
    const longitudeWithComma = longitude.replace('.', ',');
    await execFbsimctl([udid, 'set_location', latitudeWithComma, longitudeWithComma]);
  } catch (err) {
    const latitudeWithDot = latitude.replace(',', '.');
    const longitudeWithDot = longitude.replace(',', '.');
    await execFbsimctl([udid, 'set_location', latitudeWithDot, longitudeWithDot]);
  }
}

async function focus(udid) {
  await execFbsimctl([udid, 'focus']);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9mYnNpbWN0bC11dGlscy5qcyJdLCJuYW1lcyI6WyJGQlNJTUNUTCIsImFzc2VydFByZXNlbmNlIiwiZnMiLCJ3aGljaCIsImVyciIsIkVycm9yIiwiZXhlY0Zic2ltY3RsIiwiYXJncyIsImxvZyIsImRlYnVnIiwic3Rkb3V0Iiwic3RkZXJyIiwibWVzc2FnZSIsInNldEdlb0xvY2F0aW9uIiwidWRpZCIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwidHJpbSIsImxhdGl0dWRlV2l0aENvbW1hIiwicmVwbGFjZSIsImxvbmdpdHVkZVdpdGhDb21tYSIsImxhdGl0dWRlV2l0aERvdCIsImxvbmdpdHVkZVdpdGhEb3QiLCJmb2N1cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLE1BQU1BLFFBQVEsR0FBRyxVQUFqQjs7QUFFQSxlQUFlQyxjQUFmLEdBQWlDO0FBQy9CLE1BQUk7QUFDRixVQUFNQyxrQkFBR0MsS0FBSCxDQUFTSCxRQUFULENBQU47QUFDRCxHQUZELENBRUUsT0FBT0ksR0FBUCxFQUFZO0FBQ1osVUFBTSxJQUFJQyxLQUFKLENBQVcsR0FBRUwsUUFBUyxtQ0FBWixHQUNiLGtGQURHLENBQU47QUFFRDtBQUNGOztBQVVELGVBQWVNLFlBQWYsQ0FBNkJDLElBQTdCLEVBQW1DO0FBQ2pDLFFBQU1OLGNBQWMsRUFBcEI7O0FBQ0FPLGtCQUFJQyxLQUFKLENBQVcsY0FBYVQsUUFBUyxJQUFHLHVCQUFNTyxJQUFOLENBQVksRUFBaEQ7O0FBQ0EsTUFBSTtBQUNGLFVBQU07QUFBQ0csTUFBQUE7QUFBRCxRQUFXLE1BQU0sd0JBQUtWLFFBQUwsRUFBZU8sSUFBZixDQUF2Qjs7QUFDQUMsb0JBQUlDLEtBQUosQ0FBVyxtQkFBa0JDLE1BQU8sRUFBcEM7O0FBQ0EsV0FBT0EsTUFBUDtBQUNELEdBSkQsQ0FJRSxPQUFPTixHQUFQLEVBQVk7QUFDWixVQUFNLElBQUlDLEtBQUosQ0FBVyxtQkFBa0JMLFFBQVMsSUFBRyx1QkFBTU8sSUFBTixDQUFZLHNCQUFxQkgsR0FBRyxDQUFDTyxNQUFKLElBQWNQLEdBQUcsQ0FBQ1EsT0FBUSxFQUFwRyxDQUFOO0FBQ0Q7QUFDRjs7QUFXRCxlQUFlQyxjQUFmLENBQStCQyxJQUEvQixFQUFxQ0MsUUFBckMsRUFBK0NDLFNBQS9DLEVBQTBEO0FBRXhELFFBQU1mLGNBQWMsRUFBcEI7QUFFQWMsRUFBQUEsUUFBUSxHQUFJLEdBQUVBLFFBQVMsRUFBWixDQUFjRSxJQUFkLEVBQVg7QUFDQUQsRUFBQUEsU0FBUyxHQUFJLEdBQUVBLFNBQVUsRUFBYixDQUFlQyxJQUFmLEVBQVo7O0FBQ0EsTUFBSTtBQUVGLFVBQU1DLGlCQUFpQixHQUFHSCxRQUFRLENBQUNJLE9BQVQsQ0FBaUIsR0FBakIsRUFBc0IsR0FBdEIsQ0FBMUI7QUFDQSxVQUFNQyxrQkFBa0IsR0FBR0osU0FBUyxDQUFDRyxPQUFWLENBQWtCLEdBQWxCLEVBQXVCLEdBQXZCLENBQTNCO0FBQ0EsVUFBTWIsWUFBWSxDQUFDLENBQUNRLElBQUQsRUFBTyxjQUFQLEVBQXVCSSxpQkFBdkIsRUFBMENFLGtCQUExQyxDQUFELENBQWxCO0FBQ0QsR0FMRCxDQUtFLE9BQU9oQixHQUFQLEVBQVk7QUFDWixVQUFNaUIsZUFBZSxHQUFHTixRQUFRLENBQUNJLE9BQVQsQ0FBaUIsR0FBakIsRUFBc0IsR0FBdEIsQ0FBeEI7QUFDQSxVQUFNRyxnQkFBZ0IsR0FBR04sU0FBUyxDQUFDRyxPQUFWLENBQWtCLEdBQWxCLEVBQXVCLEdBQXZCLENBQXpCO0FBQ0EsVUFBTWIsWUFBWSxDQUFDLENBQUNRLElBQUQsRUFBTyxjQUFQLEVBQXVCTyxlQUF2QixFQUF3Q0MsZ0JBQXhDLENBQUQsQ0FBbEI7QUFDRDtBQUNGOztBQVFELGVBQWVDLEtBQWYsQ0FBc0JULElBQXRCLEVBQTRCO0FBQzFCLFFBQU1SLFlBQVksQ0FBQyxDQUFDUSxJQUFELEVBQU8sT0FBUCxDQUFELENBQWxCO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7IGV4ZWMgfSBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xuaW1wb3J0IHsgZnMgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgeyBxdW90ZSB9IGZyb20gJ3NoZWxsLXF1b3RlJztcblxuY29uc3QgRkJTSU1DVEwgPSAnZmJzaW1jdGwnO1xuXG5hc3luYyBmdW5jdGlvbiBhc3NlcnRQcmVzZW5jZSAoKSB7XG4gIHRyeSB7XG4gICAgYXdhaXQgZnMud2hpY2goRkJTSU1DVEwpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYCR7RkJTSU1DVEx9IHRvb2wgc2hvdWxkIGJlIHByZXNlbnQgaW4gUEFUSC4gYCArXG4gICAgICBgVXNlICdicmV3IHRhcCBmYWNlYm9vay9mYiAmJiBicmV3IGluc3RhbGwgZmJzaW1jdGwgLS1IRUFEJyBjb21tYW5kIHRvIGluc3RhbGwgaXRgKTtcbiAgfVxufVxuXG4vKipcbiAqIEV4ZWN1dGVzIGZic2ltY3RsIHdpdGggZ2l2ZW4gYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8U3RyaW5nPn0gYXJncyAtIEFuIGFycmF5IG9mIGZic2ltY3RsIGFyZ3VtZW50cy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IENvbW1hbmQgc3Rkb3V0LlxuICogQHRocm93cyB7RXJyb3J9IElmIGZic2ltY3RsIGlzIG5vdCBwcmVzZW50IGluIFBBVEggb3IgaXRzIHJldHVybiBjb2RlXG4gKiBpcyBub3QgZXF1YWwgdG8gemVyby5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZXhlY0Zic2ltY3RsIChhcmdzKSB7XG4gIGF3YWl0IGFzc2VydFByZXNlbmNlKCk7XG4gIGxvZy5kZWJ1ZyhgRXhlY3V0aW5nOiAke0ZCU0lNQ1RMfSAke3F1b3RlKGFyZ3MpfWApO1xuICB0cnkge1xuICAgIGNvbnN0IHtzdGRvdXR9ID0gYXdhaXQgZXhlYyhGQlNJTUNUTCwgYXJncyk7XG4gICAgbG9nLmRlYnVnKGBDb21tYW5kIG91dHB1dDogJHtzdGRvdXR9YCk7XG4gICAgcmV0dXJuIHN0ZG91dDtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgZXhlY3V0ZSBcIiR7RkJTSU1DVEx9ICR7cXVvdGUoYXJncyl9XCIuIE9yaWdpbmFsIGVycm9yOiAke2Vyci5zdGRlcnIgfHwgZXJyLm1lc3NhZ2V9YCk7XG4gIH1cbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBnaXZlbiBHUFMgY29vcmRpbmF0ZXMgZm9yIHRoZSBwYXJ0aWN1bGFyIFNpbXVsYXRvci5cbiAqIFRoZSBTaW11bGF0b3IgbXVzdCBiZSBpbiBib290ZWQgc3RhdGUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVkaWQgLSBUaGUgU2ltdWxhdG9yIFVESURcbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gbGF0aXR1ZGUgLSBMYXRpdHVkZSB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBsb25naXR1ZGUgLSBMb25naXR1ZGUgdmFsdWVcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgY29tbWFuZCBmYWlsZWQgb3IgZmJzaW1jdGwgaXMgbm90IHByZXNlbnQgaW4gUEFUSFxuICovXG5hc3luYyBmdW5jdGlvbiBzZXRHZW9Mb2NhdGlvbiAodWRpZCwgbGF0aXR1ZGUsIGxvbmdpdHVkZSkge1xuICAvLyBGYWlsIGZhc3QgaWYgdGhlIGJpbmFyeSBpcyBub3QgcHJlc2VudFxuICBhd2FpdCBhc3NlcnRQcmVzZW5jZSgpO1xuXG4gIGxhdGl0dWRlID0gYCR7bGF0aXR1ZGV9YC50cmltKCk7XG4gIGxvbmdpdHVkZSA9IGAke2xvbmdpdHVkZX1gLnRyaW0oKTtcbiAgdHJ5IHtcbiAgICAvLyBUcnkgYm90aCBkZWNpbWFsIHNlcGFyYXRvcnNcbiAgICBjb25zdCBsYXRpdHVkZVdpdGhDb21tYSA9IGxhdGl0dWRlLnJlcGxhY2UoJy4nLCAnLCcpO1xuICAgIGNvbnN0IGxvbmdpdHVkZVdpdGhDb21tYSA9IGxvbmdpdHVkZS5yZXBsYWNlKCcuJywgJywnKTtcbiAgICBhd2FpdCBleGVjRmJzaW1jdGwoW3VkaWQsICdzZXRfbG9jYXRpb24nLCBsYXRpdHVkZVdpdGhDb21tYSwgbG9uZ2l0dWRlV2l0aENvbW1hXSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGNvbnN0IGxhdGl0dWRlV2l0aERvdCA9IGxhdGl0dWRlLnJlcGxhY2UoJywnLCAnLicpO1xuICAgIGNvbnN0IGxvbmdpdHVkZVdpdGhEb3QgPSBsb25naXR1ZGUucmVwbGFjZSgnLCcsICcuJyk7XG4gICAgYXdhaXQgZXhlY0Zic2ltY3RsKFt1ZGlkLCAnc2V0X2xvY2F0aW9uJywgbGF0aXR1ZGVXaXRoRG90LCBsb25naXR1ZGVXaXRoRG90XSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBY3RpdmF0ZXMgdGhlIHdpbmRvdyBvZiB0aGUgZ2l2ZW4gc2ltdWxhdG9yXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVkaWQgLSBUaGUgU2ltdWxhdG9yIFVESURcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgY29tbWFuZCBmYWlsZWQgb3IgZmJzaW1jdGwgaXMgbm90IHByZXNlbnQgaW4gUEFUSFxuICovXG5hc3luYyBmdW5jdGlvbiBmb2N1cyAodWRpZCkge1xuICBhd2FpdCBleGVjRmJzaW1jdGwoW3VkaWQsICdmb2N1cyddKTtcbn1cblxuZXhwb3J0IHtcbiAgZXhlY0Zic2ltY3RsLCBzZXRHZW9Mb2NhdGlvbiwgZm9jdXNcbn07Il0sImZpbGUiOiJsaWIvZmJzaW1jdGwtdXRpbHMuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
