"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _simulatorXcode = _interopRequireDefault(require("./simulator-xcode-8"));

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _appiumSupport = require("appium-support");

var _asyncLock = _interopRequireDefault(require("async-lock"));

var _logger = _interopRequireDefault(require("./logger"));

var _nodeSimctl = require("node-simctl");

var _asyncbox = require("asyncbox");

var _utils = require("./utils.js");

var fbsimctl = _interopRequireWildcard(require("./fbsimctl-utils"));

const SIMULATOR_SHUTDOWN_TIMEOUT = 15 * 1000;
const startupLock = new _asyncLock.default();
const preferencesPlistGuard = new _asyncLock.default();
const ENROLLMENT_NOTIFICATION_RECEIVER = 'com.apple.BiometricKit.enrollmentChanged';

class SimulatorXcode9 extends _simulatorXcode.default {
  constructor(udid, xcodeVersion) {
    super(udid, xcodeVersion);
  }

  async run(opts = {}) {
    opts = Object.assign({
      devicePreferences: {},
      isHeadless: false,
      startupTimeout: this.startupTimeout
    }, opts);

    if (opts.scaleFactor) {
      opts.devicePreferences.SimulatorWindowLastScale = parseFloat(opts.scaleFactor);
    }

    const commonPreferences = {
      RotateWindowWhenSignaledByGuest: true
    };

    if (_lodash.default.isBoolean(opts.connectHardwareKeyboard)) {
      opts.devicePreferences.ConnectHardwareKeyboard = opts.connectHardwareKeyboard;
      commonPreferences.ConnectHardwareKeyboard = opts.connectHardwareKeyboard;
    }

    if (!_lodash.default.isEmpty(opts.devicePreferences) || !_lodash.default.isEmpty(commonPreferences)) {
      await this.updatePreferences(opts.devicePreferences, commonPreferences);
    }

    const bootSimulator = async () => {
      try {
        await (0, _asyncbox.retryInterval)(3, 2000, async () => await (0, _nodeSimctl.bootDevice)(this.udid));
      } catch (err) {
        _logger.default.warn(`'xcrun simctl boot ${this.udid}' command has returned non-zero code. The problem was: ${err.stderr}`);
      }
    };

    const waitForShutdown = async () => {
      try {
        await (0, _asyncbox.waitForCondition)(async () => {
          const {
            state
          } = await this.stat();
          return state === 'Shutdown';
        }, {
          waitMs: SIMULATOR_SHUTDOWN_TIMEOUT,
          intervalMs: 500
        });
      } catch (err) {
        throw new Error(`Simulator is not in 'Shutdown' state after ${SIMULATOR_SHUTDOWN_TIMEOUT}ms`);
      }
    };

    let shouldWaitForBoot = true;
    const startTime = process.hrtime();
    await startupLock.acquire(this.uiClientBundleId, async () => {
      const stat = await this.stat();
      const serverState = stat.state;
      const isServerRunning = serverState === 'Booted';
      const isUIClientRunning = await this.isUIClientRunning();

      if (opts.isHeadless) {
        if (isServerRunning && !isUIClientRunning) {
          _logger.default.info(`Simulator with UDID ${this.udid} already booted in headless mode.`);

          shouldWaitForBoot = false;
          return;
        }

        if (await this.killUIClient()) {
          _logger.default.info(`Detected the UI client was running and killed it. Verifying the Simulator is in Shutdown state...`);

          await waitForShutdown();
        }

        _logger.default.info(`Booting Simulator with UDID ${this.udid} in headless mode. All UI-related capabilities are going to be ignored.`);

        await bootSimulator();
      } else {
        if (isServerRunning && isUIClientRunning) {
          _logger.default.info(`Both Simulator with UDID ${this.udid} and the UI client are currently running`);

          shouldWaitForBoot = false;
          return;
        }

        if (['Shutdown', 'Booted'].indexOf(serverState) === -1) {
          if (serverState !== 'Shutting Down') {
            _logger.default.info(`Simulator ${this.udid} is in '${serverState}' state. Trying to shutdown...`);

            try {
              await this.shutdown();
            } catch (err) {
              _logger.default.warn(`Error on Simulator shutdown: ${err.message}`);
            }
          }

          await waitForShutdown();
        }

        _logger.default.info(`Booting Simulator with UDID ${this.udid}...`);

        await bootSimulator();

        if (!isUIClientRunning) {
          await this.startUIClient(opts);
        }
      }
    });

    if (shouldWaitForBoot) {
      await this.waitForBoot(opts.startupTimeout);

      _logger.default.info(`Simulator with UDID ${this.udid} booted in ${process.hrtime(startTime)[0]} seconds`);
    }
  }

  verifyDevicePreferences(prefs = {}) {
    if (_lodash.default.isEmpty(prefs)) {
      return;
    }

    if (!_lodash.default.isUndefined(prefs.SimulatorWindowLastScale)) {
      if (!_lodash.default.isNumber(prefs.SimulatorWindowLastScale) || prefs.SimulatorWindowLastScale <= 0) {
        _logger.default.errorAndThrow(`SimulatorWindowLastScale is expected to be a positive float value. ` + `'${prefs.SimulatorWindowLastScale}' is assigned instead.`);
      }
    }

    if (!_lodash.default.isUndefined(prefs.SimulatorWindowCenter)) {
      const verificationPattern = /{-?\d+(\.\d+)?,-?\d+(\.\d+)?}/;

      if (!_lodash.default.isString(prefs.SimulatorWindowCenter) || !verificationPattern.test(prefs.SimulatorWindowCenter)) {
        _logger.default.errorAndThrow(`SimulatorWindowCenter is expected to match "{floatXPosition,floatYPosition}" format (without spaces). ` + `'${prefs.SimulatorWindowCenter}' is assigned instead.`);
      }
    }

    if (!_lodash.default.isUndefined(prefs.SimulatorWindowOrientation)) {
      const acceptableValues = ['Portrait', 'LandscapeLeft', 'PortraitUpsideDown', 'LandscapeRight'];

      if (acceptableValues.indexOf(prefs.SimulatorWindowOrientation) === -1) {
        _logger.default.errorAndThrow(`SimulatorWindowOrientation is expected to be one of ${acceptableValues}. ` + `'${prefs.SimulatorWindowOrientation}' is assigned instead.`);
      }
    }

    if (!_lodash.default.isUndefined(prefs.SimulatorWindowRotationAngle)) {
      if (!_lodash.default.isNumber(prefs.SimulatorWindowRotationAngle)) {
        _logger.default.errorAndThrow(`SimulatorWindowRotationAngle is expected to be a valid number. ` + `'${prefs.SimulatorWindowRotationAngle}' is assigned instead.`);
      }
    }
  }

  async updatePreferences(devicePrefs = {}, commonPrefs = {}) {
    if (!_lodash.default.isEmpty(devicePrefs)) {
      _logger.default.debug(`Setting preferences of ${this.udid} Simulator to ${JSON.stringify(devicePrefs)}`);
    }

    if (!_lodash.default.isEmpty(commonPrefs)) {
      _logger.default.debug(`Setting common Simulator preferences to ${JSON.stringify(commonPrefs)}`);
    }

    const homeFolderPath = process.env.HOME;

    if (!homeFolderPath) {
      _logger.default.warn(`Cannot get the path to HOME folder from the process environment. ` + `Ignoring Simulator preferences update.`);

      return false;
    }

    this.verifyDevicePreferences(devicePrefs);

    const plistPath = _path.default.resolve(homeFolderPath, 'Library', 'Preferences', 'com.apple.iphonesimulator.plist');

    if (!(await _appiumSupport.fs.hasAccess(plistPath))) {
      _logger.default.warn(`Simulator preferences file '${plistPath}' is not accessible. ` + `Ignoring Simulator preferences update.`);

      return false;
    }

    let newPrefs = {};

    if (!_lodash.default.isEmpty(devicePrefs)) {
      newPrefs.DevicePreferences = {
        [this.udid.toUpperCase()]: devicePrefs
      };
    }

    newPrefs = _lodash.default.merge(newPrefs, commonPrefs);
    return await preferencesPlistGuard.acquire(SimulatorXcode9.name, async () => {
      try {
        const currentPlistContent = await _appiumSupport.plist.parsePlistFile(plistPath);
        await _appiumSupport.plist.updatePlistFile(plistPath, _lodash.default.merge(currentPlistContent, newPrefs), true);

        _logger.default.debug(`Updated ${this.udid} Simulator preferences at '${plistPath}' with ${JSON.stringify(newPrefs)}`);

        return true;
      } catch (e) {
        _logger.default.warn(`Cannot update ${this.udid} Simulator preferences at '${plistPath}'. ` + `Try to delete the file manually in order to reset it. Original error: ${e.message}`);

        return false;
      }
    });
  }

  async shutdown() {
    const {
      state
    } = await this.stat();

    if (state === 'Shutdown') {
      return;
    }

    await (0, _asyncbox.retryInterval)(5, 500, _nodeSimctl.shutdown, this.udid);
  }

  async clean() {
    _logger.default.info(`Cleaning simulator ${this.udid}`);

    await (0, _nodeSimctl.eraseDevice)(this.udid, 10000);
  }

  async _activateWindow() {
    try {
      await fbsimctl.focus(this.udid);
    } catch (err) {
      _logger.default.warn(`Cannot focus Simulator window with fbsimctl. Defaulting to AppleScript. ` + `Original error: ${err.message}`);

      const {
        name,
        sdk
      } = await this.stat();
      return `
        tell application "System Events"
          tell process "Simulator"
            set frontmost to false
            set frontmost to true
            click (menu item 1 where (its name contains "${name} -" and its name contains "${sdk}")) of menu 1 of menu bar item "Window" of menu bar 1
          end tell
        end tell
      `;
    }
  }

  async isBiometricEnrolled() {
    const {
      stdout
    } = await (0, _nodeSimctl.spawn)(this.udid, ['notifyutil', '-g', ENROLLMENT_NOTIFICATION_RECEIVER]);
    const match = new RegExp(`${_lodash.default.escapeRegExp(ENROLLMENT_NOTIFICATION_RECEIVER)}\\s+([01])`).exec(stdout);

    if (!match) {
      throw new Error(`Cannot parse biometric enrollment state from '${stdout}'`);
    }

    _logger.default.info(`Current biometric enrolled state for ${this.udid} Simulator: ${match[1]}`);

    return match[1] === '1';
  }

  async enrollBiometric(isEnabled = true) {
    _logger.default.debug(`Setting biometric enrolled state for ${this.udid} Simulator to '${isEnabled ? 'enabled' : 'disabled'}'`);

    await (0, _nodeSimctl.spawn)(this.udid, ['notifyutil', '-s', ENROLLMENT_NOTIFICATION_RECEIVER, isEnabled ? '1' : '0']);
    await (0, _nodeSimctl.spawn)(this.udid, ['notifyutil', '-p', ENROLLMENT_NOTIFICATION_RECEIVER]);

    if ((await this.isBiometricEnrolled()) !== isEnabled) {
      throw new Error(`Cannot set biometric enrolled state for ${this.udid} Simulator to '${isEnabled ? 'enabled' : 'disabled'}'`);
    }
  }

  async sendBiometricMatch(shouldMatch = true, biometricName = 'touchId') {
    const domainComponent = (0, _utils.toBiometricDomainComponent)(biometricName);
    const domain = `com.apple.BiometricKit_Sim.${domainComponent}.${shouldMatch ? '' : 'no'}match`;
    await (0, _nodeSimctl.spawn)(this.udid, ['notifyutil', '-p', domain]);

    _logger.default.info(`Sent notification ${domain} to ${shouldMatch ? 'match' : 'not match'} ${biometricName} biometric ` + `for ${this.udid} Simulator`);
  }

  async getLaunchDaemonsRoot() {
    const devRoot = await (0, _utils.getDeveloperRoot)();
    return _path.default.resolve(devRoot, 'Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/LaunchDaemons');
  }

}

var _default = SimulatorXcode9;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
