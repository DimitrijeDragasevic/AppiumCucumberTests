"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _simulatorXcode = require("./simulator-xcode-6");

var _simulatorXcode2 = _interopRequireDefault(require("./simulator-xcode-7"));

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _asyncbox = require("asyncbox");

var _teen_process = require("teen_process");

var _nodeSimctl = require("node-simctl");

var fbsimctl = _interopRequireWildcard(require("./fbsimctl-utils"));

const STARTUP_TIMEOUT = 120 * 1000;
const SAFARI_STARTUP_TIMEOUT = 25 * 1000;
const MOBILE_SAFARI_BUNDLE_ID = 'com.apple.mobilesafari';

const PROCESS_LAUNCH_OK_PATTERN = bundleId => new RegExp(`${bundleId.replace('.', '\\.')}:\\s+\\d+`);

class SimulatorXcode8 extends _simulatorXcode2.default {
  constructor(udid, xcodeVersion) {
    super(udid, xcodeVersion);
    this.isFreshFiles = ['Library/Cookies', 'Library/Preferences/.GlobalPreferences.plist', 'Library/Preferences/com.apple.springboard.plist', 'var/run/syslog.pid'];
  }

  async killUIClient(force = false) {
    const pid = await this.getUIClientPid();

    if (!pid) {
      return false;
    }

    _logger.default.debug(`Sending ${force ? 'forced ' : ''}kill signal to Simulator UI client with PID ${pid}`);

    try {
      await (0, _teen_process.exec)('kill', force ? ['-9', pid] : [pid]);
      return true;
    } catch (e) {
      throw new Error(`Cannot kill the Simulator UI client. Original error: ${e.message}`);
    }
  }

  async isAppInstalled(bundleId) {
    try {
      const appContainer = await (0, _nodeSimctl.getAppContainer)(this.udid, bundleId, false);
      return appContainer.endsWith('.app');
    } catch (err) {
      try {
        const info = await (0, _nodeSimctl.appInfo)(this.udid, bundleId);
        return info.includes('ApplicationType');
      } catch (e) {
        return false;
      }
    }
  }

  get startupTimeout() {
    return STARTUP_TIMEOUT;
  }

  async waitForBoot(startupTimeout) {
    await (0, _nodeSimctl.startBootMonitor)(this.udid, {
      timeout: startupTimeout
    });
    this.emit(_simulatorXcode.BOOT_COMPLETED_EVENT);
  }

  async openUrl(url) {
    if (!(await this.isRunning())) {
      throw new Error(`Tried to open ${url}, but Simulator is not in Booted state`);
    }

    const launchTimestamp = process.hrtime();
    let lastError = null;

    try {
      await (0, _asyncbox.waitForCondition)(async () => {
        try {
          const {
            stdout
          } = await (0, _teen_process.exec)('xcrun', ['simctl', 'launch', this.udid, MOBILE_SAFARI_BUNDLE_ID]);

          if (PROCESS_LAUNCH_OK_PATTERN(MOBILE_SAFARI_BUNDLE_ID).test(stdout)) {
            await (0, _nodeSimctl.openUrl)(this.udid, url);
            return true;
          }
        } catch (err) {
          _logger.default.error(`Failed to open '${url}' in Safari. Retrying...`);

          lastError = err.stderr || err.message;
        }

        return false;
      }, {
        waitMs: SAFARI_STARTUP_TIMEOUT,
        intervalMs: 500
      });
    } catch (err) {
      _logger.default.errorAndThrow(`Safari cannot open '${url}' after ${process.hrtime(launchTimestamp)[0]} seconds ` + `because of: ${lastError || 'an unknown error'}`);
    }

    _logger.default.debug(`Safari has successfully opened '${url}' in ${process.hrtime(launchTimestamp)[0]} seconds`);
  }

  async cleanSafari(keepPrefs = true) {
    try {
      if (await this.isRunning()) {
        await (0, _nodeSimctl.terminate)(this.udid, MOBILE_SAFARI_BUNDLE_ID);
      }
    } catch (ign) {}

    await super.cleanSafari(keepPrefs);
  }

  async cleanCustomApp(appFile, appBundleId, scrub = false) {
    try {
      await (0, _nodeSimctl.terminate)(this.udid, appBundleId);
    } catch (ign) {}

    await super.cleanCustomApp(appFile, appBundleId, scrub);
  }

  async shake() {
    _logger.default.info(`Performing shake gesture on ${this.udid} Simulator`);

    await (0, _nodeSimctl.spawn)(this.udid, ['notifyutil', '-p', 'com.apple.UIKit.SimulatorShake']);
  }

  async _activateWindow() {
    try {
      await fbsimctl.focus(this.udid);
    } catch (err) {
      _logger.default.warn(`Cannot focus Simulator window with fbsimctl. Defaulting to AppleScript. ` + `Original error: ${err.message}`);

      return await super._activateWindow();
    }
  }

  async isBiometricEnrolled() {
    const output = await this.executeUIClientScript(`
      tell application "System Events"
        tell process "Simulator"
          set dstMenuItem to menu item "Toggle Enrolled State" of menu 1 of menu item "Touch ID" of menu 1 of menu bar item "Hardware" of menu bar 1
          set isChecked to (value of attribute "AXMenuItemMarkChar" of dstMenuItem) is "✓"
        end tell
      end tell
    `);

    _logger.default.debug(`Touch ID enrolled state: ${output}`);

    return _lodash.default.isString(output) && output.trim() === 'true';
  }

  async enrollBiometric(isEnabled = true) {
    await this.executeUIClientScript(`
      tell application "System Events"
        tell process "Simulator"
          set dstMenuItem to menu item "Toggle Enrolled State" of menu 1 of menu item "Touch ID" of menu 1 of menu bar item "Hardware" of menu bar 1
          set isChecked to (value of attribute "AXMenuItemMarkChar" of dstMenuItem) is "✓"
          if ${isEnabled ? 'not ' : ''}isChecked then
            click dstMenuItem
          end if
        end tell
      end tell
    `);
  }

  async sendBiometricMatch(shouldMatch = true) {
    await this.executeUIClientScript(`
      tell application "System Events"
        tell process "Simulator"
          set dstMenuItem to menu item "${shouldMatch ? 'Matching Touch' : 'Non-matching Touch'}" of menu 1 of menu item "Touch ID" of menu 1 of menu bar item "Hardware" of menu bar 1
          click dstMenuItem
        end tell
      end tell
    `);
  }

  async setGeolocation(latitude, longitude) {
    try {
      await fbsimctl.setGeoLocation(this.udid, latitude, longitude);
      return true;
    } catch (e) {
      _logger.default.warn(`Cannot set geolocation with fbsimctl. Defaulting to AppleScript. Original error: ${e.message}`);

      const output = await this.executeUIClientScript(`
        tell application "System Events"
          tell process "Simulator"
            set featureName to "Custom Location"
            set dstMenuItem to menu item (featureName & "…") of menu 1 of menu item "Location" of menu 1 of menu bar item "Debug" of menu bar 1
            click dstMenuItem
            delay 1
            set value of text field 1 of window featureName to "${latitude}"
            delay 0.5
            set value of text field 2 of window featureName to "${longitude}"
            delay 0.5
            click button "OK" of window featureName
            delay 0.5
            set isInvisible to (not (exists (window featureName)))
          end tell
        end tell
      `);

      _logger.default.debug(`Geolocation parameters dialog accepted: ${output}`);

      return _lodash.default.isString(output) && output.trim() === 'true';
    }
  }

}

var _default = SimulatorXcode8;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
