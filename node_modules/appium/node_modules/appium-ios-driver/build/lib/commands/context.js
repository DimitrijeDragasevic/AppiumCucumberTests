"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WEBVIEW_BASE = exports.WEBVIEW_WIN = exports.NATIVE_WIN = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _asyncbox = require("asyncbox");

var _appiumRemoteDebugger = require("appium-remote-debugger");

var _iosPerformanceLog = _interopRequireDefault(require("../device-log/ios-performance-log"));

var _appiumBaseDriver = require("appium-base-driver");

var _logger = _interopRequireDefault(require("../logger"));

var _appiumSupport = require("appium-support");

const NATIVE_WIN = 'NATIVE_APP';
exports.NATIVE_WIN = NATIVE_WIN;
const WEBVIEW_WIN = 'WEBVIEW';
exports.WEBVIEW_WIN = WEBVIEW_WIN;
const WEBVIEW_BASE = `${WEBVIEW_WIN}_`;
exports.WEBVIEW_BASE = WEBVIEW_BASE;
let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

commands.getCurrentContext = async function getCurrentContext() {
  if (this.curContext && this.curContext !== NATIVE_WIN) {
    return `${WEBVIEW_BASE}${this.curContext}`;
  } else {
    return NATIVE_WIN;
  }
};

commands.getContexts = async function getContexts() {
  _logger.default.debug('Getting list of available contexts');

  let contexts = await this.getContextsAndViews(false);

  let mapFn = context => context.id.toString();

  if (this.opts.fullContextList) {
    mapFn = context => {
      return {
        id: context.id.toString(),
        title: context.view.title,
        url: context.view.url
      };
    };
  }

  return contexts.map(mapFn);
};

commands.setContext = async function setContext(name, callback, skipReadyCheck) {
  function alreadyInContext(desired, current) {
    return desired === current || desired === null && current === NATIVE_WIN || desired === NATIVE_WIN && current === null;
  }

  _logger.default.debug(`Attempting to set context to '${name}'`);

  if (alreadyInContext(name, this.curContext)) {} else if (name === NATIVE_WIN || name === null) {
    this.curContext = null;

    if (this.isRealDevice()) {
      this.remote.disconnect();
    }
  } else {
    if (_lodash.default.isUndefined(this.contexts)) {
      await this.getContexts();
    }

    let contextId = name.replace(WEBVIEW_BASE, '');

    if (contextId === '') {
      contextId = this.contexts[1];
    }

    if (!_lodash.default.includes(this.contexts, contextId)) {
      throw new _appiumBaseDriver.errors.NoSuchContextError();
    }

    if (this.isRealDevice()) {
      if (this.remote) {
        await this.remote.disconnect();
      }

      this.curContext = contextId;
      await this.remote.connect(contextId);
    } else {
      let [appIdKey, pageIdKey] = _lodash.default.map(contextId.split('.'), id => parseInt(id, 10));

      await this.remote.selectPage(appIdKey, pageIdKey, skipReadyCheck);
      this.curContext = contextId;
    }
  }

  if (this.opts.enablePerformanceLogging && this.remote) {
    _logger.default.debug(`Starting performance log on '${this.curContext}'`);

    this.logs.performance = new _iosPerformanceLog.default(this.remote);
    await this.logs.performance.startCapture();
  }
};

commands.getWindowHandle = async function getWindowHandle() {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  return this.curContext.toString();
};

commands.getWindowHandles = async function getWindowHandles() {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  this.windowHandleCache = await this.listWebFrames(false);

  const idArray = _lodash.default.map(this.windowHandleCache, 'id');

  if (!this.contexts) {
    this.contexts = idArray;
  }

  return _lodash.default.map(idArray, id => id.toString());
};

commands.setWindow = async function setWindow(name, skipReadyCheck) {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  if (!_lodash.default.includes(_lodash.default.map(this.windowHandleCache, 'id'), name)) {
    throw new _appiumBaseDriver.errors.NoSuchWindowError();
  }

  let pageIdKey = parseInt(name, 10);

  if (!this.isRealDevice()) {
    await this.remote.selectPage(pageIdKey, skipReadyCheck);
    this.curContext = this.curWindowHandle = name;
  } else {
    if (name === this.curWindowHandle) {
      _logger.default.debug(`Remote debugger is already connected to window '${name}'`);
    } else if (!_lodash.default.includes(_lodash.default.map(this.windowHandleCache, 'id'), name)) {
      throw new _appiumBaseDriver.errors.NoSuchWindowError();
    } else {
      await this.remote.disconnect();
      this.curContext = this.curWindowHandle = name;
      await this.remote.connect(name);
    }
  }
};

helpers.webContextIndex = function webContextIndex() {
  return this.curContext.replace(WEBVIEW_BASE, '') - 1;
};

extensions.initAutoWebview = async function initAutoWebview() {
  if (this.opts.autoWebview) {
    _logger.default.debug('Setting auto webview');

    await this.navToInitialWebview(this);
  }
};

extensions.getContextsAndViews = async function getContextsAndViews(useUrl = true) {
  _logger.default.debug('Retrieving contexts and views');

  let webviews = await this.listWebFrames(useUrl);
  let ctxs = [{
    id: NATIVE_WIN,
    view: {}
  }];
  this.contexts = [NATIVE_WIN];

  for (let view of webviews) {
    ctxs.push({
      id: `${WEBVIEW_BASE}${view.id}`,
      view
    });
    this.contexts.push(view.id.toString());
  }

  return ctxs;
};

extensions.getNewRemoteDebugger = async function getNewRemoteDebugger() {
  return new _appiumRemoteDebugger.RemoteDebugger({
    bundleId: this.opts.bundleId,
    useNewSafari: this.useNewSafari(),
    pageLoadMs: this.pageLoadMs,
    platformVersion: this.opts.platformVersion,
    isSafari: this.isSafari(),
    remoteDebugProxy: this.opts.remoteDebugProxy,
    garbageCollectOnExecute: _appiumSupport.util.hasValue(this.opts.safariGarbageCollect) ? !!this.opts.safariGarbageCollect : true
  });
};

extensions.listWebFrames = async function listWebFrames(useUrl = true) {
  if (!this.opts.bundleId) {
    _logger.default.errorAndThrow('Cannot enter web frame without a bundle ID');
  }

  useUrl = useUrl && !!this.getCurrentUrl();

  _logger.default.debug(`Selecting by url: ${useUrl} ${useUrl ? `(expected url: '${this.getCurrentUrl()}')` : ''}`);

  let currentUrl = useUrl ? this.getCurrentUrl() : undefined;
  let pageArray;

  if (this.isRealDevice() && this.remote && this.opts.bundleId) {
    pageArray = await this.remote.pageArrayFromJson(this.opts.ignoreAboutBlankUrl);
  } else if (this.remote && this.remote.appIdKey) {
    pageArray = await this.remote.selectApp(currentUrl, this.opts.webviewConnectRetries, this.opts.ignoreAboutBlankUrl);
  } else if (this.isRealDevice()) {
    try {
      this.remote = new _appiumRemoteDebugger.WebKitRemoteDebugger({
        port: this.opts.webkitDebugProxyPort,
        webkitResponseTimeout: this.opts.webkitResponseTimeout,
        platformVersion: this.opts.platformVersion,
        isSafari: this.isSafari()
      });
      pageArray = await this.remote.pageArrayFromJson(this.opts.ignoreAboutBlankUrl);
    } catch (err) {
      if (!_lodash.default.includes(err.message, 'connect ECONNREFUSED')) throw err;

      _logger.default.warn('Attempted to get a list of webview contexts but could not connect to ' + 'ios-webkit-debug-proxy. If you expect to find webviews, please ensure ' + 'that the proxy is running and accessible');

      this.remote = null;
      pageArray = [];
    }
  } else {
    this.remote = await this.getNewRemoteDebugger();
    let appInfo = await this.remote.connect();

    if (!appInfo) {
      _logger.default.debug('Unable to connect to the remote debugger.');

      return [];
    }

    pageArray = await this.remote.selectApp(currentUrl, this.opts.webviewConnectRetries, this.opts.ignoreAboutBlankUrl);
    this.remote.on(_appiumRemoteDebugger.RemoteDebugger.EVENT_PAGE_CHANGE, this.onPageChange.bind(this));
    this.remote.on(_appiumRemoteDebugger.RemoteDebugger.EVENT_FRAMES_DETACHED, () => {
      if (!_lodash.default.isEmpty(this.curWebFrames)) {
        _logger.default.debug(`Clearing ${this.curWebFrames.length} frames: ${this.curWebFrames.join(', ')}`);
      }

      this.curWebFrames = [];
    });

    let tryClosingAlert = async () => {
      let didDismiss = await this.closeAlertBeforeTest();

      if (!didDismiss) {
        throw new Error('Close alert failed. Retry.');
      }
    };

    try {
      await (0, _asyncbox.retryInterval)(3, 4000, tryClosingAlert);
    } catch (err) {
      if (err.message !== 'Close alert failed. Retry.') {
        _logger.default.errorAndThrow(err);
      }
    }
  }

  if (pageArray.length === 0) {
    _logger.default.debug('No web frames found.');
  }

  return pageArray;
};

extensions.onPageChange = async function onPageChange(pageChangeNotification) {
  _logger.default.debug(`Remote debugger notified us of a new page listing: ${JSON.stringify(pageChangeNotification)}`);

  if (this.selectingNewPage) {
    _logger.default.debug('We are in the middle of selecting a page, ignoring');

    return;
  }

  if (!this.remote || !this.remote.isConnected()) {
    _logger.default.debug('We have not yet connected, ignoring');

    return;
  }

  const {
    appIdKey,
    pageArray
  } = pageChangeNotification;
  let newIds = [];
  let newPages = [];
  let keyId = null;

  for (const page of pageArray) {
    const id = page.id.toString();
    newIds.push(id);

    if (page.isKey) {
      keyId = id;
    }

    const contextId = `${appIdKey}.${id}`;

    if (!_lodash.default.includes(this.contexts, contextId)) {
      newPages.push(id);
      this.contexts.push(contextId);
    }
  }

  if (!keyId) {
    _logger.default.debug('No key id found. Choosing first id from page array');

    keyId = newIds[0] || null;
  }

  if (!_appiumSupport.util.hasValue(this.curContext)) {
    _logger.default.debug('We do not appear to have window set yet, ignoring');

    return;
  }

  const [curAppIdKey, curPageIdKey] = this.curContext.split('.');

  if (curAppIdKey !== appIdKey) {
    _logger.default.debug('Page change not referring to currently selected app, ignoring.');

    return;
  }

  let newPage = null;

  if (newPages.length) {
    newPage = _lodash.default.last(newPages);

    _logger.default.debug(`We have new pages, selecting page '${newPage}'`);
  } else if (!_lodash.default.includes(newIds, curPageIdKey)) {
    _logger.default.debug('New page listing from remote debugger does not contain ' + 'current window; assuming it is closed');

    if (!_appiumSupport.util.hasValue(keyId)) {
      _logger.default.error('Do not have our current window anymore, and there ' + 'are not any more to load! Doing nothing...');

      this.setCurrentUrl(undefined);
      return;
    }

    _logger.default.debug(`Debugger already selected page '${keyId}', ` + `confirming that choice.`);

    this.curContext = `${appIdKey}.${keyId}`;
    newPage = keyId;
  } else {
    _logger.default.debug('Checking if page needs to load');

    const needsPageLoad = (() => {
      const contextArray = _lodash.default.map(pageArray, page => `${appIdKey}.${page.id}`);

      return !_lodash.default.isEqual(_lodash.default.find(this.contexts, this.curContext), _lodash.default.find(contextArray, this.curContext));
    })();

    if (needsPageLoad) {
      _logger.default.debug('Page load needed. Loading...');

      await this.remote.pageLoad();
    }

    _logger.default.debug('New page listing is same as old, doing nothing');
  }

  if (_appiumSupport.util.hasValue(this.curContext)) {
    let currentPageId = parseInt(_lodash.default.last(this.curContext.split('.')), 10);

    let page = _lodash.default.find(pageArray, p => parseInt(p.id, 10) === currentPageId);

    if (page && page.url !== this.getCurrentUrl()) {
      _logger.default.debug(`Redirected from '${this.getCurrentUrl()}' to '${page.url}'`);

      this.setCurrentUrl(page.url);
    }
  }

  if (_appiumSupport.util.hasValue(newPage)) {
    this.selectingNewPage = true;
    await this.remote.selectPage(appIdKey, parseInt(newPage, 10));
    this.selectingNewPage = false;
    this.curContext = `${appIdKey}.${newPage}`;
  }

  this.windowHandleCache = pageArray;
};

extensions.getLatestWebviewContextForTitle = async function getLatestWebviewContextForTitle(regExp) {
  let contexts = await this.getContextsAndViews();
  let matchingCtx;

  for (let ctx of contexts) {
    if (ctx.view && (ctx.view.title && ctx.view.title.match(regExp) || ctx.view.url && ctx.view.url.match(regExp))) {
      if (ctx.view.url !== 'about:blank') {
        matchingCtx = ctx;
      } else {
        if (parseFloat(this.iosSdkVersion) < 7 || parseFloat(this.iosSdkVersion) >= 9 || this.opts.platformVersion === '7.1' && this.opts.app && this.opts.app.toLowerCase() !== 'safari') {
          matchingCtx = ctx;
        }
      }

      break;
    }
  }

  return matchingCtx ? matchingCtx.id : undefined;
};

extensions.useNewSafari = function useNewSafari() {
  return parseFloat(this.iosSdkVersion) >= 8.1 && parseFloat(this.opts.platformVersion) >= 8.1 && !this.isRealDevice() && this.opts.safari;
};

extensions.navToInitialWebview = async function navToInitialWebview() {
  let timeout = 0;

  if (this.isRealDevice()) {
    timeout = 3000;

    _logger.default.debug(`Waiting for ${timeout} ms before navigating to view.`);
  }

  await _bluebird.default.delay(timeout);

  if (this.useNewSafari()) {
    await this.typeAndNavToUrl();
  } else if (parseInt(this.iosSdkVersion, 10) >= 7 && !this.isRealDevice() && this.opts.safari) {
    await this.navToViewThroughFavorites();
  } else {
    await this.navToViewWithTitle(/.*/);
  }
};

async function openNewPage() {
  let newPageButton = await this.findElement('xpath', "//UIAButton[contains(@name,'New page')]");
  await this.nativeTap(newPageButton.ELEMENT);
}

extensions.typeAndNavToUrl = async function typeAndNavToUrl() {
  let address = this.opts.address ? this.opts.address : '127.0.0.1';
  this.setCurrentUrl(this.caps.safariInitialUrl || `http://${address}:${this.opts.port}/welcome`);
  let tries = 0;
  const MAX_TRIES = 2;

  let navigate = async () => {
    let oldImpWait = this.implicitWaitMs;
    this.implicitWaitMs = 7000;
    let el = await (0, _asyncbox.retryInterval)(3, 1000, async () => {
      return await this.findElement('accessibility id', 'URL');
    });
    this.implicitWaitMs = oldImpWait;

    try {
      await this.nativeTap(el.ELEMENT);
    } catch (err) {
      if (_lodash.default.includes(err.message, 'could not be tapped')) {
        if (tries++ >= MAX_TRIES) throw err;
        await openNewPage();
        return await navigate();
      } else {
        throw err;
      }
    }

    try {
      let el = await this.findElement('class name', 'UIATextField');
      await this.setValueImmediate(this.getCurrentUrl(), el);
    } catch (err) {
      if (tries++ >= MAX_TRIES) throw err;
      return await navigate();
    }

    try {
      el = await this.findElement('accessibility id', 'Go');
      await this.nativeTap(el.ELEMENT);
    } catch (err) {
      if (_lodash.default.includes(err.message, 'could not be tapped')) {
        _logger.default.error('Unable to submit URL because \'Go\' button could not be tapped. ' + 'Please make sure your keyboard is toggled on.');
      }

      throw err;
    }

    await this.navToViewWithTitle(undefined, new RegExp(this.getCurrentUrl(), 'i'));
    await this.remote.pageUnload();
  };

  await navigate();
};

extensions.navToViewThroughFavorites = async function navToViewThroughFavorites() {
  _logger.default.debug('We are on iOS7+ simulator: clicking apple button to get into a webview');

  let oldImpWait = this.implicitWaitMs;
  this.implicitWaitMs = 7000;
  let el;

  try {
    el = await this.findElement('xpath', '//UIAScrollView[1]/UIAButton[1]');
  } catch (err) {
    let msg = 'Could not find button to click to get into webview. ' + 'Proceeding on the assumption we have a working one.';

    _logger.default.error(msg);

    this.implicitWaitMs = oldImpWait;
    return await this.navToViewWithTitle(/.*/i);
  }

  this.implicitWaitMs = oldImpWait;

  try {
    await this.nativeTap(el.ELEMENT);
  } catch (err) {
    let msg = 'Could not click button to get into webview. ' + 'Proceeding on the assumption we have a working one.';

    _logger.default.error(msg);
  }

  await this.navToViewWithTitle(/apple/i);
};

extensions.navToViewWithTitle = async function navToViewWithTitle(titleRegex, urlRegExp) {
  _logger.default.debug('Navigating to most recently opened webview');

  let start = Date.now();
  let spinTime = 500;

  let spinHandles = async () => {
    let res;

    try {
      res = await this.getLatestWebviewContextForTitle(titleRegex || urlRegExp);
    } catch (err) {
      if (!err.message.includes('Could not connect to a valid app after')) {
        const error = new Error(`Could not navigate to webview! Err: ${err.message}`);
        error.stack += `\nCaused by: ${err.stack}`;
        throw error;
      }

      _logger.default.debug('Could not navigate to webview. Retrying if possible.');
    }

    if (res) {
      let latestWindow = res;

      _logger.default.debug(`Picking webview '${latestWindow}'`);

      await this.setContext(latestWindow);
      await this.remote.cancelPageLoad();
      return;
    }

    if (Date.now() - start >= 90000) {
      throw new Error('Could not navigate to webview; there are none!');
    }

    _logger.default.warn('Could not find any webviews yet, refreshing/retrying');

    if (this.isRealDevice() || !this.opts.safari) {
      await _bluebird.default.delay(spinTime);
      return await spinHandles();
    }

    let element;

    try {
      _logger.default.debug('Finding and tapping reload button');

      element = await this.findUIElementOrElements('accessibility id', 'ReloadButton', '', false);
      await this.nativeTap(element.ELEMENT);
    } catch (err) {
      _logger.default.warn(`Error finding and tapping reload button: ${err.message}`);

      _logger.default.warn('Retrying.');

      await _bluebird.default.delay(spinTime);
    }

    return await spinHandles();
  };

  await spinHandles();
};

helpers.closeAlertBeforeTest = async function closeAlertBeforeTest() {
  let present = await this.uiAutoClient.sendCommand('au.alertIsPresent()');

  if (!present) {
    return false;
  }

  _logger.default.debug('Alert present before starting test, let us banish it');

  await this.uiAutoClient.sendCommand('au.dismissAlert()');

  _logger.default.debug('Alert banished!');

  return true;
};

helpers.stopRemote = async function stopRemote(closeWindowBeforeDisconnecting = false) {
  if (!this.remote) {
    _logger.default.errorAndThrow('Tried to leave a web frame but were not in one');
  }

  if (closeWindowBeforeDisconnecting) {
    await this.closeWindow();
  }

  await this.remote.disconnect();
  this.curContext = null;
  this.curWebFrames = [];
  this.curWebCoords = null;
  this.remote = null;
};

helpers.isWebContext = function isWebContext() {
  return !!this.curContext && this.curContext !== NATIVE_WIN;
};

helpers.setCurrentUrl = function setCurrentUrl(url) {
  this._currentUrl = url;
};

helpers.getCurrentUrl = function getCurrentUrl() {
  return this._currentUrl;
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
