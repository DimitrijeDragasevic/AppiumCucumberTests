#!/usr/bin/env node
"use strict";

require("source-map-support/register");

const fs = require('fs');

const path = require('path');

function waitForDeps(cb) {
  let i = 0;

  function check() {
    i++;

    try {
      require('./build/lib/install');

      cb();
    } catch (err) {
      if (err.message.includes("Cannot find module './build/lib/install'")) {
        console.warn('Project does not appear to be built yet. Please run `gulp transpile` first.');
        return cb('Could not install module: ' + err);
      }

      console.warn('Error trying to install Chromedriver binary. Waiting and trying again.', err.message);

      if (i <= 200) {
        setTimeout(check, 1000);
      } else {
        cb('Could not import installation module: ' + err);
      }
    }
  }

  check();
}

if (require.main === module) {
  let installScript = path.resolve(__dirname, 'build', 'lib', 'install.js');
  waitForDeps(function (err) {
    if (err) {
      console.warn('Unable to import install script. Re-run `install appium-chromedriver` manually.');
      return;
    }

    fs.stat(installScript, function (err) {
      if (err) {
        console.warn("NOTE: Run 'gulp transpile' before using");
        return;
      }

      require('./build/lib/install').doInstall().catch(function (err) {
        console.error(err.stack ? err.stack : err);
        process.exit(1);
      });
    });
  });
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluc3RhbGwtbnBtLmpzIl0sIm5hbWVzIjpbImZzIiwicmVxdWlyZSIsInBhdGgiLCJ3YWl0Rm9yRGVwcyIsImNiIiwiaSIsImNoZWNrIiwiZXJyIiwibWVzc2FnZSIsImluY2x1ZGVzIiwiY29uc29sZSIsIndhcm4iLCJzZXRUaW1lb3V0IiwibWFpbiIsIm1vZHVsZSIsImluc3RhbGxTY3JpcHQiLCJyZXNvbHZlIiwiX19kaXJuYW1lIiwic3RhdCIsImRvSW5zdGFsbCIsImNhdGNoIiwiZXJyb3IiLCJzdGFjayIsInByb2Nlc3MiLCJleGl0Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFJQSxNQUFNQSxFQUFFLEdBQUdDLE9BQU8sQ0FBQyxJQUFELENBQWxCOztBQUNBLE1BQU1DLElBQUksR0FBR0QsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBR0EsU0FBU0UsV0FBVCxDQUFzQkMsRUFBdEIsRUFBMEI7QUFHeEIsTUFBSUMsQ0FBQyxHQUFHLENBQVI7O0FBQ0EsV0FBU0MsS0FBVCxHQUFrQjtBQUNoQkQsSUFBQUEsQ0FBQzs7QUFDRCxRQUFJO0FBQ0ZKLE1BQUFBLE9BQU8sQ0FBQyxxQkFBRCxDQUFQOztBQUNBRyxNQUFBQSxFQUFFO0FBQ0gsS0FIRCxDQUdFLE9BQU9HLEdBQVAsRUFBWTtBQUNaLFVBQUlBLEdBQUcsQ0FBQ0MsT0FBSixDQUFZQyxRQUFaLENBQXFCLDBDQUFyQixDQUFKLEVBQXNFO0FBQ3BFQyxRQUFBQSxPQUFPLENBQUNDLElBQVIsQ0FBYSw2RUFBYjtBQUNBLGVBQU9QLEVBQUUsQ0FBQywrQkFBK0JHLEdBQWhDLENBQVQ7QUFDRDs7QUFDREcsTUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQWEsd0VBQWIsRUFBdUZKLEdBQUcsQ0FBQ0MsT0FBM0Y7O0FBQ0EsVUFBSUgsQ0FBQyxJQUFJLEdBQVQsRUFBYztBQUNaTyxRQUFBQSxVQUFVLENBQUNOLEtBQUQsRUFBUSxJQUFSLENBQVY7QUFDRCxPQUZELE1BRU87QUFDTEYsUUFBQUEsRUFBRSxDQUFDLDJDQUEyQ0csR0FBNUMsQ0FBRjtBQUNEO0FBQ0Y7QUFDRjs7QUFDREQsRUFBQUEsS0FBSztBQUNOOztBQUVELElBQUlMLE9BQU8sQ0FBQ1ksSUFBUixLQUFpQkMsTUFBckIsRUFBNkI7QUFFM0IsTUFBSUMsYUFBYSxHQUFHYixJQUFJLENBQUNjLE9BQUwsQ0FBYUMsU0FBYixFQUF3QixPQUF4QixFQUFpQyxLQUFqQyxFQUF3QyxZQUF4QyxDQUFwQjtBQUNBZCxFQUFBQSxXQUFXLENBQUMsVUFBVUksR0FBVixFQUFlO0FBQ3pCLFFBQUlBLEdBQUosRUFBUztBQUNQRyxNQUFBQSxPQUFPLENBQUNDLElBQVIsQ0FBYSxpRkFBYjtBQUNBO0FBQ0Q7O0FBQ0RYLElBQUFBLEVBQUUsQ0FBQ2tCLElBQUgsQ0FBUUgsYUFBUixFQUF1QixVQUFVUixHQUFWLEVBQWU7QUFDcEMsVUFBSUEsR0FBSixFQUFTO0FBQ1BHLFFBQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUFhLHlDQUFiO0FBQ0E7QUFDRDs7QUFDRFYsTUFBQUEsT0FBTyxDQUFDLHFCQUFELENBQVAsQ0FBK0JrQixTQUEvQixHQUEyQ0MsS0FBM0MsQ0FBaUQsVUFBVWIsR0FBVixFQUFlO0FBQzlERyxRQUFBQSxPQUFPLENBQUNXLEtBQVIsQ0FBY2QsR0FBRyxDQUFDZSxLQUFKLEdBQVlmLEdBQUcsQ0FBQ2UsS0FBaEIsR0FBd0JmLEdBQXRDO0FBQ0FnQixRQUFBQSxPQUFPLENBQUNDLElBQVIsQ0FBYSxDQUFiO0FBQ0QsT0FIRDtBQUlELEtBVEQ7QUFVRCxHQWZVLENBQVg7QUFnQkQiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4vKiBlc2xpbnQtZGlzYWJsZSBwcm9taXNlL3ByZWZlci1hd2FpdC10by1jYWxsYmFja3MgKi9cblxuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxuXG5mdW5jdGlvbiB3YWl0Rm9yRGVwcyAoY2IpIHtcbiAgLy8gc2VlIGlmIHdlIGNhbiBpbXBvcnQgdGhlIG5lY2Vzc2FyeSBjb2RlXG4gIC8vIHRyeSBpdCBhIHJpZGljdWxvdXMgKGJ1dCBmaW5pdGUpIG51bWJlciBvZiB0aW1lc1xuICBsZXQgaSA9IDA7XG4gIGZ1bmN0aW9uIGNoZWNrICgpIHtcbiAgICBpKys7XG4gICAgdHJ5IHtcbiAgICAgIHJlcXVpcmUoJy4vYnVpbGQvbGliL2luc3RhbGwnKTtcbiAgICAgIGNiKCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAoZXJyLm1lc3NhZ2UuaW5jbHVkZXMoXCJDYW5ub3QgZmluZCBtb2R1bGUgJy4vYnVpbGQvbGliL2luc3RhbGwnXCIpKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignUHJvamVjdCBkb2VzIG5vdCBhcHBlYXIgdG8gYmUgYnVpbHQgeWV0LiBQbGVhc2UgcnVuIGBndWxwIHRyYW5zcGlsZWAgZmlyc3QuJyk7XG4gICAgICAgIHJldHVybiBjYignQ291bGQgbm90IGluc3RhbGwgbW9kdWxlOiAnICsgZXJyKTtcbiAgICAgIH1cbiAgICAgIGNvbnNvbGUud2FybignRXJyb3IgdHJ5aW5nIHRvIGluc3RhbGwgQ2hyb21lZHJpdmVyIGJpbmFyeS4gV2FpdGluZyBhbmQgdHJ5aW5nIGFnYWluLicsIGVyci5tZXNzYWdlKTtcbiAgICAgIGlmIChpIDw9IDIwMCkge1xuICAgICAgICBzZXRUaW1lb3V0KGNoZWNrLCAxMDAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNiKCdDb3VsZCBub3QgaW1wb3J0IGluc3RhbGxhdGlvbiBtb2R1bGU6ICcgKyBlcnIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBjaGVjaygpO1xufVxuXG5pZiAocmVxdWlyZS5tYWluID09PSBtb2R1bGUpIHtcbiAgLy8gY2hlY2sgaWYgY3VyIGRpciBleGlzdHNcbiAgbGV0IGluc3RhbGxTY3JpcHQgPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnYnVpbGQnLCAnbGliJywgJ2luc3RhbGwuanMnKTtcbiAgd2FpdEZvckRlcHMoZnVuY3Rpb24gKGVycikge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGNvbnNvbGUud2FybignVW5hYmxlIHRvIGltcG9ydCBpbnN0YWxsIHNjcmlwdC4gUmUtcnVuIGBpbnN0YWxsIGFwcGl1bS1jaHJvbWVkcml2ZXJgIG1hbnVhbGx5LicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmcy5zdGF0KGluc3RhbGxTY3JpcHQsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiTk9URTogUnVuICdndWxwIHRyYW5zcGlsZScgYmVmb3JlIHVzaW5nXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZXF1aXJlKCcuL2J1aWxkL2xpYi9pbnN0YWxsJykuZG9JbnN0YWxsKCkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVyci5zdGFjayA/IGVyci5zdGFjayA6IGVycik7XG4gICAgICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn1cbiJdLCJmaWxlIjoiaW5zdGFsbC1ucG0uanMiLCJzb3VyY2VSb290IjoiLi4ifQ==
