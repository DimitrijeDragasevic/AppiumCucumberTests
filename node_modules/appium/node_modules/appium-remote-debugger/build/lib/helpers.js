"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.appInfoFromDict = appInfoFromDict;
exports.pageArrayFromDict = pageArrayFromDict;
exports.getDebuggerAppKey = getDebuggerAppKey;
exports.getPossibleDebuggerAppKeys = getPossibleDebuggerAppKeys;
exports.checkParams = checkParams;
exports.wrapScriptForFrame = wrapScriptForFrame;
exports.getScriptForAtom = getScriptForAtom;
exports.simpleStringify = simpleStringify;
exports.deferredPromise = deferredPromise;
exports.isTargetBased = isTargetBased;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("./logger"));

var _atoms = _interopRequireDefault(require("./atoms"));

var _lodash = _interopRequireDefault(require("lodash"));

var _assert = _interopRequireDefault(require("assert"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumSupport = require("appium-support");

const WEB_CONTENT_BUNDLE_ID = 'com.apple.WebKit.WebContent';
const MIN_PLATFORM_FOR_TARGET_BASED = '12.2';

function appInfoFromDict(dict) {
  const id = dict.WIRApplicationIdentifierKey;
  const isProxy = _lodash.default.isString(dict.WIRIsApplicationProxyKey) ? dict.WIRIsApplicationProxyKey.toLowerCase() === 'true' : dict.WIRIsApplicationProxyKey;
  const entry = {
    id,
    isProxy,
    name: dict.WIRApplicationNameKey,
    bundleId: dict.WIRApplicationBundleIdentifierKey,
    hostId: dict.WIRHostApplicationIdentifierKey,
    isActive: dict.WIRIsApplicationActiveKey,
    isAutomationEnabled: !!dict.WIRRemoteAutomationEnabledKey
  };
  return [id, entry];
}

function pageArrayFromDict(pageDict) {
  if (pageDict.id) {
    return [pageDict];
  }

  let newPageArray = [];

  for (const dict of _lodash.default.values(pageDict)) {
    if (_lodash.default.isUndefined(dict.WIRTypeKey) || dict.WIRTypeKey === 'WIRTypeWeb') {
      newPageArray.push({
        id: dict.WIRPageIdentifierKey,
        title: dict.WIRTitleKey,
        url: dict.WIRURLKey,
        isKey: !_lodash.default.isUndefined(dict.WIRConnectionIdentifierKey)
      });
    }
  }

  return newPageArray;
}

function getDebuggerAppKey(bundleId, platformVersion, appDict) {
  let appId;

  if (parseFloat(platformVersion) >= 8) {
    for (const [key, data] of _lodash.default.toPairs(appDict)) {
      if (data.bundleId === bundleId) {
        appId = key;
        break;
      }
    }

    if (appId) {
      _logger.default.debug(`Found app id key '${appId}' for bundle '${bundleId}'`);

      let proxiedAppIds = [];

      for (const [key, data] of _lodash.default.toPairs(appDict)) {
        if (data.isProxy && data.hostId === appId) {
          _logger.default.debug(`Found separate bundleId '${data.bundleId}' ` + `acting as proxy for '${bundleId}', with app id '${key}'`);

          proxiedAppIds.push(key);
        }
      }

      if (proxiedAppIds.length) {
        appId = _lodash.default.last(proxiedAppIds);

        _logger.default.debug(`Using proxied app id '${appId}'`);
      }
    }
  } else {
    if (_lodash.default.has(appDict, bundleId)) {
      appId = bundleId;
    }
  }

  return appId;
}

function appIdForBundle(bundleId, appDict) {
  let appId;

  for (const [key, data] of _lodash.default.toPairs(appDict)) {
    if (data.bundleId === bundleId) {
      appId = key;
      break;
    }
  }

  if (!appId && bundleId !== WEB_CONTENT_BUNDLE_ID) {
    return appIdForBundle(WEB_CONTENT_BUNDLE_ID, appDict);
  }

  return appId;
}

function getPossibleDebuggerAppKeys(bundleId, platformVersion, appDict) {
  let proxiedAppIds = [];

  if (parseFloat(platformVersion) >= 8) {
    const appId = appIdForBundle(bundleId, appDict);

    if (appId) {
      proxiedAppIds.push(appId);

      _logger.default.debug(`Found app id key '${appId}' for bundle '${bundleId}'`);

      for (const [key, data] of _lodash.default.toPairs(appDict)) {
        if (data.isProxy && data.hostId === appId) {
          _logger.default.debug(`Found separate bundleId '${data.bundleId}' ` + `acting as proxy for '${bundleId}', with app id '${key}'`);

          proxiedAppIds.push(key);
        }
      }
    }
  } else {
    if (_lodash.default.has(appDict, bundleId)) {
      proxiedAppIds = [bundleId];
    }
  }

  return proxiedAppIds;
}

function checkParams(params) {
  let errors = [];

  for (const [param, value] of _lodash.default.toPairs(params)) {
    try {
      _assert.default.ok(value);
    } catch (err) {
      errors.push(param);
    }
  }

  if (errors.length) {
    return errors;
  }
}

async function wrapScriptForFrame(script, frame) {
  _logger.default.debug(`Wrapping script for frame '${frame}'`);

  let elFromCache = await (0, _atoms.default)('get_element_from_cache');
  return `(function (window) { var document = window.document; ` + `return (${script}); })((${elFromCache.toString('utf8')})(${JSON.stringify(frame)}))`;
}

async function getScriptForAtom(atom, args, frames, asyncCallBack = null) {
  let atomSrc = await (0, _atoms.default)(atom);
  let script;

  if (frames.length > 0) {
    script = atomSrc;

    for (const frame of frames) {
      script = await wrapScriptForFrame(script, frame);
    }
  } else {
    _logger.default.debug(`Executing '${atom}' atom in default context`);

    script = `(${atomSrc})`;
  }

  args = args.map(JSON.stringify);

  if (asyncCallBack) {
    script += `(${args.join(',')}, ${asyncCallBack}, true )`;
  } else {
    script += `(${args.join(',')})`;
  }

  return script;
}

function simpleStringify(value) {
  if (!value) {
    return JSON.stringify(value);
  }

  let cleanValue = _lodash.default.clone(value);

  for (const property of ['ceil', 'clone', 'floor', 'round', 'scale', 'toString']) {
    delete cleanValue[property];
  }

  return JSON.stringify(cleanValue);
}

function deferredPromise() {
  let resolve;
  let reject;
  const promise = new _bluebird.default((res, rej) => {
    resolve = res;
    reject = rej;
  });
  return {
    promise,
    resolve,
    reject
  };
}

function isTargetBased(isSafari, platformVersion) {
  const isHighVersion = _appiumSupport.util.compareVersions(platformVersion, '>=', MIN_PLATFORM_FOR_TARGET_BASED);

  _logger.default.debug(`Checking which communication style to use (${isSafari ? '' : 'non-'}Safari on platform version '${platformVersion}')`);

  _logger.default.debug(`Platform version equal or higher than '${MIN_PLATFORM_FOR_TARGET_BASED}': ${isHighVersion}`);

  return isSafari && isHighVersion;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
