"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("./logger"));

var _remoteMessages = _interopRequireDefault(require("./remote-messages"));

class RpcClient {
  setCommunicationProtocol(isTargetBased = false) {
    _logger.default.warn(`Setting communication protocol: using ${isTargetBased ? 'Target-based' : 'full Web Inspector protocol'} communication`);

    this.isTargetBased = isTargetBased;

    if (!this.remoteMessages) {
      this.remoteMessages = new _remoteMessages.default(isTargetBased);
    } else {
      this.remoteMessages.setCommunicationProtocol(isTargetBased);
    }
  }

  async send(command, opts = {}) {
    try {
      return await this.sendMessage(command, opts);
    } catch (err) {
      if (err.message.includes(`'Target' domain was not found`)) {
        this.setCommunicationProtocol(false);
        return await this.sendMessage(command, opts);
      } else if (err.message.includes(`domain was not found`)) {
        this.setCommunicationProtocol(true);
        return await this.sendMessage(command, opts);
      }

      throw err;
    }
  }

  async sendMessage() {
    throw new Error(`Sub-classes need to implement a 'sendMessage' function`);
  }

}

exports.default = RpcClient;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9ycGMtY2xpZW50LmpzIl0sIm5hbWVzIjpbIlJwY0NsaWVudCIsInNldENvbW11bmljYXRpb25Qcm90b2NvbCIsImlzVGFyZ2V0QmFzZWQiLCJsb2ciLCJ3YXJuIiwicmVtb3RlTWVzc2FnZXMiLCJSZW1vdGVNZXNzYWdlcyIsInNlbmQiLCJjb21tYW5kIiwib3B0cyIsInNlbmRNZXNzYWdlIiwiZXJyIiwibWVzc2FnZSIsImluY2x1ZGVzIiwiRXJyb3IiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBR2UsTUFBTUEsU0FBTixDQUFnQjtBQUM3QkMsRUFBQUEsd0JBQXdCLENBQUVDLGFBQWEsR0FBRyxLQUFsQixFQUF5QjtBQUMvQ0Msb0JBQUlDLElBQUosQ0FBVSx5Q0FBd0NGLGFBQWEsR0FBRyxjQUFILEdBQW9CLDZCQUE4QixnQkFBakg7O0FBQ0EsU0FBS0EsYUFBTCxHQUFxQkEsYUFBckI7O0FBRUEsUUFBSSxDQUFDLEtBQUtHLGNBQVYsRUFBMEI7QUFDeEIsV0FBS0EsY0FBTCxHQUFzQixJQUFJQyx1QkFBSixDQUFtQkosYUFBbkIsQ0FBdEI7QUFDRCxLQUZELE1BRU87QUFDTCxXQUFLRyxjQUFMLENBQW9CSix3QkFBcEIsQ0FBNkNDLGFBQTdDO0FBQ0Q7QUFDRjs7QUFFRCxRQUFNSyxJQUFOLENBQVlDLE9BQVosRUFBcUJDLElBQUksR0FBRyxFQUE1QixFQUFnQztBQUM5QixRQUFJO0FBQ0YsYUFBTyxNQUFNLEtBQUtDLFdBQUwsQ0FBaUJGLE9BQWpCLEVBQTBCQyxJQUExQixDQUFiO0FBQ0QsS0FGRCxDQUVFLE9BQU9FLEdBQVAsRUFBWTtBQUNaLFVBQUlBLEdBQUcsQ0FBQ0MsT0FBSixDQUFZQyxRQUFaLENBQXNCLCtCQUF0QixDQUFKLEVBQTJEO0FBQ3pELGFBQUtaLHdCQUFMLENBQThCLEtBQTlCO0FBQ0EsZUFBTyxNQUFNLEtBQUtTLFdBQUwsQ0FBaUJGLE9BQWpCLEVBQTBCQyxJQUExQixDQUFiO0FBQ0QsT0FIRCxNQUdPLElBQUlFLEdBQUcsQ0FBQ0MsT0FBSixDQUFZQyxRQUFaLENBQXNCLHNCQUF0QixDQUFKLEVBQWtEO0FBQ3ZELGFBQUtaLHdCQUFMLENBQThCLElBQTlCO0FBQ0EsZUFBTyxNQUFNLEtBQUtTLFdBQUwsQ0FBaUJGLE9BQWpCLEVBQTBCQyxJQUExQixDQUFiO0FBQ0Q7O0FBQ0QsWUFBTUUsR0FBTjtBQUNEO0FBQ0Y7O0FBRUQsUUFBTUQsV0FBTixHQUE2QztBQUMzQyxVQUFNLElBQUlJLEtBQUosQ0FBVyx3REFBWCxDQUFOO0FBQ0Q7O0FBN0I0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IFJlbW90ZU1lc3NhZ2VzIGZyb20gJy4vcmVtb3RlLW1lc3NhZ2VzJztcblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBScGNDbGllbnQge1xuICBzZXRDb21tdW5pY2F0aW9uUHJvdG9jb2wgKGlzVGFyZ2V0QmFzZWQgPSBmYWxzZSkge1xuICAgIGxvZy53YXJuKGBTZXR0aW5nIGNvbW11bmljYXRpb24gcHJvdG9jb2w6IHVzaW5nICR7aXNUYXJnZXRCYXNlZCA/ICdUYXJnZXQtYmFzZWQnIDogJ2Z1bGwgV2ViIEluc3BlY3RvciBwcm90b2NvbCd9IGNvbW11bmljYXRpb25gKTtcbiAgICB0aGlzLmlzVGFyZ2V0QmFzZWQgPSBpc1RhcmdldEJhc2VkO1xuXG4gICAgaWYgKCF0aGlzLnJlbW90ZU1lc3NhZ2VzKSB7XG4gICAgICB0aGlzLnJlbW90ZU1lc3NhZ2VzID0gbmV3IFJlbW90ZU1lc3NhZ2VzKGlzVGFyZ2V0QmFzZWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbW90ZU1lc3NhZ2VzLnNldENvbW11bmljYXRpb25Qcm90b2NvbChpc1RhcmdldEJhc2VkKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBzZW5kIChjb21tYW5kLCBvcHRzID0ge30pIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuc2VuZE1lc3NhZ2UoY29tbWFuZCwgb3B0cyk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAoZXJyLm1lc3NhZ2UuaW5jbHVkZXMoYCdUYXJnZXQnIGRvbWFpbiB3YXMgbm90IGZvdW5kYCkpIHtcbiAgICAgICAgdGhpcy5zZXRDb21tdW5pY2F0aW9uUHJvdG9jb2woZmFsc2UpO1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5zZW5kTWVzc2FnZShjb21tYW5kLCBvcHRzKTtcbiAgICAgIH0gZWxzZSBpZiAoZXJyLm1lc3NhZ2UuaW5jbHVkZXMoYGRvbWFpbiB3YXMgbm90IGZvdW5kYCkpIHtcbiAgICAgICAgdGhpcy5zZXRDb21tdW5pY2F0aW9uUHJvdG9jb2wodHJ1ZSk7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnNlbmRNZXNzYWdlKGNvbW1hbmQsIG9wdHMpO1xuICAgICAgfVxuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHNlbmRNZXNzYWdlICgvKiBjb21tYW5kLCBvcHRzID0ge30gKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWF3YWl0XG4gICAgdGhyb3cgbmV3IEVycm9yKGBTdWItY2xhc3NlcyBuZWVkIHRvIGltcGxlbWVudCBhICdzZW5kTWVzc2FnZScgZnVuY3Rpb25gKTtcbiAgfVxufVxuIl0sImZpbGUiOiJsaWIvcnBjLWNsaWVudC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
