"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("../logger.js"));

var _helpers = require("../helpers.js");

var _appiumSupport = require("appium-support");

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _xmldom = _interopRequireDefault(require("xmldom"));

var _xpath = _interopRequireDefault(require("xpath"));

var _shellQuote = require("shell-quote");

let manifestMethods = {};

manifestMethods.processFromManifest = function () {
  var _processFromManifest = (0, _asyncToGenerator2.default)(function* (localApk) {
    yield this.initAapt();

    _logger.default.info('Retrieving process from manifest');

    let args = ['dump', 'xmltree', localApk, 'AndroidManifest.xml'];

    let _ref = yield (0, _teen_process.exec)(this.binaries.aapt, args),
        stdout = _ref.stdout;

    let result = null;
    let lines = stdout.split('\n');
    let applicationRegex = new RegExp(/\s+E: application \(line=\d+\).*/);
    let applicationFound = false;
    let attributeRegex = new RegExp(/\s+A: .+/);
    let processRegex = new RegExp(/\s+A: android:process\(0x01010011\)="([^"]+).*"/);
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = lines[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        let line = _step.value;

        if (!applicationFound) {
          if (applicationRegex.test(line)) {
            applicationFound = true;
          }
        } else {
          let notAttribute = !attributeRegex.test(line);

          if (notAttribute) {
            break;
          }

          let process = processRegex.exec(line);

          if (process && process.length > 1) {
            result = process[1];

            if (result.length > 15) {
              result = result.substr(result.length - 15);
            }

            break;
          }
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return result;
  });

  return function processFromManifest(_x) {
    return _processFromManifest.apply(this, arguments);
  };
}();

function extractApkInfoWithApkTools(_x2, _x3, _x4, _x5) {
  return _extractApkInfoWithApkTools.apply(this, arguments);
}

function _extractApkInfoWithApkTools() {
  _extractApkInfoWithApkTools = (0, _asyncToGenerator2.default)(function* (localApk, aaptPath, jarPath, tmpRoot) {
    _logger.default.info('Extracting package and launch activity from manifest');

    let args = ['dump', 'badging', localApk];
    let stdout = (yield (0, _teen_process.exec)(aaptPath, args)).stdout;
    let apkPackage = new RegExp(/package: name='([^']+)'/g).exec(stdout);

    if (!apkPackage || apkPackage.length < 2) {
      throw new Error(`Cannot parse package name from ` + `'${_lodash.default.join([aaptPath, 'dump', 'badging', '"' + localApk + '"'], ' ')}' command  output`);
    }

    apkPackage = apkPackage[1];
    let apkActivity = new RegExp(/launchable-activity: name='([^']+)'/g).exec(stdout);

    if (apkActivity && apkActivity.length >= 2) {
      apkActivity = apkActivity[1];
      return {
        apkPackage,
        apkActivity
      };
    }

    let outputPath = _path.default.resolve(tmpRoot, apkPackage);

    let getLaunchActivity = ['-jar', jarPath, 'printLaunchActivity', localApk, outputPath];
    const output = yield (0, _teen_process.exec)('java', getLaunchActivity);

    if (output.stderr) {
      throw new Error(`Cannot parse launchActivity from manifest: ${output.stderr}`);
    }

    stdout = output.stdout;
    let act = new RegExp(/Launch activity parsed:([^']+)/g).exec(stdout);

    if (act && act.length >= 2) {
      apkActivity = act[1];
      return {
        apkPackage,
        apkActivity
      };
    }

    throw new Error(`Cannot parse main activity name from '${stdout}' command  output`);
  });
  return _extractApkInfoWithApkTools.apply(this, arguments);
}

function extractApkInfoWithApkanalyzer(_x6, _x7) {
  return _extractApkInfoWithApkanalyzer.apply(this, arguments);
}

function _extractApkInfoWithApkanalyzer() {
  _extractApkInfoWithApkanalyzer = (0, _asyncToGenerator2.default)(function* (localApk, apkanalyzerPath) {
    const args = ['-h', 'manifest', 'print', localApk];

    _logger.default.debug(`Starting '${apkanalyzerPath}' with args ${JSON.stringify(args)}`);

    const manifestXml = (yield (0, _teen_process.exec)(apkanalyzerPath, args, {
      shell: true,
      cwd: _path.default.dirname(apkanalyzerPath)
    })).stdout;
    const doc = new _xmldom.default.DOMParser().parseFromString(manifestXml);

    const apkPackageAttribute = _xpath.default.select1('//manifest/@package', doc);

    if (!apkPackageAttribute) {
      throw new Error(`Cannot parse package name from ${manifestXml}`);
    }

    const apkPackage = apkPackageAttribute.value;

    const apkActivityAttribute = _xpath.default.select1("//application/*[starts-with(name(), 'activity') " + "and .//action[@*[local-name()='name' and .='android.intent.action.MAIN']] " + "and .//category[@*[local-name()='name' and .='android.intent.category.LAUNCHER']]]" + "/@*[local-name()='name']", doc);

    if (!apkActivityAttribute) {
      throw new Error(`Cannot parse main activity name from ${manifestXml}`);
    }

    const apkActivity = apkActivityAttribute.value;
    return {
      apkPackage,
      apkActivity
    };
  });
  return _extractApkInfoWithApkanalyzer.apply(this, arguments);
}

manifestMethods.packageAndLaunchActivityFromManifest = function () {
  var _packageAndLaunchActivityFromManifest = (0, _asyncToGenerator2.default)(function* (appPath) {
    var _this = this;

    if (appPath.endsWith(_helpers.APKS_EXTENSION)) {
      appPath = yield this.extractBaseApk(appPath);
    }

    const apkInfoGetters = [(0, _asyncToGenerator2.default)(function* () {
      const apkanalyzerPath = yield (0, _helpers.getApkanalyzerForOs)(_this);
      return yield extractApkInfoWithApkanalyzer(appPath, apkanalyzerPath);
    }), (0, _asyncToGenerator2.default)(function* () {
      yield _this.initAapt();
      return yield extractApkInfoWithApkTools(appPath, _this.binaries.aapt, _this.jars['appium_apk_tools.jar'], _this.tmpDir);
    })];
    let savedError;

    for (var _i = 0; _i < apkInfoGetters.length; _i++) {
      const infoGetter = apkInfoGetters[_i];

      try {
        const _ref4 = yield infoGetter(),
              apkPackage = _ref4.apkPackage,
              apkActivity = _ref4.apkActivity;

        _logger.default.info(`Package name: '${apkPackage}'`);

        _logger.default.info(`Main activity name: '${apkActivity}'`);

        return {
          apkPackage,
          apkActivity
        };
      } catch (e) {
        if (infoGetter !== _lodash.default.last(apkInfoGetters)) {
          _logger.default.info(`Using the alternative activity name detection method because of: ${e.message}`);
        }

        savedError = e;
      }
    }

    throw new Error(`packageAndLaunchActivityFromManifest failed. Original error: ${savedError.message}` + (savedError.stderr ? `; StdErr: ${savedError.stderr}` : ''));
  });

  return function packageAndLaunchActivityFromManifest(_x8) {
    return _packageAndLaunchActivityFromManifest.apply(this, arguments);
  };
}();

manifestMethods.targetSdkVersionFromManifest = function () {
  var _targetSdkVersionFromManifest = (0, _asyncToGenerator2.default)(function* (appPath) {
    yield this.initAapt();

    if (appPath.endsWith(_helpers.APKS_EXTENSION)) {
      appPath = yield this.extractBaseApk(appPath);
    }

    _logger.default.info('Extracting package and launch activity from manifest');

    let args = ['dump', 'badging', appPath];
    let output;

    try {
      let _ref5 = yield (0, _teen_process.exec)(this.binaries.aapt, args),
          stdout = _ref5.stdout;

      output = stdout;
    } catch (e) {
      throw new Error(`fetching targetSdkVersion from local APK failed. Original error: ${e.message}`);
    }

    let targetSdkVersion = new RegExp(/targetSdkVersion:'([^']+)'/g).exec(output);

    if (!targetSdkVersion) {
      throw new Error(`targetSdkVersion is not specified in the application.`);
    }

    return parseInt(targetSdkVersion[1], 10);
  });

  return function targetSdkVersionFromManifest(_x9) {
    return _targetSdkVersionFromManifest.apply(this, arguments);
  };
}();

manifestMethods.targetSdkVersionUsingPKG = function () {
  var _targetSdkVersionUsingPKG = (0, _asyncToGenerator2.default)(function* (pkg, cmdOutput = null) {
    let stdout = cmdOutput || (yield this.shell(['dumpsys', 'package', pkg]));
    let targetSdkVersion = new RegExp(/targetSdk=([^\s\s]+)/g).exec(stdout);

    if (targetSdkVersion && targetSdkVersion.length >= 2) {
      targetSdkVersion = targetSdkVersion[1];
    } else {
      targetSdkVersion = 0;
    }

    return parseInt(targetSdkVersion, 10);
  });

  return function targetSdkVersionUsingPKG(_x10) {
    return _targetSdkVersionUsingPKG.apply(this, arguments);
  };
}();

manifestMethods.compileManifest = function () {
  var _compileManifest = (0, _asyncToGenerator2.default)(function* (manifest, manifestPackage, targetPackage) {
    const _ref6 = yield (0, _helpers.getAndroidPlatformAndPath)(),
          platform = _ref6.platform,
          platformPath = _ref6.platformPath;

    if (!platform) {
      throw new Error('Cannot compile the manifest. The required platform does not exist (API level >= 17)');
    }

    const resultPath = `${manifest}.apk`;
    const args = ['package', '-M', manifest, '--rename-manifest-package', manifestPackage, '--rename-instrumentation-target-package', targetPackage, '-I', _path.default.resolve(platformPath, 'android.jar'), '-F', resultPath, '-f'];

    try {
      yield this.initAapt();

      _logger.default.debug(`Compiling the manifest: ${this.binaries.aapt} ${(0, _shellQuote.quote)(args)}`);

      yield (0, _teen_process.exec)(this.binaries.aapt, args);

      _logger.default.debug(`Compiled the manifest at '${resultPath}'`);
    } catch (err) {
      throw new Error(`Cannot compile the manifest. Original error: ${err.message}`);
    }
  });

  return function compileManifest(_x11, _x12, _x13) {
    return _compileManifest.apply(this, arguments);
  };
}();

manifestMethods.insertManifest = function () {
  var _insertManifest = (0, _asyncToGenerator2.default)(function* (manifest, srcApk, dstApk) {
    _logger.default.debug(`Inserting manifest, src: ${srcApk} dst: ${dstApk}`);

    yield this.initAapt();
    yield (0, _helpers.unzipFile)(`${manifest}.apk`);
    yield _appiumSupport.fs.copyFile(srcApk, dstApk);

    _logger.default.debug('Testing new tmp apk');

    yield _appiumSupport.zip.assertValidZip(dstApk);

    _logger.default.debug('Moving manifest');

    try {
      yield (0, _teen_process.exec)(this.binaries.aapt, ['remove', dstApk, _path.default.basename(manifest)]);
    } catch (ign) {}

    yield (0, _teen_process.exec)(this.binaries.aapt, ['add', dstApk, _path.default.basename(manifest)], {
      cwd: _path.default.dirname(manifest)
    });

    _logger.default.debug('Inserted manifest.');
  });

  return function insertManifest(_x14, _x15, _x16) {
    return _insertManifest.apply(this, arguments);
  };
}();

manifestMethods.hasInternetPermissionFromManifest = function () {
  var _hasInternetPermissionFromManifest = (0, _asyncToGenerator2.default)(function* (appPath) {
    yield this.initAapt();

    if (appPath.endsWith(_helpers.APKS_EXTENSION)) {
      appPath = yield this.extractBaseApk(appPath);
    }

    _logger.default.debug(`Checking if '${appPath}' requires internet access permission in the manifest`);

    try {
      let _ref7 = yield (0, _teen_process.exec)(this.binaries.aapt, ['dump', 'badging', appPath]),
          stdout = _ref7.stdout;

      return new RegExp(/uses-permission:.*'android.permission.INTERNET'/).test(stdout);
    } catch (e) {
      throw new Error(`Cannot check if '${appPath}' requires internet access permission. ` + `Original error: ${e.message}`);
    }
  });

  return function hasInternetPermissionFromManifest(_x17) {
    return _hasInternetPermissionFromManifest.apply(this, arguments);
  };
}();

manifestMethods.printManifestFromApk = function () {
  var _printManifestFromApk = (0, _asyncToGenerator2.default)(function* (appPath, logLevel = 'debug') {
    yield this.initAapt();

    if (appPath.endsWith(_helpers.APKS_EXTENSION)) {
      appPath = yield this.extractBaseApk(appPath);
    }

    _logger.default[logLevel](`Extracting the manifest from '${appPath}'`);

    let out = false;

    const _ref8 = yield (0, _teen_process.exec)(this.binaries.aapt, ['l', '-a', appPath]),
          stdout = _ref8.stdout;

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = stdout.split('\n')[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        const line = _step2.value;

        if (!out && line.includes('Android manifest:')) {
          out = true;
        }

        if (out) {
          _logger.default[logLevel](line);
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  });

  return function printManifestFromApk(_x18) {
    return _printManifestFromApk.apply(this, arguments);
  };
}();

var _default = manifestMethods;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
