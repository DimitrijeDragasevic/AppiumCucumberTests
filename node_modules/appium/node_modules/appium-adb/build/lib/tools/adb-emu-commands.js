"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _logger = _interopRequireDefault(require("../logger.js"));

var _lodash = _interopRequireDefault(require("lodash"));

const PHONE_NUMBER_PATTERN = /^[+]?[(]?[0-9]*[)]?[-\s.]?[0-9]*[-\s.]?[0-9]{2,}$/im;
let emuMethods = {};
emuMethods.POWER_AC_STATES = {
  POWER_AC_ON: 'on',
  POWER_AC_OFF: 'off'
};
emuMethods.GSM_CALL_ACTIONS = {
  GSM_CALL: 'call',
  GSM_ACCEPT: 'accept',
  GSM_CANCEL: 'cancel',
  GSM_HOLD: 'hold'
};
emuMethods.GSM_VOICE_STATES = {
  GSM_VOICE_UNREGISTERED: 'unregistered',
  GSM_VOICE_HOME: 'home',
  GSM_VOICE_ROAMING: 'roaming',
  GSM_VOICE_SEARCHING: 'searching',
  GSM_VOICE_DENIED: 'denied',
  GSM_VOICE_OFF: 'off',
  GSM_VOICE_ON: 'on'
};
emuMethods.GSM_SIGNAL_STRENGTHS = [0, 1, 2, 3, 4];
emuMethods.NETWORK_SPEED = {
  GSM: 'gsm',
  SCSD: 'scsd',
  GPRS: 'gprs',
  EDGE: 'edge',
  UMTS: 'umts',
  HSDPA: 'hsdpa',
  LTE: 'lte',
  EVDO: 'evdo',
  FULL: 'full'
};

emuMethods.isEmulatorConnected = function () {
  var _isEmulatorConnected = (0, _asyncToGenerator2.default)(function* () {
    let emulators = yield this.getConnectedEmulators();
    return !!_lodash.default.find(emulators, x => x && x.udid === this.curDeviceId);
  });

  return function isEmulatorConnected() {
    return _isEmulatorConnected.apply(this, arguments);
  };
}();

emuMethods.verifyEmulatorConnected = function () {
  var _verifyEmulatorConnected = (0, _asyncToGenerator2.default)(function* () {
    if (!(yield this.isEmulatorConnected())) {
      throw new Error(`The emulator "${this.curDeviceId}" was unexpectedly disconnected`);
    }
  });

  return function verifyEmulatorConnected() {
    return _verifyEmulatorConnected.apply(this, arguments);
  };
}();

emuMethods.fingerprint = function () {
  var _fingerprint = (0, _asyncToGenerator2.default)(function* (fingerprintId) {
    if (!fingerprintId) {
      throw new Error('Fingerprint id parameter must be defined');
    }

    let level = yield this.getApiLevel();

    if (level < 23) {
      throw new Error(`Device API Level must be >= 23. Current Api level '${level}'`);
    }

    yield this.adbExecEmu(['finger', 'touch', fingerprintId]);
  });

  return function fingerprint(_x) {
    return _fingerprint.apply(this, arguments);
  };
}();

emuMethods.rotate = function () {
  var _rotate = (0, _asyncToGenerator2.default)(function* () {
    yield this.adbExecEmu(['rotate']);
  });

  return function rotate() {
    return _rotate.apply(this, arguments);
  };
}();

emuMethods.powerAC = function () {
  var _powerAC = (0, _asyncToGenerator2.default)(function* (state = 'on') {
    if (_lodash.default.values(emuMethods.POWER_AC_STATES).indexOf(state) === -1) {
      throw new Error(`Wrong power AC state sent '${state}'. Supported values: ${_lodash.default.values(emuMethods.POWER_AC_STATES)}]`);
    }

    yield this.adbExecEmu(['power', 'ac', state]);
  });

  return function powerAC() {
    return _powerAC.apply(this, arguments);
  };
}();

emuMethods.powerCapacity = function () {
  var _powerCapacity = (0, _asyncToGenerator2.default)(function* (percent = 100) {
    percent = parseInt(percent, 10);

    if (isNaN(percent) || percent < 0 || percent > 100) {
      throw new Error(`The percentage value should be valid integer between 0 and 100`);
    }

    yield this.adbExecEmu(['power', 'capacity', percent]);
  });

  return function powerCapacity() {
    return _powerCapacity.apply(this, arguments);
  };
}();

emuMethods.powerOFF = function () {
  var _powerOFF = (0, _asyncToGenerator2.default)(function* () {
    yield this.powerAC(emuMethods.POWER_AC_STATES.POWER_AC_OFF);
    yield this.powerCapacity(0);
  });

  return function powerOFF() {
    return _powerOFF.apply(this, arguments);
  };
}();

emuMethods.sendSMS = function () {
  var _sendSMS = (0, _asyncToGenerator2.default)(function* (phoneNumber, message = '') {
    message = message.trim();

    if (message === '') {
      throw new Error('Sending an SMS requires a message');
    }

    phoneNumber = `${phoneNumber}`.replace(/\s*/, '');

    if (!PHONE_NUMBER_PATTERN.test(phoneNumber)) {
      throw new Error(`Invalid sendSMS phoneNumber param ${phoneNumber}`);
    }

    yield this.adbExecEmu(['sms', 'send', phoneNumber, message]);
  });

  return function sendSMS(_x2) {
    return _sendSMS.apply(this, arguments);
  };
}();

emuMethods.gsmCall = function () {
  var _gsmCall = (0, _asyncToGenerator2.default)(function* (phoneNumber, action = '') {
    if (_lodash.default.values(emuMethods.GSM_CALL_ACTIONS).indexOf(action) === -1) {
      throw new Error(`Invalid gsm action param ${action}. Supported values: ${_lodash.default.values(emuMethods.GSM_CALL_ACTIONS)}`);
    }

    phoneNumber = `${phoneNumber}`.replace(/\s*/, '');

    if (!PHONE_NUMBER_PATTERN.test(phoneNumber)) {
      throw new Error(`Invalid gsmCall phoneNumber param ${phoneNumber}`);
    }

    yield this.adbExecEmu(['gsm', action, phoneNumber]);
  });

  return function gsmCall(_x3) {
    return _gsmCall.apply(this, arguments);
  };
}();

emuMethods.gsmSignal = function () {
  var _gsmSignal = (0, _asyncToGenerator2.default)(function* (strength = 4) {
    strength = parseInt(strength, 10);

    if (emuMethods.GSM_SIGNAL_STRENGTHS.indexOf(strength) === -1) {
      throw new Error(`Invalid signal strength param ${strength}. Supported values: ${_lodash.default.values(emuMethods.GSM_SIGNAL_STRENGTHS)}`);
    }

    _logger.default.info('gsm signal-profile <strength> changes the reported strength on next (15s) update.');

    yield this.adbExecEmu(['gsm', 'signal-profile', strength]);
  });

  return function gsmSignal() {
    return _gsmSignal.apply(this, arguments);
  };
}();

emuMethods.gsmVoice = function () {
  var _gsmVoice = (0, _asyncToGenerator2.default)(function* (state = 'on') {
    if (_lodash.default.values(emuMethods.GSM_VOICE_STATES).indexOf(state) === -1) {
      throw new Error(`Invalid gsm voice state param ${state}. Supported values: ${_lodash.default.values(emuMethods.GSM_VOICE_STATES)}`);
    }

    yield this.adbExecEmu(['gsm', 'voice', state]);
  });

  return function gsmVoice() {
    return _gsmVoice.apply(this, arguments);
  };
}();

emuMethods.networkSpeed = function () {
  var _networkSpeed = (0, _asyncToGenerator2.default)(function* (speed = 'full') {
    if (_lodash.default.values(emuMethods.NETWORK_SPEED).indexOf(speed) === -1) {
      throw new Error(`Invalid network speed param ${speed}. Supported values: ${_lodash.default.values(emuMethods.NETWORK_SPEED)}`);
    }

    yield this.adbExecEmu(['network', 'speed', speed]);
  });

  return function networkSpeed() {
    return _networkSpeed.apply(this, arguments);
  };
}();

var _default = emuMethods;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
