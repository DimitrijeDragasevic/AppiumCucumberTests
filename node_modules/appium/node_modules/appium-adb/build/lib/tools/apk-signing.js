"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _fs2 = _interopRequireDefault(require("fs"));

var _teen_process = require("teen_process");

var _path = _interopRequireDefault(require("path"));

var _logger = _interopRequireDefault(require("../logger.js"));

var _appiumSupport = require("appium-support");

var _helpers = require("../helpers.js");

const DEFAULT_PRIVATE_KEY = _path.default.resolve(_helpers.rootDir, 'keys', 'testkey.pk8');

const DEFAULT_CERTIFICATE = _path.default.resolve(_helpers.rootDir, 'keys', 'testkey.x509.pem');

const DEFAULT_CERT_DIGEST = 'a40da80a59d170caa950cf15c18c454d47a39b26989d8b640ecd745ba71bf5dc';
const BUNDLETOOL_TUTORIAL = 'https://developer.android.com/studio/command-line/bundletool';
const APKSIGNER_VERIFY_FAIL = 'DOES NOT VERIFY';
let apkSigningMethods = {};

function patchApksigner(_x) {
  return _patchApksigner.apply(this, arguments);
}

function _patchApksigner() {
  _patchApksigner = (0, _asyncToGenerator2.default)(function* (originalPath) {
    const originalContent = yield _appiumSupport.fs.readFile(originalPath, 'ascii');
    const patchedContent = originalContent.replace('-Djava.ext.dirs="%frameworkdir%"', '-cp "%frameworkdir%\\*"');

    if (patchedContent === originalContent) {
      return originalPath;
    }

    _logger.default.debug(`Patching '${originalPath}...`);

    const patchedPath = yield _appiumSupport.tempDir.path({
      prefix: 'apksigner',
      suffix: '.bat'
    });
    yield (0, _appiumSupport.mkdirp)(_path.default.dirname(patchedPath));
    yield _appiumSupport.fs.writeFile(patchedPath, patchedContent, 'ascii');
    return patchedPath;
  });
  return _patchApksigner.apply(this, arguments);
}

apkSigningMethods.executeApksigner = function () {
  var _executeApksigner = (0, _asyncToGenerator2.default)(function* (args = []) {
    const apkSigner = yield (0, _helpers.getApksignerForOs)(this);

    const originalFolder = _path.default.dirname(apkSigner);

    const getApksignerOutput = function () {
      var _ref = (0, _asyncToGenerator2.default)(function* (apksignerPath) {
        let binaryPath = apksignerPath;

        if (_appiumSupport.system.isWindows() && _appiumSupport.util.isSubPath(binaryPath, originalFolder)) {
          binaryPath = _path.default.basename(binaryPath);
        }

        const _ref2 = yield (0, _teen_process.exec)(binaryPath, args, {
          cwd: originalFolder
        }),
              stdout = _ref2.stdout,
              stderr = _ref2.stderr;

        var _arr = [['stdout', stdout], ['stderr', stderr]];

        for (var _i = 0; _i < _arr.length; _i++) {
          let _arr$_i = (0, _slicedToArray2.default)(_arr[_i], 2),
              name = _arr$_i[0],
              stream = _arr$_i[1];

          if (!stream) {
            continue;
          }

          if (name === 'stdout') {
            stream = stream.split('\n').filter(line => !line.includes('WARNING:')).join('\n');
          }

          _logger.default.debug(`apksigner ${name}: ${stream}`);
        }

        return stdout;
      });

      return function getApksignerOutput(_x2) {
        return _ref.apply(this, arguments);
      };
    }();

    _logger.default.debug(`Starting '${apkSigner}' with args '${JSON.stringify(args)}'`);

    try {
      return yield getApksignerOutput(apkSigner);
    } catch (err) {
      _logger.default.warn(`Got an error during apksigner execution: ${err.message}`);

      var _arr2 = [['stdout', err.stdout], ['stderr', err.stderr]];

      for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
        const _arr2$_i = (0, _slicedToArray2.default)(_arr2[_i2], 2),
              name = _arr2$_i[0],
              stream = _arr2$_i[1];

        if (stream) {
          _logger.default.warn(`apksigner ${name}: ${stream}`);
        }
      }

      if (_appiumSupport.system.isWindows()) {
        const patchedApksigner = yield patchApksigner(apkSigner);

        if (patchedApksigner !== apkSigner) {
          try {
            return yield getApksignerOutput(patchedApksigner);
          } finally {
            yield _appiumSupport.fs.unlink(patchedApksigner);
          }
        }
      }

      throw err;
    }
  });

  return function executeApksigner() {
    return _executeApksigner.apply(this, arguments);
  };
}();

apkSigningMethods.signWithDefaultCert = function () {
  var _signWithDefaultCert = (0, _asyncToGenerator2.default)(function* (apk) {
    _logger.default.debug(`Signing '${apk}' with default cert`);

    if (!(yield _appiumSupport.fs.exists(apk))) {
      throw new Error(`${apk} file doesn't exist.`);
    }

    try {
      const args = ['sign', '--key', DEFAULT_PRIVATE_KEY, '--cert', DEFAULT_CERTIFICATE, apk];
      yield this.executeApksigner(args);
    } catch (err) {
      _logger.default.warn(`Cannot use apksigner tool for signing. Defaulting to sign.jar. ` + `Original error: ${err.message}` + (err.stderr ? `; StdErr: ${err.stderr}` : ''));

      const java = (0, _helpers.getJavaForOs)();

      const signPath = _path.default.resolve(this.helperJarPath, 'sign.jar');

      _logger.default.debug('Resigning apk.');

      try {
        yield (0, _teen_process.exec)(java, ['-jar', signPath, apk, '--override']);
      } catch (e) {
        throw new Error(`Could not sign with default certificate. Original error ${e.message}`);
      }
    }
  });

  return function signWithDefaultCert(_x3) {
    return _signWithDefaultCert.apply(this, arguments);
  };
}();

apkSigningMethods.signWithCustomCert = function () {
  var _signWithCustomCert = (0, _asyncToGenerator2.default)(function* (apk) {
    _logger.default.debug(`Signing '${apk}' with custom cert`);

    if (!(yield _appiumSupport.fs.exists(this.keystorePath))) {
      throw new Error(`Keystore: ${this.keystorePath} doesn't exist.`);
    }

    if (!(yield _appiumSupport.fs.exists(apk))) {
      throw new Error(`'${apk}' doesn't exist.`);
    }

    try {
      const args = ['sign', '--ks', this.keystorePath, '--ks-key-alias', this.keyAlias, '--ks-pass', `pass:${this.keystorePassword}`, '--key-pass', `pass:${this.keyPassword}`, apk];
      yield this.executeApksigner(args);
    } catch (err) {
      _logger.default.warn(`Cannot use apksigner tool for signing. Defaulting to jarsigner. ` + `Original error: ${err.message}`);

      try {
        _logger.default.debug('Unsigning apk.');

        yield (0, _teen_process.exec)((0, _helpers.getJavaForOs)(), ['-jar', _path.default.resolve(this.helperJarPath, 'unsign.jar'), apk]);

        _logger.default.debug('Signing apk.');

        const jarsigner = _path.default.resolve((0, _helpers.getJavaHome)(), 'bin', `jarsigner${_appiumSupport.system.isWindows() ? '.exe' : ''}`);

        yield (0, _teen_process.exec)(jarsigner, ['-sigalg', 'MD5withRSA', '-digestalg', 'SHA1', '-keystore', this.keystorePath, '-storepass', this.keystorePassword, '-keypass', this.keyPassword, apk, this.keyAlias]);
      } catch (e) {
        throw new Error(`Could not sign with custom certificate. Original error ${e.message}`);
      }
    }
  });

  return function signWithCustomCert(_x4) {
    return _signWithCustomCert.apply(this, arguments);
  };
}();

apkSigningMethods.sign = function () {
  var _sign = (0, _asyncToGenerator2.default)(function* (appPath) {
    if (appPath.endsWith(_helpers.APKS_EXTENSION)) {
      let message = 'Signing of .apks-files is not supported. ';

      if (this.useKeystore) {
        message += 'Consider manual application bundle signing with the custom keystore ' + `like it is described at ${BUNDLETOOL_TUTORIAL}`;
      } else {
        message += `Consider manual application bundle signing with the key at '${DEFAULT_PRIVATE_KEY}' ` + `and the certificate at '${DEFAULT_CERTIFICATE}'. Read ${BUNDLETOOL_TUTORIAL} for more details.`;
      }

      _logger.default.warn(message);

      return;
    }

    let apksignerFound = true;

    try {
      yield (0, _helpers.getApksignerForOs)(this);
    } catch (err) {
      apksignerFound = false;
    }

    if (apksignerFound) {
      yield this.zipAlignApk(appPath);
    }

    if (this.useKeystore) {
      yield this.signWithCustomCert(appPath);
    } else {
      yield this.signWithDefaultCert(appPath);
    }

    if (!apksignerFound) {
      yield this.zipAlignApk(appPath);
    }
  });

  return function sign(_x5) {
    return _sign.apply(this, arguments);
  };
}();

apkSigningMethods.zipAlignApk = function () {
  var _zipAlignApk = (0, _asyncToGenerator2.default)(function* (apk) {
    yield this.initZipAlign();

    try {
      yield (0, _teen_process.exec)(this.binaries.zipalign, ['-c', '4', apk]);

      _logger.default.debug(`${apk}' is already zip-aligned. Doing nothing`);

      return false;
    } catch (e) {
      _logger.default.debug(`'${apk}' is not zip-aligned. Aligning`);
    }

    try {
      yield _appiumSupport.fs.access(apk, _fs2.default.W_OK);
    } catch (e) {
      throw new Error(`The file at '${apk}' is not writeable. ` + `Please grant write permissions to this file or to its parent folder '${_path.default.dirname(apk)}' ` + `for the Appium process, so it can zip-align the file`);
    }

    const alignedApk = yield _appiumSupport.tempDir.path({
      prefix: 'appium',
      suffix: '.tmp'
    });
    yield (0, _appiumSupport.mkdirp)(_path.default.dirname(alignedApk));

    try {
      yield (0, _teen_process.exec)(this.binaries.zipalign, ['-f', '4', apk, alignedApk]);
      yield _appiumSupport.fs.mv(alignedApk, apk, {
        mkdirp: true
      });
      return true;
    } catch (e) {
      if (yield _appiumSupport.fs.exists(alignedApk)) {
        yield _appiumSupport.fs.unlink(alignedApk);
      }

      throw new Error(`zipAlignApk failed. Original error: ${e.message}. Stdout: '${e.stdout}'; Stderr: '${e.stderr}'`);
    }
  });

  return function zipAlignApk(_x6) {
    return _zipAlignApk.apply(this, arguments);
  };
}();

apkSigningMethods.checkApkCert = function () {
  var _checkApkCert = (0, _asyncToGenerator2.default)(function* (appPath, pkg) {
    _logger.default.debug(`Checking app cert for ${appPath}`);

    if (!(yield _appiumSupport.fs.exists(appPath))) {
      _logger.default.debug(`'${appPath}' does not exist`);

      return false;
    }

    if (this.useKeystore) {
      return yield this.checkCustomApkCert(appPath, pkg);
    }

    if (_path.default.extname(appPath) === _helpers.APKS_EXTENSION) {
      appPath = yield this.extractBaseApk(appPath);
    }

    try {
      yield (0, _helpers.getApksignerForOs)(this);
      const output = yield this.executeApksigner(['verify', '--print-certs', appPath]);

      if (!_lodash.default.includes(output, DEFAULT_CERT_DIGEST)) {
        _logger.default.debug(`'${appPath}' is signed with non-default certificate`);

        return false;
      }

      _logger.default.debug(`'${appPath}' is already signed.`);

      return true;
    } catch (err) {
      if (err.stderr && err.stderr.includes(APKSIGNER_VERIFY_FAIL)) {
        _logger.default.debug(`'${appPath}' is not signed with debug cert`);

        return false;
      }

      _logger.default.warn(`Cannot use apksigner tool for signature verification. ` + `Original error: ${err.message}`);
    }

    try {
      _logger.default.debug(`Defaulting to verify.jar`);

      yield (0, _teen_process.exec)((0, _helpers.getJavaForOs)(), ['-jar', _path.default.resolve(this.helperJarPath, 'verify.jar'), appPath]);

      _logger.default.debug(`'${appPath}' is already signed.`);

      return true;
    } catch (err) {
      _logger.default.debug(`'${appPath}' is not signed with debug cert${err.stderr ? `: ${err.stderr}` : ''}`);

      return false;
    }
  });

  return function checkApkCert(_x7, _x8) {
    return _checkApkCert.apply(this, arguments);
  };
}();

apkSigningMethods.checkCustomApkCert = function () {
  var _checkCustomApkCert = (0, _asyncToGenerator2.default)(function* (appPath, pkg) {
    _logger.default.debug(`Checking custom app cert for ${appPath}`);

    if (_path.default.extname(appPath) === _helpers.APKS_EXTENSION) {
      appPath = yield this.extractBaseApk(appPath);
    }

    let h = 'a-fA-F0-9';
    let md5Str = [`.*MD5.*((?:[${h}]{2}:){15}[${h}]{2})`];
    let md5 = new RegExp(md5Str, 'mi');

    let keytool = _path.default.resolve((0, _helpers.getJavaHome)(), 'bin', `keytool${_appiumSupport.system.isWindows() ? '.exe' : ''}`);

    let keystoreHash = yield this.getKeystoreMd5(keytool, md5);
    return yield this.checkApkKeystoreMatch(keytool, md5, keystoreHash, pkg, appPath);
  });

  return function checkCustomApkCert(_x9, _x10) {
    return _checkCustomApkCert.apply(this, arguments);
  };
}();

apkSigningMethods.getKeystoreMd5 = function () {
  var _getKeystoreMd = (0, _asyncToGenerator2.default)(function* (keytool, md5re) {
    _logger.default.debug('Printing keystore md5.');

    try {
      let _ref3 = yield (0, _teen_process.exec)(keytool, ['-v', '-list', '-alias', this.keyAlias, '-keystore', this.keystorePath, '-storepass', this.keystorePassword]),
          stdout = _ref3.stdout;

      let keystoreHash = md5re.exec(stdout);
      keystoreHash = keystoreHash ? keystoreHash[1] : null;

      _logger.default.debug(`Keystore MD5: ${keystoreHash}`);

      return keystoreHash;
    } catch (e) {
      throw new Error(`getKeystoreMd5 failed. Original error: ${e.message}`);
    }
  });

  return function getKeystoreMd5(_x11, _x12) {
    return _getKeystoreMd.apply(this, arguments);
  };
}();

apkSigningMethods.checkApkKeystoreMatch = function () {
  var _checkApkKeystoreMatch = (0, _asyncToGenerator2.default)(function* (keytool, md5re, keystoreHash, pkg, apk) {
    var _this = this;

    let entryHash = null;
    let rsa = /^META-INF\/.*\.[rR][sS][aA]$/;
    let foundKeystoreMatch = false;
    yield _appiumSupport.zip.readEntries(apk, function () {
      var _ref4 = (0, _asyncToGenerator2.default)(function* ({
        entry,
        extractEntryTo
      }) {
        entry = entry.fileName;

        if (!rsa.test(entry)) {
          return;
        }

        _logger.default.debug(`Entry: ${entry}`);

        let entryPath = _path.default.join(_this.tmpDir, pkg, 'cert');

        _logger.default.debug(`entryPath: ${entryPath}`);

        let entryFile = _path.default.join(entryPath, entry);

        _logger.default.debug(`entryFile: ${entryFile}`);

        yield _appiumSupport.fs.rimraf(entryPath);
        yield extractEntryTo(entryPath);

        _logger.default.debug('extracted!');

        _logger.default.debug('Printing apk md5.');

        let _ref5 = yield (0, _teen_process.exec)(keytool, ['-v', '-printcert', '-file', entryFile]),
            stdout = _ref5.stdout;

        entryHash = md5re.exec(stdout);
        entryHash = entryHash ? entryHash[1] : null;

        _logger.default.debug(`entryHash MD5: ${entryHash}`);

        _logger.default.debug(`keystore MD5: ${keystoreHash}`);

        let matchesKeystore = entryHash && entryHash === keystoreHash;

        _logger.default.debug(`Matches keystore? ${matchesKeystore}`);

        if (matchesKeystore) {
          foundKeystoreMatch = true;
          return false;
        }
      });

      return function (_x18) {
        return _ref4.apply(this, arguments);
      };
    }());
    return foundKeystoreMatch;
  });

  return function checkApkKeystoreMatch(_x13, _x14, _x15, _x16, _x17) {
    return _checkApkKeystoreMatch.apply(this, arguments);
  };
}();

var _default = apkSigningMethods;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
