"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _logger = _interopRequireDefault(require("../logger.js"));

var _helpers = require("../helpers.js");

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _net = _interopRequireDefault(require("net"));

var _os = require("os");

var _logcat = _interopRequireDefault(require("../logcat"));

var _asyncbox = require("asyncbox");

var _teen_process = require("teen_process");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _shellQuote = require("shell-quote");

const SETTINGS_HELPER_ID = 'io.appium.settings';
const WIFI_CONNECTION_SETTING_RECEIVER = `${SETTINGS_HELPER_ID}/.receivers.WiFiConnectionSettingReceiver`;
const WIFI_CONNECTION_SETTING_ACTION = `${SETTINGS_HELPER_ID}.wifi`;
const DATA_CONNECTION_SETTING_RECEIVER = `${SETTINGS_HELPER_ID}/.receivers.DataConnectionSettingReceiver`;
const DATA_CONNECTION_SETTING_ACTION = `${SETTINGS_HELPER_ID}.data_connection`;
const ANIMATION_SETTING_RECEIVER = `${SETTINGS_HELPER_ID}/.receivers.AnimationSettingReceiver`;
const ANIMATION_SETTING_ACTION = `${SETTINGS_HELPER_ID}.animation`;
const LOCALE_SETTING_RECEIVER = `${SETTINGS_HELPER_ID}/.receivers.LocaleSettingReceiver`;
const LOCALE_SETTING_ACTION = `${SETTINGS_HELPER_ID}.locale`;
const LOCATION_SERVICE = `${SETTINGS_HELPER_ID}/.LocationService`;
const LOCATION_RECEIVER = `${SETTINGS_HELPER_ID}/.receivers.LocationInfoReceiver`;
const LOCATION_RETRIEVAL_ACTION = `${SETTINGS_HELPER_ID}.location`;
const APPIUM_IME = `${SETTINGS_HELPER_ID}/.AppiumIME`;
const MAX_SHELL_BUFFER_LENGTH = 1000;
const NOT_CHANGEABLE_PERM_ERROR = 'not a changeable permission type';
let methods = {};

methods.getAdbWithCorrectAdbPath = function () {
  var _getAdbWithCorrectAdbPath = (0, _asyncToGenerator2.default)(function* () {
    this.executable.path = yield this.getSdkBinaryPath('adb');
    return this.adb;
  });

  return function getAdbWithCorrectAdbPath() {
    return _getAdbWithCorrectAdbPath.apply(this, arguments);
  };
}();

methods.initAapt = function () {
  var _initAapt = (0, _asyncToGenerator2.default)(function* () {
    yield this.getSdkBinaryPath('aapt');
  });

  return function initAapt() {
    return _initAapt.apply(this, arguments);
  };
}();

methods.initZipAlign = function () {
  var _initZipAlign = (0, _asyncToGenerator2.default)(function* () {
    yield this.getSdkBinaryPath('zipalign');
  });

  return function initZipAlign() {
    return _initZipAlign.apply(this, arguments);
  };
}();

methods.initBundletool = function () {
  var _initBundletool = (0, _asyncToGenerator2.default)(function* () {
    try {
      this.binaries.bundletool = yield _appiumSupport.fs.which('bundletool.jar');
    } catch (err) {
      throw new Error('bundletool.jar binary is expected to be present in PATH. ' + 'Visit https://github.com/google/bundletool for more details.');
    }
  });

  return function initBundletool() {
    return _initBundletool.apply(this, arguments);
  };
}();

methods.getApiLevel = function () {
  var _getApiLevel = (0, _asyncToGenerator2.default)(function* () {
    if (!_lodash.default.isInteger(this._apiLevel)) {
      try {
        const strOutput = yield this.getDeviceProperty('ro.build.version.sdk');
        let apiLevel = parseInt(strOutput.trim(), 10);

        if (apiLevel === 28 && (yield this.getDeviceProperty('ro.build.version.release')).toLowerCase() === 'q') {
          _logger.default.debug('Release version is Q but found API Level 28. Setting API Level to 29');

          apiLevel = 29;
        }

        this._apiLevel = apiLevel;

        _logger.default.debug(`Device API level: ${this._apiLevel}`);

        if (isNaN(this._apiLevel)) {
          throw new Error(`The actual output '${strOutput}' cannot be converted to an integer`);
        }
      } catch (e) {
        throw new Error(`Error getting device API level. Original error: ${e.message}`);
      }
    }

    return this._apiLevel;
  });

  return function getApiLevel() {
    return _getApiLevel.apply(this, arguments);
  };
}();

methods.getPlatformVersion = function () {
  var _getPlatformVersion = (0, _asyncToGenerator2.default)(function* () {
    _logger.default.info('Getting device platform version');

    try {
      return yield this.getDeviceProperty('ro.build.version.release');
    } catch (e) {
      throw new Error(`Error getting device platform version. Original error: ${e.message}`);
    }
  });

  return function getPlatformVersion() {
    return _getPlatformVersion.apply(this, arguments);
  };
}();

methods.isDeviceConnected = function () {
  var _isDeviceConnected = (0, _asyncToGenerator2.default)(function* () {
    let devices = yield this.getConnectedDevices();
    return devices.length > 0;
  });

  return function isDeviceConnected() {
    return _isDeviceConnected.apply(this, arguments);
  };
}();

methods.mkdir = function () {
  var _mkdir = (0, _asyncToGenerator2.default)(function* (remotePath) {
    return yield this.shell(['mkdir', '-p', remotePath]);
  });

  return function mkdir(_x) {
    return _mkdir.apply(this, arguments);
  };
}();

methods.isValidClass = function isValidClass(classString) {
  return new RegExp(/^[a-zA-Z0-9./_]+$/).exec(classString);
};

methods.forceStop = function () {
  var _forceStop = (0, _asyncToGenerator2.default)(function* (pkg) {
    return yield this.shell(['am', 'force-stop', pkg]);
  });

  return function forceStop(_x2) {
    return _forceStop.apply(this, arguments);
  };
}();

methods.killPackage = function () {
  var _killPackage = (0, _asyncToGenerator2.default)(function* (pkg) {
    return yield this.shell(['am', 'kill', pkg]);
  });

  return function killPackage(_x3) {
    return _killPackage.apply(this, arguments);
  };
}();

methods.clear = function () {
  var _clear = (0, _asyncToGenerator2.default)(function* (pkg) {
    return yield this.shell(['pm', 'clear', pkg]);
  });

  return function clear(_x4) {
    return _clear.apply(this, arguments);
  };
}();

methods.grantAllPermissions = function () {
  var _grantAllPermissions = (0, _asyncToGenerator2.default)(function* (pkg, apk) {
    const apiLevel = yield this.getApiLevel();
    let targetSdk = 0;
    let dumpsysOutput = null;

    try {
      if (!apk) {
        dumpsysOutput = yield this.shell(['dumpsys', 'package', pkg]);
        targetSdk = yield this.targetSdkVersionUsingPKG(pkg, dumpsysOutput);
      } else {
        targetSdk = yield this.targetSdkVersionFromManifest(apk);
      }
    } catch (e) {
      _logger.default.warn(`Ran into problem getting target SDK version; ignoring...`);
    }

    if (apiLevel >= 23 && targetSdk >= 23) {
      dumpsysOutput = dumpsysOutput || (yield this.shell(['dumpsys', 'package', pkg]));
      const requestedPermissions = yield this.getReqPermissions(pkg, dumpsysOutput);
      const grantedPermissions = yield this.getGrantedPermissions(pkg, dumpsysOutput);

      const permissionsToGrant = _lodash.default.difference(requestedPermissions, grantedPermissions);

      if (_lodash.default.isEmpty(permissionsToGrant)) {
        _logger.default.info(`${pkg} contains no permissions available for granting`);
      } else {
        yield this.grantPermissions(pkg, permissionsToGrant);
      }
    }
  });

  return function grantAllPermissions(_x5, _x6) {
    return _grantAllPermissions.apply(this, arguments);
  };
}();

methods.grantPermissions = function () {
  var _grantPermissions = (0, _asyncToGenerator2.default)(function* (pkg, permissions) {
    _logger.default.debug(`Granting permissions ${JSON.stringify(permissions)} to '${pkg}'`);

    const commands = [];
    let cmdChunk = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = permissions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        const permission = _step.value;
        const nextCmd = ['pm', 'grant', pkg, permission, ';'];

        if (nextCmd.join(' ').length + cmdChunk.join(' ').length >= MAX_SHELL_BUFFER_LENGTH) {
          commands.push(cmdChunk);
          cmdChunk = [];
        }

        cmdChunk = [...cmdChunk, ...nextCmd];
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    if (!_lodash.default.isEmpty(cmdChunk)) {
      commands.push(cmdChunk);
    }

    _logger.default.debug(`Got the following command chunks to execute: ${JSON.stringify(commands)}`);

    let lastError = null;

    for (var _i = 0; _i < commands.length; _i++) {
      const cmd = commands[_i];

      try {
        yield this.shell(cmd);
      } catch (e) {
        if (!e.message.includes(NOT_CHANGEABLE_PERM_ERROR)) {
          lastError = e;
        }
      }
    }

    if (lastError) {
      throw lastError;
    }
  });

  return function grantPermissions(_x7, _x8) {
    return _grantPermissions.apply(this, arguments);
  };
}();

methods.grantPermission = function () {
  var _grantPermission = (0, _asyncToGenerator2.default)(function* (pkg, permission) {
    try {
      yield this.shell(['pm', 'grant', pkg, permission]);
    } catch (error) {
      if (!error.message.includes(NOT_CHANGEABLE_PERM_ERROR)) {
        throw error;
      }
    }
  });

  return function grantPermission(_x9, _x10) {
    return _grantPermission.apply(this, arguments);
  };
}();

methods.revokePermission = function () {
  var _revokePermission = (0, _asyncToGenerator2.default)(function* (pkg, permission) {
    try {
      yield this.shell(['pm', 'revoke', pkg, permission]);
    } catch (error) {
      if (!error.message.includes(NOT_CHANGEABLE_PERM_ERROR)) {
        throw error;
      }
    }
  });

  return function revokePermission(_x11, _x12) {
    return _revokePermission.apply(this, arguments);
  };
}();

methods.getGrantedPermissions = function () {
  var _getGrantedPermissions = (0, _asyncToGenerator2.default)(function* (pkg, cmdOutput = null) {
    _logger.default.debug('Retrieving granted permissions');

    const stdout = cmdOutput || (yield this.shell(['dumpsys', 'package', pkg]));
    return (0, _helpers.extractMatchingPermissions)(stdout, ['install', 'runtime'], true);
  });

  return function getGrantedPermissions(_x13) {
    return _getGrantedPermissions.apply(this, arguments);
  };
}();

methods.getDeniedPermissions = function () {
  var _getDeniedPermissions = (0, _asyncToGenerator2.default)(function* (pkg, cmdOutput = null) {
    _logger.default.debug('Retrieving denied permissions');

    const stdout = cmdOutput || (yield this.shell(['dumpsys', 'package', pkg]));
    return (0, _helpers.extractMatchingPermissions)(stdout, ['install', 'runtime'], false);
  });

  return function getDeniedPermissions(_x14) {
    return _getDeniedPermissions.apply(this, arguments);
  };
}();

methods.getReqPermissions = function () {
  var _getReqPermissions = (0, _asyncToGenerator2.default)(function* (pkg, cmdOutput = null) {
    _logger.default.debug('Retrieving requested permissions');

    const stdout = cmdOutput || (yield this.shell(['dumpsys', 'package', pkg]));
    return (0, _helpers.extractMatchingPermissions)(stdout, ['requested']);
  });

  return function getReqPermissions(_x15) {
    return _getReqPermissions.apply(this, arguments);
  };
}();

methods.getLocationProviders = function () {
  var _getLocationProviders = (0, _asyncToGenerator2.default)(function* () {
    let stdout = yield this.getSetting('secure', 'location_providers_allowed');
    return stdout.trim().split(',').map(p => p.trim()).filter(Boolean);
  });

  return function getLocationProviders() {
    return _getLocationProviders.apply(this, arguments);
  };
}();

methods.toggleGPSLocationProvider = function () {
  var _toggleGPSLocationProvider = (0, _asyncToGenerator2.default)(function* (enabled) {
    yield this.setSetting('secure', 'location_providers_allowed', `${enabled ? '+' : '-'}gps`);
  });

  return function toggleGPSLocationProvider(_x16) {
    return _toggleGPSLocationProvider.apply(this, arguments);
  };
}();

methods.setHiddenApiPolicy = function () {
  var _setHiddenApiPolicy = (0, _asyncToGenerator2.default)(function* (value) {
    yield this.setSetting('global', 'hidden_api_policy_pre_p_apps', value);
    yield this.setSetting('global', 'hidden_api_policy_p_apps', value);
    yield this.setSetting('global', 'hidden_api_policy', value);
  });

  return function setHiddenApiPolicy(_x17) {
    return _setHiddenApiPolicy.apply(this, arguments);
  };
}();

methods.setDefaultHiddenApiPolicy = function () {
  var _setDefaultHiddenApiPolicy = (0, _asyncToGenerator2.default)(function* () {
    yield this.shell(['settings', 'delete', 'global', 'hidden_api_policy_pre_p_apps']);
    yield this.shell(['settings', 'delete', 'global', 'hidden_api_policy_p_apps']);
    yield this.shell(['settings', 'delete', 'global', 'hidden_api_policy']);
  });

  return function setDefaultHiddenApiPolicy() {
    return _setDefaultHiddenApiPolicy.apply(this, arguments);
  };
}();

methods.stopAndClear = function () {
  var _stopAndClear = (0, _asyncToGenerator2.default)(function* (pkg) {
    try {
      yield this.forceStop(pkg);
      yield this.clear(pkg);
    } catch (e) {
      throw new Error(`Cannot stop and clear ${pkg}. Original error: ${e.message}`);
    }
  });

  return function stopAndClear(_x18) {
    return _stopAndClear.apply(this, arguments);
  };
}();

methods.availableIMEs = function () {
  var _availableIMEs = (0, _asyncToGenerator2.default)(function* () {
    try {
      return (0, _helpers.getIMEListFromOutput)((yield this.shell(['ime', 'list', '-a'])));
    } catch (e) {
      throw new Error(`Error getting available IME's. Original error: ${e.message}`);
    }
  });

  return function availableIMEs() {
    return _availableIMEs.apply(this, arguments);
  };
}();

methods.enabledIMEs = function () {
  var _enabledIMEs = (0, _asyncToGenerator2.default)(function* () {
    try {
      return (0, _helpers.getIMEListFromOutput)((yield this.shell(['ime', 'list'])));
    } catch (e) {
      throw new Error(`Error getting enabled IME's. Original error: ${e.message}`);
    }
  });

  return function enabledIMEs() {
    return _enabledIMEs.apply(this, arguments);
  };
}();

methods.enableIME = function () {
  var _enableIME = (0, _asyncToGenerator2.default)(function* (imeId) {
    yield this.shell(['ime', 'enable', imeId]);
  });

  return function enableIME(_x19) {
    return _enableIME.apply(this, arguments);
  };
}();

methods.disableIME = function () {
  var _disableIME = (0, _asyncToGenerator2.default)(function* (imeId) {
    yield this.shell(['ime', 'disable', imeId]);
  });

  return function disableIME(_x20) {
    return _disableIME.apply(this, arguments);
  };
}();

methods.setIME = function () {
  var _setIME = (0, _asyncToGenerator2.default)(function* (imeId) {
    yield this.shell(['ime', 'set', imeId]);
  });

  return function setIME(_x21) {
    return _setIME.apply(this, arguments);
  };
}();

methods.defaultIME = function () {
  var _defaultIME = (0, _asyncToGenerator2.default)(function* () {
    try {
      let engine = yield this.getSetting('secure', 'default_input_method');

      if (engine === 'null') {
        return null;
      }

      return engine.trim();
    } catch (e) {
      throw new Error(`Error getting default IME. Original error: ${e.message}`);
    }
  });

  return function defaultIME() {
    return _defaultIME.apply(this, arguments);
  };
}();

methods.keyevent = function () {
  var _keyevent = (0, _asyncToGenerator2.default)(function* (keycode) {
    let code = parseInt(keycode, 10);
    yield this.shell(['input', 'keyevent', code]);
  });

  return function keyevent(_x22) {
    return _keyevent.apply(this, arguments);
  };
}();

methods.inputText = function () {
  var _inputText = (0, _asyncToGenerator2.default)(function* (text) {
    text = text.replace(/\\/g, '\\\\').replace(/\(/g, '\(').replace(/\)/g, '\)').replace(/</g, '\<').replace(/>/g, '\>').replace(/\|/g, '\|').replace(/;/g, '\;').replace(/&/g, '\&').replace(/\*/g, '\*').replace(/~/g, '\~').replace(/"/g, '\"').replace(/'/g, "\'").replace(/ /g, '%s');
    yield this.shell(['input', 'text', text]);
  });

  return function inputText(_x23) {
    return _inputText.apply(this, arguments);
  };
}();

methods.clearTextField = function () {
  var _clearTextField = (0, _asyncToGenerator2.default)(function* (length = 100) {
    _logger.default.debug(`Clearing up to ${length} characters`);

    if (length === 0) {
      return;
    }

    let args = ['input', 'keyevent'];

    for (let i = 0; i < length; i++) {
      args.push('67', '112');
    }

    yield this.shell(args);
  });

  return function clearTextField() {
    return _clearTextField.apply(this, arguments);
  };
}();

methods.lock = function () {
  var _lock = (0, _asyncToGenerator2.default)(function* () {
    var _this = this;

    if (yield this.isScreenLocked()) {
      _logger.default.debug('Screen is already locked. Doing nothing.');

      return;
    }

    _logger.default.debug('Pressing the KEYCODE_POWER button to lock screen');

    yield this.keyevent(26);
    const timeoutMs = 5000;

    try {
      yield (0, _asyncbox.waitForCondition)((0, _asyncToGenerator2.default)(function* () {
        return yield _this.isScreenLocked();
      }), {
        waitMs: timeoutMs,
        intervalMs: 500
      });
    } catch (e) {
      throw new Error(`The device screen is still locked after ${timeoutMs}ms timeout`);
    }
  });

  return function lock() {
    return _lock.apply(this, arguments);
  };
}();

methods.back = function () {
  var _back = (0, _asyncToGenerator2.default)(function* () {
    _logger.default.debug('Pressing the BACK button');

    yield this.keyevent(4);
  });

  return function back() {
    return _back.apply(this, arguments);
  };
}();

methods.goToHome = function () {
  var _goToHome = (0, _asyncToGenerator2.default)(function* () {
    _logger.default.debug('Pressing the HOME button');

    yield this.keyevent(3);
  });

  return function goToHome() {
    return _goToHome.apply(this, arguments);
  };
}();

methods.getAdbPath = function getAdbPath() {
  return this.executable.path;
};

methods.getScreenOrientation = function () {
  var _getScreenOrientation = (0, _asyncToGenerator2.default)(function* () {
    let stdout = yield this.shell(['dumpsys', 'input']);
    return (0, _helpers.getSurfaceOrientation)(stdout);
  });

  return function getScreenOrientation() {
    return _getScreenOrientation.apply(this, arguments);
  };
}();

methods.isScreenLocked = function () {
  var _isScreenLocked = (0, _asyncToGenerator2.default)(function* () {
    let stdout = yield this.shell(['dumpsys', 'window']);

    if (process.env.APPIUM_LOG_DUMPSYS) {
      let dumpsysFile = _path.default.resolve(process.cwd(), 'dumpsys.log');

      _logger.default.debug(`Writing dumpsys output to ${dumpsysFile}`);

      yield _appiumSupport.fs.writeFile(dumpsysFile, stdout);
    }

    return (0, _helpers.isShowingLockscreen)(stdout) || (0, _helpers.isCurrentFocusOnKeyguard)(stdout) || !(0, _helpers.isScreenOnFully)(stdout);
  });

  return function isScreenLocked() {
    return _isScreenLocked.apply(this, arguments);
  };
}();

methods.isSoftKeyboardPresent = function () {
  var _isSoftKeyboardPresent = (0, _asyncToGenerator2.default)(function* () {
    try {
      const stdout = yield this.shell(['dumpsys', 'input_method']);
      const inputShownMatch = /mInputShown=(\w+)/.exec(stdout);
      const inputViewShownMatch = /mIsInputViewShown=(\w+)/.exec(stdout);
      return {
        isKeyboardShown: !!(inputShownMatch && inputShownMatch[1] === 'true'),
        canCloseKeyboard: !!(inputViewShownMatch && inputViewShownMatch[1] === 'true')
      };
    } catch (e) {
      throw new Error(`Error finding softkeyboard. Original error: ${e.message}`);
    }
  });

  return function isSoftKeyboardPresent() {
    return _isSoftKeyboardPresent.apply(this, arguments);
  };
}();

methods.sendTelnetCommand = function () {
  var _sendTelnetCommand = (0, _asyncToGenerator2.default)(function* (command) {
    _logger.default.debug(`Sending telnet command to device: ${command}`);

    let port = yield this.getEmulatorPort();
    return yield new _bluebird.default((resolve, reject) => {
      let conn = _net.default.createConnection(port, 'localhost'),
          connected = false,
          readyRegex = /^OK$/m,
          dataStream = '',
          res = null;

      conn.on('connect', () => {
        _logger.default.debug('Socket connection to device created');
      });
      conn.on('data', data => {
        data = data.toString('utf8');

        if (!connected) {
          if (readyRegex.test(data)) {
            connected = true;

            _logger.default.debug('Socket connection to device ready');

            conn.write(`${command}\n`);
          }
        } else {
          dataStream += data;

          if (readyRegex.test(data)) {
            res = dataStream.replace(readyRegex, '').trim();
            res = _lodash.default.last(res.trim().split('\n'));

            _logger.default.debug(`Telnet command got response: ${res}`);

            conn.write('quit\n');
          }
        }
      });
      conn.on('error', err => {
        _logger.default.debug(`Telnet command error: ${err.message}`);

        reject(err);
      });
      conn.on('close', () => {
        if (res === null) {
          reject(new Error('Never got a response from command'));
        } else {
          resolve(res);
        }
      });
    });
  });

  return function sendTelnetCommand(_x24) {
    return _sendTelnetCommand.apply(this, arguments);
  };
}();

methods.isAirplaneModeOn = function () {
  var _isAirplaneModeOn = (0, _asyncToGenerator2.default)(function* () {
    let stdout = yield this.getSetting('global', 'airplane_mode_on');
    return parseInt(stdout, 10) !== 0;
  });

  return function isAirplaneModeOn() {
    return _isAirplaneModeOn.apply(this, arguments);
  };
}();

methods.setAirplaneMode = function () {
  var _setAirplaneMode = (0, _asyncToGenerator2.default)(function* (on) {
    yield this.setSetting('global', 'airplane_mode_on', on ? 1 : 0);
  });

  return function setAirplaneMode(_x25) {
    return _setAirplaneMode.apply(this, arguments);
  };
}();

methods.broadcastAirplaneMode = function () {
  var _broadcastAirplaneMode = (0, _asyncToGenerator2.default)(function* (on) {
    yield this.shell(['am', 'broadcast', '-a', 'android.intent.action.AIRPLANE_MODE', '--ez', 'state', on ? 'true' : 'false']);
  });

  return function broadcastAirplaneMode(_x26) {
    return _broadcastAirplaneMode.apply(this, arguments);
  };
}();

methods.isWifiOn = function () {
  var _isWifiOn = (0, _asyncToGenerator2.default)(function* () {
    let stdout = yield this.getSetting('global', 'wifi_on');
    return parseInt(stdout, 10) !== 0;
  });

  return function isWifiOn() {
    return _isWifiOn.apply(this, arguments);
  };
}();

methods.setWifiState = function () {
  var _setWifiState = (0, _asyncToGenerator2.default)(function* (on, isEmulator = false) {
    if (isEmulator) {
      yield this.shell(['svc', 'wifi', on ? 'enable' : 'disable'], {
        privileged: true
      });
    } else {
      yield this.shell(['am', 'broadcast', '-a', WIFI_CONNECTION_SETTING_ACTION, '-n', WIFI_CONNECTION_SETTING_RECEIVER, '--es', 'setstatus', on ? 'enable' : 'disable']);
    }
  });

  return function setWifiState(_x27) {
    return _setWifiState.apply(this, arguments);
  };
}();

methods.isDataOn = function () {
  var _isDataOn = (0, _asyncToGenerator2.default)(function* () {
    let stdout = yield this.getSetting('global', 'mobile_data');
    return parseInt(stdout, 10) !== 0;
  });

  return function isDataOn() {
    return _isDataOn.apply(this, arguments);
  };
}();

methods.setDataState = function () {
  var _setDataState = (0, _asyncToGenerator2.default)(function* (on, isEmulator = false) {
    if (isEmulator) {
      yield this.shell(['svc', 'data', on ? 'enable' : 'disable'], {
        privileged: true
      });
    } else {
      yield this.shell(['am', 'broadcast', '-a', DATA_CONNECTION_SETTING_ACTION, '-n', DATA_CONNECTION_SETTING_RECEIVER, '--es', 'setstatus', on ? 'enable' : 'disable']);
    }
  });

  return function setDataState(_x28) {
    return _setDataState.apply(this, arguments);
  };
}();

methods.setWifiAndData = function () {
  var _setWifiAndData = (0, _asyncToGenerator2.default)(function* ({
    wifi,
    data
  }, isEmulator = false) {
    if (_appiumSupport.util.hasValue(wifi)) {
      yield this.setWifiState(wifi, isEmulator);
    }

    if (_appiumSupport.util.hasValue(data)) {
      yield this.setDataState(data, isEmulator);
    }
  });

  return function setWifiAndData(_x29) {
    return _setWifiAndData.apply(this, arguments);
  };
}();

methods.setAnimationState = function () {
  var _setAnimationState = (0, _asyncToGenerator2.default)(function* (on) {
    yield this.shell(['am', 'broadcast', '-a', ANIMATION_SETTING_ACTION, '-n', ANIMATION_SETTING_RECEIVER, '--es', 'setstatus', on ? 'enable' : 'disable']);
  });

  return function setAnimationState(_x30) {
    return _setAnimationState.apply(this, arguments);
  };
}();

methods.isAnimationOn = function () {
  var _isAnimationOn = (0, _asyncToGenerator2.default)(function* () {
    let animator_duration_scale = yield this.getSetting('global', 'animator_duration_scale');
    let transition_animation_scale = yield this.getSetting('global', 'transition_animation_scale');
    let window_animation_scale = yield this.getSetting('global', 'window_animation_scale');
    return _lodash.default.some([animator_duration_scale, transition_animation_scale, window_animation_scale], setting => setting !== '0.0');
  });

  return function isAnimationOn() {
    return _isAnimationOn.apply(this, arguments);
  };
}();

methods.setDeviceSysLocaleViaSettingApp = function () {
  var _setDeviceSysLocaleViaSettingApp = (0, _asyncToGenerator2.default)(function* (language, country, script = null) {
    const params = ['am', 'broadcast', '-a', LOCALE_SETTING_ACTION, '-n', LOCALE_SETTING_RECEIVER, '--es', 'lang', language.toLowerCase(), '--es', 'country', country.toUpperCase()];

    if (script) {
      params.push('--es', 'script', script);
    }

    yield this.shell(params);
  });

  return function setDeviceSysLocaleViaSettingApp(_x31, _x32) {
    return _setDeviceSysLocaleViaSettingApp.apply(this, arguments);
  };
}();

methods.setGeoLocation = function () {
  var _setGeoLocation = (0, _asyncToGenerator2.default)(function* (location, isEmulator = false) {
    let longitude = parseFloat(location.longitude);

    if (isNaN(longitude)) {
      throw new Error(`location.longitude is expected to be a valid float number. '${location.longitude}' is given instead`);
    }

    longitude = `${_lodash.default.ceil(longitude, 5)}`;
    let latitude = parseFloat(location.latitude);

    if (isNaN(latitude)) {
      throw new Error(`location.latitude is expected to be a valid float number. '${location.latitude}' is given instead`);
    }

    latitude = `${_lodash.default.ceil(latitude, 5)}`;

    if (isEmulator) {
      yield this.resetTelnetAuthToken();
      yield this.adbExec(['emu', 'geo', 'fix', longitude, latitude]);
      yield this.adbExec(['emu', 'geo', 'fix', longitude.replace('.', ','), latitude.replace('.', ',')]);
    } else {
      return yield this.shell(['am', 'startservice', '-e', 'longitude', longitude, '-e', 'latitude', latitude, LOCATION_SERVICE]);
    }
  });

  return function setGeoLocation(_x33) {
    return _setGeoLocation.apply(this, arguments);
  };
}();

methods.getGeoLocation = function () {
  var _getGeoLocation = (0, _asyncToGenerator2.default)(function* () {
    let output;

    try {
      output = yield this.shell(['am', 'broadcast', '-n', LOCATION_RECEIVER, '-a', LOCATION_RETRIEVAL_ACTION]);
    } catch (err) {
      throw new Error(`Cannot retrieve the current geo coordinates from the device. ` + `Make sure the Appium Settings application is up to date and has location permissions. Also the location ` + `services must be enabled on the device. Original error: ${err.message}`);
    }

    const match = /data="(-?[\d\.]+)\s+(-?[\d\.]+)\s+(-?[\d\.]+)"/.exec(output);

    if (!match) {
      throw new Error(`Cannot parse the actual location values from the command output: ${output}`);
    }

    const location = {
      latitude: match[1],
      longitude: match[2],
      altitude: match[3]
    };

    _logger.default.debug(`Got geo coordinates: ${JSON.stringify(location)}`);

    return location;
  });

  return function getGeoLocation() {
    return _getGeoLocation.apply(this, arguments);
  };
}();

methods.rimraf = function () {
  var _rimraf = (0, _asyncToGenerator2.default)(function* (path) {
    yield this.shell(['rm', '-rf', path]);
  });

  return function rimraf(_x34) {
    return _rimraf.apply(this, arguments);
  };
}();

methods.push = function () {
  var _push = (0, _asyncToGenerator2.default)(function* (localPath, remotePath, opts) {
    yield this.mkdir(_path.default.posix.dirname(remotePath));
    yield this.adbExec(['push', localPath, remotePath], opts);
  });

  return function push(_x35, _x36, _x37) {
    return _push.apply(this, arguments);
  };
}();

methods.pull = function () {
  var _pull = (0, _asyncToGenerator2.default)(function* (remotePath, localPath) {
    yield this.adbExec(['pull', remotePath, localPath], {
      timeout: 60000
    });
  });

  return function pull(_x38, _x39) {
    return _pull.apply(this, arguments);
  };
}();

methods.processExists = function () {
  var _processExists = (0, _asyncToGenerator2.default)(function* (processName) {
    if (!this.isValidClass(processName)) {
      throw new Error(`Invalid process name: ${processName}`);
    }

    return !_lodash.default.isEmpty((yield this.getPIDsByName(processName)));
  });

  return function processExists(_x40) {
    return _processExists.apply(this, arguments);
  };
}();

methods.getForwardList = function () {
  var _getForwardList = (0, _asyncToGenerator2.default)(function* () {
    _logger.default.debug(`List forwarding ports`);

    const connections = yield this.adbExec(['forward', '--list']);
    return connections.split(_os.EOL).filter(line => Boolean(line.trim()));
  });

  return function getForwardList() {
    return _getForwardList.apply(this, arguments);
  };
}();

methods.forwardPort = function () {
  var _forwardPort = (0, _asyncToGenerator2.default)(function* (systemPort, devicePort) {
    _logger.default.debug(`Forwarding system: ${systemPort} to device: ${devicePort}`);

    yield this.adbExec(['forward', `tcp:${systemPort}`, `tcp:${devicePort}`]);
  });

  return function forwardPort(_x41, _x42) {
    return _forwardPort.apply(this, arguments);
  };
}();

methods.removePortForward = function () {
  var _removePortForward = (0, _asyncToGenerator2.default)(function* (systemPort) {
    _logger.default.debug(`Removing forwarded port socket connection: ${systemPort} `);

    yield this.adbExec(['forward', `--remove`, `tcp:${systemPort}`]);
  });

  return function removePortForward(_x43) {
    return _removePortForward.apply(this, arguments);
  };
}();

methods.getReverseList = function () {
  var _getReverseList = (0, _asyncToGenerator2.default)(function* () {
    _logger.default.debug(`List reverse forwarding ports`);

    const connections = yield this.adbExec(['reverse', '--list']);
    return connections.split(_os.EOL).filter(line => Boolean(line.trim()));
  });

  return function getReverseList() {
    return _getReverseList.apply(this, arguments);
  };
}();

methods.reversePort = function () {
  var _reversePort = (0, _asyncToGenerator2.default)(function* (devicePort, systemPort) {
    _logger.default.debug(`Forwarding device: ${devicePort} to system: ${systemPort}`);

    yield this.adbExec(['reverse', `tcp:${devicePort}`, `tcp:${systemPort}`]);
  });

  return function reversePort(_x44, _x45) {
    return _reversePort.apply(this, arguments);
  };
}();

methods.removePortReverse = function () {
  var _removePortReverse = (0, _asyncToGenerator2.default)(function* (devicePort) {
    _logger.default.debug(`Removing reverse forwarded port socket connection: ${devicePort} `);

    yield this.adbExec(['reverse', `--remove`, `tcp:${devicePort}`]);
  });

  return function removePortReverse(_x46) {
    return _removePortReverse.apply(this, arguments);
  };
}();

methods.forwardAbstractPort = function () {
  var _forwardAbstractPort = (0, _asyncToGenerator2.default)(function* (systemPort, devicePort) {
    _logger.default.debug(`Forwarding system: ${systemPort} to abstract device: ${devicePort}`);

    yield this.adbExec(['forward', `tcp:${systemPort}`, `localabstract:${devicePort}`]);
  });

  return function forwardAbstractPort(_x47, _x48) {
    return _forwardAbstractPort.apply(this, arguments);
  };
}();

methods.ping = function () {
  var _ping = (0, _asyncToGenerator2.default)(function* () {
    let stdout = yield this.shell(['echo', 'ping']);

    if (stdout.indexOf('ping') === 0) {
      return true;
    }

    throw new Error(`ADB ping failed, returned ${stdout}`);
  });

  return function ping() {
    return _ping.apply(this, arguments);
  };
}();

methods.restart = function () {
  var _restart = (0, _asyncToGenerator2.default)(function* () {
    try {
      yield this.stopLogcat();
      yield this.restartAdb();
      yield this.waitForDevice(60);
      yield this.startLogcat();
    } catch (e) {
      throw new Error(`Restart failed. Original error: ${e.message}`);
    }
  });

  return function restart() {
    return _restart.apply(this, arguments);
  };
}();

methods.startLogcat = function () {
  var _startLogcat = (0, _asyncToGenerator2.default)(function* () {
    if (!_lodash.default.isEmpty(this.logcat)) {
      throw new Error("Trying to start logcat capture but it's already started!");
    }

    this.logcat = new _logcat.default({
      adb: this.executable,
      debug: false,
      debugTrace: false,
      clearDeviceLogsOnStart: !!this.clearDeviceLogsOnStart
    });
    yield this.logcat.startCapture();
  });

  return function startLogcat() {
    return _startLogcat.apply(this, arguments);
  };
}();

methods.stopLogcat = function () {
  var _stopLogcat = (0, _asyncToGenerator2.default)(function* () {
    if (_lodash.default.isEmpty(this.logcat)) {
      return;
    }

    try {
      yield this.logcat.stopCapture();
    } finally {
      this.logcat = null;
    }
  });

  return function stopLogcat() {
    return _stopLogcat.apply(this, arguments);
  };
}();

methods.getLogcatLogs = function getLogcatLogs() {
  if (_lodash.default.isEmpty(this.logcat)) {
    throw new Error("Can't get logcat logs since logcat hasn't started");
  }

  return this.logcat.getLogs();
};

methods.setLogcatListener = function setLogcatListener(listener) {
  if (_lodash.default.isEmpty(this.logcat)) {
    throw new Error("Logcat process hasn't been started");
  }

  this.logcat.on('output', listener);
};

methods.removeLogcatListener = function removeLogcatListener(listener) {
  if (_lodash.default.isEmpty(this.logcat)) {
    throw new Error("Logcat process hasn't been started");
  }

  this.logcat.removeListener('output', listener);
};

methods.getPIDsByName = function () {
  var _getPIDsByName = (0, _asyncToGenerator2.default)(function* (name) {
    _logger.default.debug(`Getting IDs of all '${name}' processes`);

    if (!_lodash.default.isBoolean(this._isPgrepAvailable)) {
      const pgrepOutput = _lodash.default.trim((yield this.shell(['pgrep --help; echo $?'])));

      this._isPgrepAvailable = parseInt(_lodash.default.last(pgrepOutput.split(/\s+/)), 10) === 0;

      if (this._isPgrepAvailable) {
        this._canPgrepUseFullCmdLineSearch = /^-f\b/m.test(pgrepOutput);
      } else {
        this._isPidofAvailable = parseInt((yield this.shell(['pidof --help > /dev/null; echo $?'])), 10) === 0;
      }
    }

    if (this._isPgrepAvailable || this._isPidofAvailable) {
      const shellCommand = this._isPgrepAvailable ? this._canPgrepUseFullCmdLineSearch ? ['pgrep', '-f', _lodash.default.escapeRegExp(name)] : ['pgrep', `^${_lodash.default.escapeRegExp(name.slice(-15))}$`] : ['pidof', name];

      try {
        return (yield this.shell(shellCommand)).split(/\s+/).map(x => parseInt(x, 10)).filter(x => _lodash.default.isInteger(x));
      } catch (e) {
        if (e.code === 1) {
          return [];
        }

        throw new Error(`Could not extract process ID of '${name}': ${e.message}`);
      }
    }

    _logger.default.debug('Using ps-based PID detection');

    const pidColumnTitle = 'PID';
    const processNameColumnTitle = 'NAME';
    const stdout = yield this.shell(['ps']);
    const titleMatch = new RegExp(`^(.*\\b${pidColumnTitle}\\b.*\\b${processNameColumnTitle}\\b.*)$`, 'm').exec(stdout);

    if (!titleMatch) {
      throw new Error(`Could not extract PID of '${name}' from ps output: ${stdout}`);
    }

    const allTitles = titleMatch[1].trim().split(/\s+/);
    const pidIndex = allTitles.indexOf(pidColumnTitle);
    const pids = [];
    const processNameRegex = new RegExp(`^(.*\\b\\d+\\b.*\\b${_lodash.default.escapeRegExp(name)}\\b.*)$`, 'gm');
    let matchedLine;

    while (matchedLine = processNameRegex.exec(stdout)) {
      const items = matchedLine[1].trim().split(/\s+/);

      if (pidIndex >= allTitles.length || isNaN(items[pidIndex])) {
        throw new Error(`Could not extract PID of '${name}' from '${matchedLine[1].trim()}'. ps output: ${stdout}`);
      }

      pids.push(parseInt(items[pidIndex], 10));
    }

    return pids;
  });

  return function getPIDsByName(_x49) {
    return _getPIDsByName.apply(this, arguments);
  };
}();

methods.killProcessesByName = function () {
  var _killProcessesByName = (0, _asyncToGenerator2.default)(function* (name) {
    try {
      _logger.default.debug(`Attempting to kill all ${name} processes`);

      let pids = yield this.getPIDsByName(name);

      if (_lodash.default.isEmpty(pids)) {
        _logger.default.info(`No '${name}' process has been found`);

        return;
      }

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = pids[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          let pid = _step2.value;
          yield this.killProcessByPID(pid);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    } catch (e) {
      throw new Error(`Unable to kill ${name} processes. Original error: ${e.message}`);
    }
  });

  return function killProcessesByName(_x50) {
    return _killProcessesByName.apply(this, arguments);
  };
}();

methods.killProcessByPID = function () {
  var _killProcessByPID = (0, _asyncToGenerator2.default)(function* (pid) {
    var _this2 = this;

    _logger.default.debug(`Attempting to kill process ${pid}`);

    let wasRoot = false;
    let becameRoot = false;

    try {
      try {
        yield this.shell(['kill', '-0', pid]);
      } catch (e) {
        if (!e.message.includes('Operation not permitted')) {
          throw e;
        }

        try {
          wasRoot = yield this.isRoot();
        } catch (ign) {}

        if (wasRoot) {
          throw e;
        }

        _logger.default.info(`Cannot kill PID ${pid} due to insufficient permissions. Retrying as root`);

        let _ref2 = yield this.root(),
            isSuccessful = _ref2.isSuccessful;

        becameRoot = isSuccessful;
        yield this.shell(['kill', '-0', pid]);
      }

      const timeoutMs = 1000;
      let stdout;

      try {
        yield (0, _asyncbox.waitForCondition)((0, _asyncToGenerator2.default)(function* () {
          try {
            stdout = yield _this2.shell(['kill', pid]);
            return false;
          } catch (e) {
            return true;
          }
        }), {
          waitMs: timeoutMs,
          intervalMs: 300
        });
      } catch (err) {
        _logger.default.warn(`Cannot kill process ${pid} in ${timeoutMs} ms. Trying to force kill...`);

        stdout = yield this.shell(['kill', '-9', pid]);
      }

      return stdout;
    } finally {
      if (becameRoot) {
        yield this.unroot();
      }
    }
  });

  return function killProcessByPID(_x51) {
    return _killProcessByPID.apply(this, arguments);
  };
}();

methods.broadcastProcessEnd = function () {
  var _broadcastProcessEnd = (0, _asyncToGenerator2.default)(function* (intent, processName) {
    this.broadcast(intent);
    let start = Date.now();
    let timeoutMs = 40000;

    try {
      while (Date.now() - start < timeoutMs) {
        if (yield this.processExists(processName)) {
          yield (0, _asyncbox.sleep)(400);
          continue;
        }

        return;
      }

      throw new Error(`Process never died within ${timeoutMs} ms`);
    } catch (e) {
      throw new Error(`Unable to broadcast process end. Original error: ${e.message}`);
    }
  });

  return function broadcastProcessEnd(_x52, _x53) {
    return _broadcastProcessEnd.apply(this, arguments);
  };
}();

methods.broadcast = function () {
  var _broadcast = (0, _asyncToGenerator2.default)(function* (intent) {
    if (!this.isValidClass(intent)) {
      throw new Error(`Invalid intent ${intent}`);
    }

    _logger.default.debug(`Broadcasting: ${intent}`);

    yield this.shell(['am', 'broadcast', '-a', intent]);
  });

  return function broadcast(_x54) {
    return _broadcast.apply(this, arguments);
  };
}();

methods.endAndroidCoverage = function () {
  var _endAndroidCoverage = (0, _asyncToGenerator2.default)(function* () {
    if (this.instrumentProc && this.instrumentProc.isRunning) {
      yield this.instrumentProc.stop();
    }
  });

  return function endAndroidCoverage() {
    return _endAndroidCoverage.apply(this, arguments);
  };
}();

methods.instrument = function () {
  var _instrument = (0, _asyncToGenerator2.default)(function* (pkg, activity, instrumentWith) {
    if (activity[0] !== '.') {
      pkg = '';
    }

    let pkgActivity = (pkg + activity).replace(/\.+/g, '.');
    let stdout = yield this.shell(['am', 'instrument', '-e', 'main_activity', pkgActivity, instrumentWith]);

    if (stdout.indexOf('Exception') !== -1) {
      throw new Error(`Unknown exception during instrumentation. Original error ${stdout.split('\n')[0]}`);
    }
  });

  return function instrument(_x55, _x56, _x57) {
    return _instrument.apply(this, arguments);
  };
}();

methods.androidCoverage = function () {
  var _androidCoverage = (0, _asyncToGenerator2.default)(function* (instrumentClass, waitPkg, waitActivity) {
    var _this3 = this;

    if (!this.isValidClass(instrumentClass)) {
      throw new Error(`Invalid class ${instrumentClass}`);
    }

    return yield new _bluebird.default(function () {
      var _ref4 = (0, _asyncToGenerator2.default)(function* (resolve, reject) {
        let args = _this3.executable.defaultArgs.concat(['shell', 'am', 'instrument', '-e', 'coverage', 'true', '-w']).concat([instrumentClass]);

        _logger.default.debug(`Collecting coverage data with: ${[_this3.executable.path].concat(args).join(' ')}`);

        try {
          _this3.instrumentProc = new _teen_process.SubProcess(_this3.executable.path, args);
          yield _this3.instrumentProc.start(0);

          _this3.instrumentProc.on('output', (stdout, stderr) => {
            if (stderr) {
              reject(new Error(`Failed to run instrumentation. Original error: ${stderr}`));
            }
          });

          yield _this3.waitForActivity(waitPkg, waitActivity);
          resolve();
        } catch (e) {
          reject(new Error(`Android coverage failed. Original error: ${e.message}`));
        }
      });

      return function (_x61, _x62) {
        return _ref4.apply(this, arguments);
      };
    }());
  });

  return function androidCoverage(_x58, _x59, _x60) {
    return _androidCoverage.apply(this, arguments);
  };
}();

methods.getDeviceProperty = function () {
  var _getDeviceProperty = (0, _asyncToGenerator2.default)(function* (property) {
    let stdout = yield this.shell(['getprop', property]);
    let val = stdout.trim();

    _logger.default.debug(`Current device property '${property}': ${val}`);

    return val;
  });

  return function getDeviceProperty(_x63) {
    return _getDeviceProperty.apply(this, arguments);
  };
}();

methods.setDeviceProperty = function () {
  var _setDeviceProperty = (0, _asyncToGenerator2.default)(function* (prop, val, opts = {}) {
    const _opts$privileged = opts.privileged,
          privileged = _opts$privileged === void 0 ? true : _opts$privileged;

    _logger.default.debug(`Setting device property '${prop}' to '${val}'`);

    yield this.shell(['setprop', prop, val], {
      privileged
    });
  });

  return function setDeviceProperty(_x64, _x65) {
    return _setDeviceProperty.apply(this, arguments);
  };
}();

methods.getDeviceSysLanguage = function () {
  var _getDeviceSysLanguage = (0, _asyncToGenerator2.default)(function* () {
    return yield this.getDeviceProperty('persist.sys.language');
  });

  return function getDeviceSysLanguage() {
    return _getDeviceSysLanguage.apply(this, arguments);
  };
}();

methods.getDeviceSysCountry = function () {
  var _getDeviceSysCountry = (0, _asyncToGenerator2.default)(function* () {
    return yield this.getDeviceProperty('persist.sys.country');
  });

  return function getDeviceSysCountry() {
    return _getDeviceSysCountry.apply(this, arguments);
  };
}();

methods.getDeviceSysLocale = function () {
  var _getDeviceSysLocale = (0, _asyncToGenerator2.default)(function* () {
    return yield this.getDeviceProperty('persist.sys.locale');
  });

  return function getDeviceSysLocale() {
    return _getDeviceSysLocale.apply(this, arguments);
  };
}();

methods.getDeviceProductLanguage = function () {
  var _getDeviceProductLanguage = (0, _asyncToGenerator2.default)(function* () {
    return yield this.getDeviceProperty('ro.product.locale.language');
  });

  return function getDeviceProductLanguage() {
    return _getDeviceProductLanguage.apply(this, arguments);
  };
}();

methods.getDeviceProductCountry = function () {
  var _getDeviceProductCountry = (0, _asyncToGenerator2.default)(function* () {
    return yield this.getDeviceProperty('ro.product.locale.region');
  });

  return function getDeviceProductCountry() {
    return _getDeviceProductCountry.apply(this, arguments);
  };
}();

methods.getDeviceProductLocale = function () {
  var _getDeviceProductLocale = (0, _asyncToGenerator2.default)(function* () {
    return yield this.getDeviceProperty('ro.product.locale');
  });

  return function getDeviceProductLocale() {
    return _getDeviceProductLocale.apply(this, arguments);
  };
}();

methods.getModel = function () {
  var _getModel = (0, _asyncToGenerator2.default)(function* () {
    return yield this.getDeviceProperty('ro.product.model');
  });

  return function getModel() {
    return _getModel.apply(this, arguments);
  };
}();

methods.getManufacturer = function () {
  var _getManufacturer = (0, _asyncToGenerator2.default)(function* () {
    return yield this.getDeviceProperty('ro.product.manufacturer');
  });

  return function getManufacturer() {
    return _getManufacturer.apply(this, arguments);
  };
}();

methods.getScreenSize = function () {
  var _getScreenSize = (0, _asyncToGenerator2.default)(function* () {
    let stdout = yield this.shell(['wm', 'size']);
    let size = new RegExp(/Physical size: ([^\r?\n]+)*/g).exec(stdout);

    if (size && size.length >= 2) {
      return size[1].trim();
    }

    return null;
  });

  return function getScreenSize() {
    return _getScreenSize.apply(this, arguments);
  };
}();

methods.getScreenDensity = function () {
  var _getScreenDensity = (0, _asyncToGenerator2.default)(function* () {
    let stdout = yield this.shell(['wm', 'density']);
    let density = new RegExp(/Physical density: ([^\r?\n]+)*/g).exec(stdout);

    if (density && density.length >= 2) {
      let densityNumber = parseInt(density[1].trim(), 10);
      return isNaN(densityNumber) ? null : densityNumber;
    }

    return null;
  });

  return function getScreenDensity() {
    return _getScreenDensity.apply(this, arguments);
  };
}();

methods.setHttpProxy = function () {
  var _setHttpProxy = (0, _asyncToGenerator2.default)(function* (proxyHost, proxyPort) {
    let proxy = `${proxyHost}:${proxyPort}`;

    if (_lodash.default.isUndefined(proxyHost)) {
      throw new Error(`Call to setHttpProxy method with undefined proxy_host: ${proxy}`);
    }

    if (_lodash.default.isUndefined(proxyPort)) {
      throw new Error(`Call to setHttpProxy method with undefined proxy_port ${proxy}`);
    }

    const httpProxySettins = [['http_proxy', proxy], ['global_http_proxy_host', proxyHost], ['global_http_proxy_port', proxyPort]];

    for (var _i2 = 0; _i2 < httpProxySettins.length; _i2++) {
      const _httpProxySettins$_i = (0, _slicedToArray2.default)(httpProxySettins[_i2], 2),
            settingKey = _httpProxySettins$_i[0],
            settingValue = _httpProxySettins$_i[1];

      yield this.setSetting('global', settingKey, settingValue);
    }
  });

  return function setHttpProxy(_x66, _x67) {
    return _setHttpProxy.apply(this, arguments);
  };
}();

methods.deleteHttpProxy = function () {
  var _deleteHttpProxy = (0, _asyncToGenerator2.default)(function* () {
    const httpProxySettins = ['http_proxy', 'global_http_proxy_host', 'global_http_proxy_port', 'global_http_proxy_exclusion_list'];

    for (var _i3 = 0; _i3 < httpProxySettins.length; _i3++) {
      const setting = httpProxySettins[_i3];
      yield this.shell(['settings', 'delete', 'global', setting]);
    }
  });

  return function deleteHttpProxy() {
    return _deleteHttpProxy.apply(this, arguments);
  };
}();

methods.setSetting = function () {
  var _setSetting = (0, _asyncToGenerator2.default)(function* (namespace, setting, value) {
    return yield this.shell(['settings', 'put', namespace, setting, value]);
  });

  return function setSetting(_x68, _x69, _x70) {
    return _setSetting.apply(this, arguments);
  };
}();

methods.getSetting = function () {
  var _getSetting = (0, _asyncToGenerator2.default)(function* (namespace, setting) {
    return yield this.shell(['settings', 'get', namespace, setting]);
  });

  return function getSetting(_x71, _x72) {
    return _getSetting.apply(this, arguments);
  };
}();

methods.bugreport = function () {
  var _bugreport = (0, _asyncToGenerator2.default)(function* (timeout = 120000) {
    return yield this.adbExec(['bugreport'], {
      timeout
    });
  });

  return function bugreport() {
    return _bugreport.apply(this, arguments);
  };
}();

methods.screenrecord = function screenrecord(destination, options = {}) {
  const cmd = ['screenrecord'];
  const videoSize = options.videoSize,
        bitRate = options.bitRate,
        timeLimit = options.timeLimit,
        bugReport = options.bugReport;

  if (_appiumSupport.util.hasValue(videoSize)) {
    cmd.push('--size', videoSize);
  }

  if (_appiumSupport.util.hasValue(timeLimit)) {
    cmd.push('--time-limit', timeLimit);
  }

  if (_appiumSupport.util.hasValue(bitRate)) {
    cmd.push('--bit-rate', bitRate);
  }

  if (bugReport) {
    cmd.push('--bugreport');
  }

  cmd.push(destination);
  const fullCmd = [...this.executable.defaultArgs, 'shell', ...cmd];

  _logger.default.debug(`Building screenrecord process with the command line: adb ${(0, _shellQuote.quote)(fullCmd)}`);

  return new _teen_process.SubProcess(this.executable.path, fullCmd);
};

methods.performEditorAction = function () {
  var _performEditorAction = (0, _asyncToGenerator2.default)(function* (action) {
    _logger.default.debug(`Performing editor action: ${action}`);

    const defaultIME = yield this.defaultIME();
    yield this.enableIME(APPIUM_IME);

    try {
      yield this.setIME(APPIUM_IME);
      yield this.shell(['input', 'text', `/${action}/`]);
    } finally {
      yield this.setIME(defaultIME);
    }
  });

  return function performEditorAction(_x73) {
    return _performEditorAction.apply(this, arguments);
  };
}();

var _default = methods;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
