"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.REMOTE_CACHE_ROOT = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _helpers = require("../helpers.js");

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("../logger.js"));

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash"));

var _asyncbox = require("asyncbox");

var _appiumSupport = require("appium-support");

var _semver = _interopRequireDefault(require("semver"));

var _os = _interopRequireDefault(require("os"));

var _lruCache = _interopRequireDefault(require("lru-cache"));

let apkUtilsMethods = {};
const ACTIVITIES_TROUBLESHOOTING_LINK = 'https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/android/activity-startup.md';
apkUtilsMethods.APP_INSTALL_STATE = {
  UNKNOWN: 'unknown',
  NOT_INSTALLED: 'notInstalled',
  NEWER_VERSION_INSTALLED: 'newerVersionInstalled',
  SAME_VERSION_INSTALLED: 'sameVersionInstalled',
  OLDER_VERSION_INSTALLED: 'olderVersionInstalled'
};
const REMOTE_CACHE_ROOT = '/data/local/tmp/appium_cache';
exports.REMOTE_CACHE_ROOT = REMOTE_CACHE_ROOT;

apkUtilsMethods.isAppInstalled = function () {
  var _isAppInstalled = (0, _asyncToGenerator2.default)(function* (pkg) {
    _logger.default.debug(`Getting install status for ${pkg}`);

    const installedPattern = new RegExp(`^\\s*Package\\s+\\[${_lodash.default.escapeRegExp(pkg)}\\][^:]+:$`, 'm');

    try {
      const stdout = yield this.shell(['dumpsys', 'package', pkg]);
      const isInstalled = installedPattern.test(stdout);

      _logger.default.debug(`'${pkg}' is${!isInstalled ? ' not' : ''} installed`);

      return isInstalled;
    } catch (e) {
      throw new Error(`Error finding if '${pkg}' is installed. Original error: ${e.message}`);
    }
  });

  return function isAppInstalled(_x) {
    return _isAppInstalled.apply(this, arguments);
  };
}();

apkUtilsMethods.startUri = function () {
  var _startUri = (0, _asyncToGenerator2.default)(function* (uri, pkg) {
    if (!uri || !pkg) {
      throw new Error('URI and package arguments are required');
    }

    const args = ['am', 'start', '-W', '-a', 'android.intent.action.VIEW', '-d', uri.replace(/&/g, '\\&'), pkg];

    try {
      const res = yield this.shell(args);

      if (res.toLowerCase().includes('unable to resolve intent')) {
        throw new Error(res);
      }
    } catch (e) {
      throw new Error(`Error attempting to start URI. Original error: ${e}`);
    }
  });

  return function startUri(_x2, _x3) {
    return _startUri.apply(this, arguments);
  };
}();

apkUtilsMethods.startApp = function () {
  var _startApp = (0, _asyncToGenerator2.default)(function* (startAppOptions = {}) {
    if (!startAppOptions.activity || !startAppOptions.pkg) {
      throw new Error('activity and pkg are required to start an application');
    }

    startAppOptions = _lodash.default.clone(startAppOptions);
    startAppOptions.activity = startAppOptions.activity.replace('$', '\\$');

    _lodash.default.defaults(startAppOptions, {
      waitPkg: startAppOptions.pkg,
      waitActivity: false,
      retry: true,
      stopApp: true
    });

    startAppOptions.waitPkg = startAppOptions.waitPkg || startAppOptions.pkg;
    const apiLevel = yield this.getApiLevel();
    const cmd = (0, _helpers.buildStartCmd)(startAppOptions, apiLevel);

    try {
      const shellOpts = {};

      if (_lodash.default.isInteger(startAppOptions.waitDuration) && startAppOptions.waitDuration > 20000) {
        shellOpts.timeout = startAppOptions.waitDuration;
      }

      const stdout = yield this.shell(cmd, shellOpts);

      if (stdout.includes('Error: Activity class') && stdout.includes('does not exist')) {
        if (startAppOptions.retry && !startAppOptions.activity.startsWith('.')) {
          _logger.default.debug(`We tried to start an activity that doesn't exist, ` + `retrying with '.${startAppOptions.activity}' activity name`);

          startAppOptions.activity = `.${startAppOptions.activity}`;
          startAppOptions.retry = false;
          return yield this.startApp(startAppOptions);
        }

        throw new Error(`Activity name '${startAppOptions.activity}' used to start the app doesn't ` + `exist or cannot be launched! Make sure it exists and is a launchable activity`);
      } else if (stdout.includes('java.lang.SecurityException')) {
        throw new Error(`The permission to start '${startAppOptions.activity}' activity has been denied.` + `Make sure the activity/package names are correct.`);
      }

      if (startAppOptions.waitActivity) {
        yield this.waitForActivity(startAppOptions.waitPkg, startAppOptions.waitActivity, startAppOptions.waitDuration);
      }

      return stdout;
    } catch (e) {
      throw new Error(`Cannot start the '${startAppOptions.pkg}' application. ` + `Visit ${ACTIVITIES_TROUBLESHOOTING_LINK} for troubleshooting. ` + `Original error: ${e.message}`);
    }
  });

  return function startApp() {
    return _startApp.apply(this, arguments);
  };
}();

apkUtilsMethods.dumpWindows = function () {
  var _dumpWindows = (0, _asyncToGenerator2.default)(function* () {
    const apiLevel = yield this.getApiLevel();
    const dumpsysArg = apiLevel >= 29 ? 'displays' : 'windows';
    const cmd = ['dumpsys', 'window', dumpsysArg];
    return yield this.shell(cmd);
  });

  return function dumpWindows() {
    return _dumpWindows.apply(this, arguments);
  };
}();

apkUtilsMethods.getFocusedPackageAndActivity = function () {
  var _getFocusedPackageAndActivity = (0, _asyncToGenerator2.default)(function* () {
    _logger.default.debug('Getting focused package and activity');

    const nullFocusedAppRe = new RegExp(/^\s*mFocusedApp=null/, 'm');
    const focusedAppRe = new RegExp('^\\s*mFocusedApp.+Record\\{.*\\s([^\\s\\/\\}]+)' + '\\/([^\\s\\/\\}\\,]+)\\,?(\\s[^\\s\\/\\}]+)*\\}', 'm');
    const nullCurrentFocusRe = new RegExp(/^\s*mCurrentFocus=null/, 'm');
    const currentFocusAppRe = new RegExp('^\\s*mCurrentFocus.+\\{.+\\s([^\\s\\/]+)\\/([^\\s]+)\\b', 'm');

    try {
      const stdout = yield this.dumpWindows();
      var _arr = [focusedAppRe, currentFocusAppRe];

      for (var _i = 0; _i < _arr.length; _i++) {
        const pattern = _arr[_i];
        const match = pattern.exec(stdout);

        if (match) {
          return {
            appPackage: match[1].trim(),
            appActivity: match[2].trim()
          };
        }
      }

      var _arr2 = [nullFocusedAppRe, nullCurrentFocusRe];

      for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
        const pattern = _arr2[_i2];

        if (pattern.exec(stdout)) {
          return {
            appPackage: null,
            appActivity: null
          };
        }
      }

      throw new Error('Could not parse activity from dumpsys');
    } catch (e) {
      throw new Error(`Could not get focusPackageAndActivity. Original error: ${e.message}`);
    }
  });

  return function getFocusedPackageAndActivity() {
    return _getFocusedPackageAndActivity.apply(this, arguments);
  };
}();

apkUtilsMethods.waitForActivityOrNot = function () {
  var _waitForActivityOrNot = (0, _asyncToGenerator2.default)(function* (pkg, activity, waitForStop, waitMs = 20000) {
    var _this = this;

    if (!pkg || !activity) {
      throw new Error('Package and activity required.');
    }

    _logger.default.debug(`Waiting up to ${waitMs}ms for activity matching pkg: '${pkg}' and ` + `activity: '${activity}' to${waitForStop ? ' not' : ''} be focused`);

    const splitNames = names => names.split(',').map(name => name.trim());

    const allPackages = splitNames(pkg);
    const allActivities = splitNames(activity);
    let possibleActivityNames = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = allActivities[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        let oneActivity = _step.value;

        if (oneActivity.startsWith('.')) {
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = allPackages[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              let currentPkg = _step2.value;
              possibleActivityNames.push(`${currentPkg}${oneActivity}`.replace(/\.+/g, '.'));
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        } else {
          possibleActivityNames.push(oneActivity);
          possibleActivityNames.push(`${pkg}.${oneActivity}`);
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    _logger.default.debug(`Possible activities, to be checked: ${possibleActivityNames.map(name => `'${name}'`).join(', ')}`);

    let possibleActivityPatterns = possibleActivityNames.map(possibleActivityName => new RegExp(`^${possibleActivityName.replace(/\./g, '\\.').replace(/\*/g, '.*?').replace(/\$/g, '\\$')}$`));
    let retries = parseInt(waitMs / 750, 10) || 1;
    retries = isNaN(retries) ? 30 : retries;
    yield (0, _asyncbox.retryInterval)(retries, 750, (0, _asyncToGenerator2.default)(function* () {
      let _ref2 = yield _this.getFocusedPackageAndActivity(),
          appPackage = _ref2.appPackage,
          appActivity = _ref2.appActivity;

      if (appActivity && appPackage) {
        let fullyQualifiedActivity = appActivity.startsWith('.') ? `${appPackage}${appActivity}` : appActivity;

        _logger.default.debug(`Found package: '${appPackage}' and fully qualified activity name : '${fullyQualifiedActivity}'`);

        let foundAct = _lodash.default.includes(allPackages, appPackage) && _lodash.default.findIndex(possibleActivityPatterns, possiblePattern => possiblePattern.test(fullyQualifiedActivity)) !== -1;

        if (!waitForStop && foundAct || waitForStop && !foundAct) {
          return;
        }
      }

      _logger.default.debug('Incorrect package and activity. Retrying.');

      throw new Error(`${possibleActivityNames.map(name => `'${name}'`).join(' or ')} never ${waitForStop ? 'stopped' : 'started'}. ` + `Visit ${ACTIVITIES_TROUBLESHOOTING_LINK} for troubleshooting`);
    }));
  });

  return function waitForActivityOrNot(_x4, _x5, _x6) {
    return _waitForActivityOrNot.apply(this, arguments);
  };
}();

apkUtilsMethods.waitForActivity = function () {
  var _waitForActivity = (0, _asyncToGenerator2.default)(function* (pkg, act, waitMs = 20000) {
    yield this.waitForActivityOrNot(pkg, act, false, waitMs);
  });

  return function waitForActivity(_x7, _x8) {
    return _waitForActivity.apply(this, arguments);
  };
}();

apkUtilsMethods.waitForNotActivity = function () {
  var _waitForNotActivity = (0, _asyncToGenerator2.default)(function* (pkg, act, waitMs = 20000) {
    yield this.waitForActivityOrNot(pkg, act, true, waitMs);
  });

  return function waitForNotActivity(_x9, _x10) {
    return _waitForNotActivity.apply(this, arguments);
  };
}();

apkUtilsMethods.uninstallApk = function () {
  var _uninstallApk = (0, _asyncToGenerator2.default)(function* (pkg, options = {}) {
    _logger.default.debug(`Uninstalling ${pkg}`);

    if (!(yield this.isAppInstalled(pkg))) {
      _logger.default.info(`${pkg} was not uninstalled, because it was not present on the device`);

      return false;
    }

    const cmd = ['uninstall'];

    if (options.keepData) {
      cmd.push('-k');
    }

    cmd.push(pkg);
    let stdout;

    try {
      yield this.forceStop(pkg);
      stdout = (yield this.adbExec(cmd, {
        timeout: options.timeout
      })).trim();
    } catch (e) {
      throw new Error(`Unable to uninstall APK. Original error: ${e.message}`);
    }

    _logger.default.debug(`'adb ${cmd.join(' ')}' command output: ${stdout}`);

    if (stdout.includes('Success')) {
      _logger.default.info(`${pkg} was successfully uninstalled`);

      return true;
    }

    _logger.default.info(`${pkg} was not uninstalled`);

    return false;
  });

  return function uninstallApk(_x11) {
    return _uninstallApk.apply(this, arguments);
  };
}();

apkUtilsMethods.installFromDevicePath = function () {
  var _installFromDevicePath = (0, _asyncToGenerator2.default)(function* (apkPathOnDevice, opts = {}) {
    let stdout = yield this.shell(['pm', 'install', '-r', apkPathOnDevice], opts);

    if (stdout.indexOf('Failure') !== -1) {
      throw new Error(`Remote install failed: ${stdout}`);
    }
  });

  return function installFromDevicePath(_x12) {
    return _installFromDevicePath.apply(this, arguments);
  };
}();

apkUtilsMethods.cacheApk = function () {
  var _cacheApk = (0, _asyncToGenerator2.default)(function* (apkPath, options = {}) {
    const appHash = yield _appiumSupport.fs.hash(apkPath);

    const remotePath = _path.default.posix.join(REMOTE_CACHE_ROOT, `${appHash}.apk`);

    const remoteCachedFiles = [];

    try {
      const errorMarker = '_ERROR_';
      let lsOutput = null;

      if (this._areExtendedLsOptionsSupported === true || !_lodash.default.isBoolean(this._areExtendedLsOptionsSupported)) {
        lsOutput = yield this.shell([`ls -t -1 ${REMOTE_CACHE_ROOT} 2>&1 || echo ${errorMarker}`]);
      }

      if (!_lodash.default.isString(lsOutput) || lsOutput.includes(errorMarker) && !lsOutput.includes(REMOTE_CACHE_ROOT)) {
        if (!_lodash.default.isBoolean(this._areExtendedLsOptionsSupported)) {
          _logger.default.debug('The current Android API does not support extended ls options. ' + 'Defaulting to no-options call');
        }

        lsOutput = yield this.shell([`ls ${REMOTE_CACHE_ROOT} 2>&1 || echo ${errorMarker}`]);
        this._areExtendedLsOptionsSupported = false;
      } else {
        this._areExtendedLsOptionsSupported = true;
      }

      if (lsOutput.includes(errorMarker)) {
        throw new Error(lsOutput.substring(0, lsOutput.indexOf(errorMarker)));
      }

      remoteCachedFiles.push(...lsOutput.split('\n').map(x => x.trim()).filter(Boolean));
    } catch (e) {
      _logger.default.debug(`Got an error '${e.message.trim()}' while getting the list of files in the cache. ` + `Assuming the cache does not exist yet`);

      yield this.shell(['mkdir', '-p', REMOTE_CACHE_ROOT]);
    }

    _logger.default.debug(`The count of applications in the cache: ${remoteCachedFiles.length}`);

    const toHash = remotePath => _path.default.posix.parse(remotePath).name;

    if (remoteCachedFiles.find(x => toHash(x) === appHash)) {
      _logger.default.info(`The application at '${apkPath}' is already cached to '${remotePath}'`);
    } else {
      _logger.default.info(`Caching the application at '${apkPath}' to '${remotePath}'`);

      const started = process.hrtime();
      yield this.push(apkPath, remotePath, {
        timeout: options.timeout
      });

      const _process$hrtime = process.hrtime(started),
            _process$hrtime2 = (0, _slicedToArray2.default)(_process$hrtime, 2),
            seconds = _process$hrtime2[0],
            nanos = _process$hrtime2[1];

      const _ref3 = yield _appiumSupport.fs.stat(apkPath),
            size = _ref3.size;

      _logger.default.info(`The upload of '${_path.default.basename(apkPath)}' (${_appiumSupport.util.toReadableSizeString(size)}) ` + `took ${(seconds + nanos / 1e9).toFixed(3)}s`);
    }

    if (!this.remoteAppsCache) {
      this.remoteAppsCache = new _lruCache.default({
        max: this.remoteAppsCacheLimit
      });
    }

    _lodash.default.difference(this.remoteAppsCache.keys(), remoteCachedFiles.map(toHash)).forEach(hash => this.remoteAppsCache.del(hash));

    this.remoteAppsCache.set(appHash, remotePath);
    const entriesToCleanup = remoteCachedFiles.map(x => _path.default.posix.join(REMOTE_CACHE_ROOT, x)).filter(x => !this.remoteAppsCache.has(toHash(x))).slice(this.remoteAppsCacheLimit - this.remoteAppsCache.keys().length);

    if (!_lodash.default.isEmpty(entriesToCleanup)) {
      try {
        yield this.shell(['rm', '-f', ...entriesToCleanup]);

        _logger.default.debug(`Deleted ${entriesToCleanup.length} expired application cache entries`);
      } catch (e) {
        _logger.default.warn(`Cannot delete ${entriesToCleanup.length} expired application cache entries. ` + `Original error: ${e.message}`);
      }
    }

    return remotePath;
  });

  return function cacheApk(_x13) {
    return _cacheApk.apply(this, arguments);
  };
}();

apkUtilsMethods.install = function () {
  var _install = (0, _asyncToGenerator2.default)(function* (appPath, options = {}) {
    var _this2 = this;

    if (appPath.endsWith(_helpers.APKS_EXTENSION)) {
      return yield this.installApks(appPath, options);
    }

    options = _lodash.default.cloneDeep(options);

    _lodash.default.defaults(options, {
      replace: true,
      timeout: this.adbExecTimeout === _helpers.DEFAULT_ADB_EXEC_TIMEOUT ? _helpers.APK_INSTALL_TIMEOUT : this.adbExecTimeout,
      timeoutCapName: 'androidInstallTimeout'
    });

    const installArgs = (0, _helpers.buildInstallArgs)((yield this.getApiLevel()), options);
    const installOpts = {
      timeout: options.timeout,
      timeoutCapName: options.timeoutCapName
    };

    let performAppInstall = function () {
      var _ref4 = (0, _asyncToGenerator2.default)(function* () {
        return yield _this2.adbExec(['install', ...installArgs, appPath], installOpts);
      });

      return function performAppInstall() {
        return _ref4.apply(this, arguments);
      };
    }();

    if (this.remoteAppsCacheLimit > 0) {
      const cachedRemotePath = yield this.cacheApk(appPath, {
        timeout: options.timeout
      });

      performAppInstall = function () {
        var _ref5 = (0, _asyncToGenerator2.default)(function* () {
          return yield _this2.shell(['pm', 'install', ...installArgs, cachedRemotePath], installOpts);
        });

        return function performAppInstall() {
          return _ref5.apply(this, arguments);
        };
      }();
    }

    try {
      const started = process.hrtime();
      const output = yield performAppInstall();

      const _process$hrtime3 = process.hrtime(started),
            _process$hrtime4 = (0, _slicedToArray2.default)(_process$hrtime3, 2),
            seconds = _process$hrtime4[0],
            nanos = _process$hrtime4[1];

      _logger.default.info(`The installation of '${_path.default.basename(appPath)}' took ${(seconds + nanos / 1e9).toFixed(3)}s`);

      const truncatedOutput = !_lodash.default.isString(output) || output.length <= 300 ? output : `${output.substr(0, 150)}...${output.substr(output.length - 150)}`;

      _logger.default.debug(`Install command stdout: ${truncatedOutput}`);

      if (/\[INSTALL[A-Z_]+FAILED[A-Z_]+\]/.test(output)) {
        throw new Error(output);
      }
    } catch (err) {
      if (!err.message.includes('INSTALL_FAILED_ALREADY_EXISTS')) {
        throw err;
      }

      _logger.default.debug(`Application '${appPath}' already installed. Continuing.`);
    }
  });

  return function install(_x14) {
    return _install.apply(this, arguments);
  };
}();

apkUtilsMethods.getApplicationInstallState = function () {
  var _getApplicationInstallState = (0, _asyncToGenerator2.default)(function* (appPath, pkg = null) {
    let apkInfo = null;

    if (!pkg) {
      apkInfo = yield this.getApkInfo(appPath);
      pkg = apkInfo.name;
    }

    if (!pkg) {
      _logger.default.warn(`Cannot read the package name of '${appPath}'`);

      return this.APP_INSTALL_STATE.UNKNOWN;
    }

    if (!(yield this.isAppInstalled(pkg))) {
      _logger.default.debug(`App '${appPath}' is not installed`);

      return this.APP_INSTALL_STATE.NOT_INSTALLED;
    }

    const _ref6 = yield this.getPackageInfo(pkg),
          pkgVersionCode = _ref6.versionCode,
          pkgVersionNameStr = _ref6.versionName;

    const pkgVersionName = _semver.default.valid(_semver.default.coerce(pkgVersionNameStr));

    if (!apkInfo) {
      apkInfo = yield this.getApkInfo(appPath);
    }

    const _apkInfo = apkInfo,
          apkVersionCode = _apkInfo.versionCode,
          apkVersionNameStr = _apkInfo.versionName;

    const apkVersionName = _semver.default.valid(_semver.default.coerce(apkVersionNameStr));

    if (!_lodash.default.isInteger(apkVersionCode) || !_lodash.default.isInteger(pkgVersionCode)) {
      _logger.default.warn(`Cannot read version codes of '${appPath}' and/or '${pkg}'`);

      if (!_lodash.default.isString(apkVersionName) || !_lodash.default.isString(pkgVersionName)) {
        _logger.default.warn(`Cannot read version names of '${appPath}' and/or '${pkg}'`);

        return this.APP_INSTALL_STATE.UNKNOWN;
      }
    }

    if (_lodash.default.isInteger(apkVersionCode) && _lodash.default.isInteger(pkgVersionCode)) {
      if (pkgVersionCode > apkVersionCode) {
        _logger.default.debug(`The version code of the installed '${pkg}' is greater than the application version code (${pkgVersionCode} > ${apkVersionCode})`);

        return this.APP_INSTALL_STATE.NEWER_VERSION_INSTALLED;
      }

      if (pkgVersionCode === apkVersionCode) {
        if (_lodash.default.isString(apkVersionName) && _lodash.default.isString(pkgVersionName) && _semver.default.satisfies(pkgVersionName, `>=${apkVersionName}`)) {
          _logger.default.debug(`The version name of the installed '${pkg}' is greater or equal to the application version name ('${pkgVersionName}' >= '${apkVersionName}')`);

          return _semver.default.satisfies(pkgVersionName, `>${apkVersionName}`) ? this.APP_INSTALL_STATE.NEWER_VERSION_INSTALLED : this.APP_INSTALL_STATE.SAME_VERSION_INSTALLED;
        }

        if (!_lodash.default.isString(apkVersionName) || !_lodash.default.isString(pkgVersionName)) {
          _logger.default.debug(`The version name of the installed '${pkg}' is equal to application version name (${pkgVersionCode} === ${apkVersionCode})`);

          return this.APP_INSTALL_STATE.SAME_VERSION_INSTALLED;
        }
      }
    } else if (_lodash.default.isString(apkVersionName) && _lodash.default.isString(pkgVersionName) && _semver.default.satisfies(pkgVersionName, `>=${apkVersionName}`)) {
      _logger.default.debug(`The version name of the installed '${pkg}' is greater or equal to the application version name ('${pkgVersionName}' >= '${apkVersionName}')`);

      return _semver.default.satisfies(pkgVersionName, `>${apkVersionName}`) ? this.APP_INSTALL_STATE.NEWER_VERSION_INSTALLED : this.APP_INSTALL_STATE.SAME_VERSION_INSTALLED;
    }

    _logger.default.debug(`The installed '${pkg}' package is older than '${appPath}' (${pkgVersionCode} < ${apkVersionCode} or '${pkgVersionName}' < '${apkVersionName}')'`);

    return this.APP_INSTALL_STATE.OLDER_VERSION_INSTALLED;
  });

  return function getApplicationInstallState(_x15) {
    return _getApplicationInstallState.apply(this, arguments);
  };
}();

apkUtilsMethods.installOrUpgrade = function () {
  var _installOrUpgrade = (0, _asyncToGenerator2.default)(function* (appPath, pkg = null, options = {}) {
    if (!pkg) {
      const apkInfo = yield this.getApkInfo(appPath);
      pkg = apkInfo.name;
    }

    const appState = yield this.getApplicationInstallState(appPath, pkg);

    switch (appState) {
      case this.APP_INSTALL_STATE.NOT_INSTALLED:
        _logger.default.debug(`Installing '${appPath}'`);

        yield this.install(appPath, Object.assign({}, options, {
          replace: false
        }));
        return;

      case this.APP_INSTALL_STATE.NEWER_VERSION_INSTALLED:
      case this.APP_INSTALL_STATE.SAME_VERSION_INSTALLED:
        _logger.default.debug(`There is no need to install/upgrade '${appPath}'`);

        return;

      case this.APP_INSTALL_STATE.OLDER_VERSION_INSTALLED:
        _logger.default.debug(`Executing upgrade of '${appPath}'`);

        break;

      default:
        _logger.default.debug(`The current install state of '${appPath}' is unknown. Installing anyway`);

        break;
    }

    try {
      yield this.install(appPath, Object.assign({}, options, {
        replace: true
      }));
    } catch (err) {
      _logger.default.warn(`Cannot upgrade '${pkg}' because of '${err.message}'. Trying full reinstall`);

      if (!(yield this.uninstallApk(pkg))) {
        throw new Error(`'${pkg}' package cannot be uninstalled`);
      }

      yield this.install(appPath, Object.assign({}, options, {
        replace: false
      }));
    }
  });

  return function installOrUpgrade(_x16) {
    return _installOrUpgrade.apply(this, arguments);
  };
}();

apkUtilsMethods.extractStringsFromApk = function () {
  var _extractStringsFromApk = (0, _asyncToGenerator2.default)(function* (appPath, language, out) {
    _logger.default.debug(`Extracting strings from for language: ${language || 'default'}`);

    if (appPath.endsWith(_helpers.APKS_EXTENSION)) {
      appPath = yield this.extractLanguageApk(appPath, language);
    }

    yield this.initAapt();
    let rawAaptOutput;

    try {
      const _ref7 = yield (0, _teen_process.exec)(this.binaries.aapt, ['d', '--values', 'resources', appPath]),
            stdout = _ref7.stdout;

      rawAaptOutput = stdout;
    } catch (e) {
      throw new Error(`Cannot extract resources from '${appPath}'. Original error: ${e.message}`);
    }

    const defaultConfigMarker = '(default)';
    let configMarker = language || defaultConfigMarker;

    if (configMarker.includes('-') && !configMarker.includes('-r')) {
      configMarker = configMarker.replace('-', '-r');
    }

    if (configMarker.toLowerCase().startsWith('en')) {
      const _ref8 = yield (0, _teen_process.exec)(this.binaries.aapt, ['d', 'configurations', appPath]),
            stdout = _ref8.stdout;

      const configs = stdout.split(_os.default.EOL);

      if (!configs.includes(configMarker)) {
        _logger.default.debug(`There is no '${configMarker}' configuration. ` + `Replacing it with '${defaultConfigMarker}'`);

        configMarker = defaultConfigMarker;
      }
    }

    const apkStrings = {};
    let isInConfig = false;
    let currentResourceId = null;
    let isInPluralGroup = false;

    const startsWithAny = (s, arr) => arr.reduce((acc, x) => acc || s.startsWith(x), false);

    const normalizeStringMatch = s => s.replace(/"$/, '').replace(/^"/, '').replace(/\\"/g, '"');

    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = rawAaptOutput.split(_os.default.EOL)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        const line = _step3.value;
        const trimmedLine = line.trim();

        if (_lodash.default.isEmpty(trimmedLine)) {
          continue;
        }

        if (startsWithAny(trimmedLine, ['config', 'type', 'spec', 'Package'])) {
          isInConfig = trimmedLine.startsWith(`config ${configMarker}:`);
          currentResourceId = null;
          isInPluralGroup = false;
          continue;
        }

        if (!isInConfig) {
          continue;
        }

        if (trimmedLine.startsWith('resource')) {
          isInPluralGroup = false;
          currentResourceId = null;

          if (trimmedLine.includes(':string/')) {
            const match = /:string\/(\S+):/.exec(trimmedLine);

            if (match) {
              currentResourceId = match[1];
            }
          } else if (trimmedLine.includes(':plurals/')) {
            const match = /:plurals\/(\S+):/.exec(trimmedLine);

            if (match) {
              currentResourceId = match[1];
              isInPluralGroup = true;
            }
          }

          continue;
        }

        if (currentResourceId && trimmedLine.startsWith('(string')) {
          const match = /"[^"\\]*(?:\\.[^"\\]*)*"/.exec(trimmedLine);

          if (match) {
            apkStrings[currentResourceId] = normalizeStringMatch(match[0]);
          }

          currentResourceId = null;
          continue;
        }

        if (currentResourceId && isInPluralGroup && trimmedLine.includes(': (string')) {
          const match = /"[^"\\]*(?:\\.[^"\\]*)*"/.exec(trimmedLine);

          if (match) {
            apkStrings[currentResourceId] = [...(apkStrings[currentResourceId] || []), normalizeStringMatch(match[0])];
          }

          continue;
        }
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
          _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    if (_lodash.default.isEmpty(apkStrings)) {
      _logger.default.warn(`No strings have been found in '${appPath}' resources ` + `for '${configMarker}' configuration`);
    } else {
      _logger.default.info(`Successfully extracted ${_lodash.default.keys(apkStrings).length} strings from '${appPath}' resources ` + `for '${configMarker}' configuration`);
    }

    const localPath = _path.default.resolve(out, 'strings.json');

    yield (0, _appiumSupport.mkdirp)(out);
    yield _appiumSupport.fs.writeFile(localPath, JSON.stringify(apkStrings, null, 2), 'utf-8');
    return {
      apkStrings,
      localPath
    };
  });

  return function extractStringsFromApk(_x17, _x18, _x19) {
    return _extractStringsFromApk.apply(this, arguments);
  };
}();

apkUtilsMethods.getDeviceLanguage = function () {
  var _getDeviceLanguage = (0, _asyncToGenerator2.default)(function* () {
    let language;

    if ((yield this.getApiLevel()) < 23) {
      language = yield this.getDeviceSysLanguage();

      if (!language) {
        language = yield this.getDeviceProductLanguage();
      }
    } else {
      language = (yield this.getDeviceLocale()).split('-')[0];
    }

    return language;
  });

  return function getDeviceLanguage() {
    return _getDeviceLanguage.apply(this, arguments);
  };
}();

apkUtilsMethods.getDeviceCountry = function () {
  var _getDeviceCountry = (0, _asyncToGenerator2.default)(function* () {
    let country = yield this.getDeviceSysCountry();

    if (!country) {
      country = yield this.getDeviceProductCountry();
    }

    return country;
  });

  return function getDeviceCountry() {
    return _getDeviceCountry.apply(this, arguments);
  };
}();

apkUtilsMethods.getDeviceLocale = function () {
  var _getDeviceLocale = (0, _asyncToGenerator2.default)(function* () {
    let locale = yield this.getDeviceSysLocale();

    if (!locale) {
      locale = yield this.getDeviceProductLocale();
    }

    return locale;
  });

  return function getDeviceLocale() {
    return _getDeviceLocale.apply(this, arguments);
  };
}();

apkUtilsMethods.setDeviceLocale = function () {
  var _setDeviceLocale = (0, _asyncToGenerator2.default)(function* (locale) {
    const validateLocale = new RegExp(/[a-zA-Z]+-[a-zA-Z0-9]+/);

    if (!validateLocale.test(locale)) {
      _logger.default.warn(`setDeviceLocale requires the following format: en-US or ja-JP`);

      return;
    }

    let split_locale = locale.split('-');
    yield this.setDeviceLanguageCountry(split_locale[0], split_locale[1]);
  });

  return function setDeviceLocale(_x20) {
    return _setDeviceLocale.apply(this, arguments);
  };
}();

apkUtilsMethods.ensureCurrentLocale = function () {
  var _ensureCurrentLocale = (0, _asyncToGenerator2.default)(function* (language, country, script = null) {
    var _this3 = this;

    const hasLanguage = _lodash.default.isString(language);

    const hasCountry = _lodash.default.isString(country);

    if (!hasLanguage && !hasCountry) {
      _logger.default.warn('ensureCurrentLocale requires language or country');

      return false;
    }

    language = (language || '').toLowerCase();
    country = (country || '').toLowerCase();
    const apiLevel = yield this.getApiLevel();
    return yield (0, _asyncbox.retryInterval)(5, 1000, (0, _asyncToGenerator2.default)(function* () {
      try {
        if (apiLevel < 23) {
          let curLanguage, curCountry;

          if (hasLanguage) {
            curLanguage = (yield _this3.getDeviceLanguage()).toLowerCase();

            if (!hasCountry && language === curLanguage) {
              return true;
            }
          }

          if (hasCountry) {
            curCountry = (yield _this3.getDeviceCountry()).toLowerCase();

            if (!hasLanguage && country === curCountry) {
              return true;
            }
          }

          if (language === curLanguage && country === curCountry) {
            return true;
          }
        } else {
          const curLocale = (yield _this3.getDeviceLocale()).toLowerCase();
          const localeCode = script ? `${language}-${script.toLowerCase()}-${country}` : `${language}-${country}`;

          if (localeCode === curLocale) {
            _logger.default.debug(`Requested locale is equal to current locale: '${curLocale}'`);

            return true;
          }
        }

        return false;
      } catch (err) {
        _logger.default.error(`Unable to check device localization: ${err.message}`);

        _logger.default.debug('Restarting ADB and retrying...');

        yield _this3.restartAdb();
        throw err;
      }
    }));
  });

  return function ensureCurrentLocale(_x21, _x22) {
    return _ensureCurrentLocale.apply(this, arguments);
  };
}();

apkUtilsMethods.setDeviceLanguageCountry = function () {
  var _setDeviceLanguageCountry = (0, _asyncToGenerator2.default)(function* (language, country, script = null) {
    let hasLanguage = language && _lodash.default.isString(language);

    let hasCountry = country && _lodash.default.isString(country);

    if (!hasLanguage || !hasCountry) {
      _logger.default.warn(`setDeviceLanguageCountry requires language and country at least`);

      _logger.default.warn(`Got language: '${language}' and country: '${country}'`);

      return;
    }

    let apiLevel = yield this.getApiLevel();
    language = (language || '').toLowerCase();
    country = (country || '').toUpperCase();

    if (apiLevel < 23) {
      let curLanguage = (yield this.getDeviceLanguage()).toLowerCase();
      let curCountry = (yield this.getDeviceCountry()).toUpperCase();

      if (language !== curLanguage || country !== curCountry) {
        yield this.setDeviceSysLocaleViaSettingApp(language, country);
      }
    } else {
      let curLocale = yield this.getDeviceLocale();
      const localeCode = script ? `${language}-${script}-${country}` : `${language}-${country}`;

      _logger.default.debug(`Current locale: '${curLocale}'; requested locale: '${localeCode}'`);

      if (localeCode.toLowerCase() !== curLocale.toLowerCase()) {
        yield this.setDeviceSysLocaleViaSettingApp(language, country, script);
      }
    }
  });

  return function setDeviceLanguageCountry(_x23, _x24) {
    return _setDeviceLanguageCountry.apply(this, arguments);
  };
}();

apkUtilsMethods.getApkInfo = function () {
  var _getApkInfo = (0, _asyncToGenerator2.default)(function* (appPath) {
    if (!(yield _appiumSupport.fs.exists(appPath))) {
      throw new Error(`The file at path ${appPath} does not exist or is not accessible`);
    }

    if (appPath.endsWith(_helpers.APKS_EXTENSION)) {
      appPath = yield this.extractBaseApk(appPath);
    }

    yield this.initAapt();

    try {
      const _ref10 = yield (0, _teen_process.exec)(this.binaries.aapt, ['d', 'badging', appPath]),
            stdout = _ref10.stdout;

      const matches = new RegExp(/package: name='([^']+)' versionCode='(\d+)' versionName='([^']+)'/).exec(stdout);

      if (matches) {
        return {
          name: matches[1],
          versionCode: parseInt(matches[2], 10),
          versionName: matches[3]
        };
      }
    } catch (err) {
      _logger.default.warn(`Error "${err.message}" while getting badging info`);
    }

    return {};
  });

  return function getApkInfo(_x25) {
    return _getApkInfo.apply(this, arguments);
  };
}();

apkUtilsMethods.getPackageInfo = function () {
  var _getPackageInfo = (0, _asyncToGenerator2.default)(function* (pkg) {
    _logger.default.debug(`Getting package info for '${pkg}'`);

    let result = {
      name: pkg
    };

    try {
      const stdout = yield this.shell(['dumpsys', 'package', pkg]);
      const versionNameMatch = new RegExp(/versionName=([\d+.]+)/).exec(stdout);

      if (versionNameMatch) {
        result.versionName = versionNameMatch[1];
      }

      const versionCodeMatch = new RegExp(/versionCode=(\d+)/).exec(stdout);

      if (versionCodeMatch) {
        result.versionCode = parseInt(versionCodeMatch[1], 10);
      }

      return result;
    } catch (err) {
      _logger.default.warn(`Error '${err.message}' while dumping package info`);
    }

    return result;
  });

  return function getPackageInfo(_x26) {
    return _getPackageInfo.apply(this, arguments);
  };
}();

apkUtilsMethods.pullApk = function () {
  var _pullApk = (0, _asyncToGenerator2.default)(function* (pkg, tmpDir) {
    const pkgPath = (yield this.adbExec(['shell', 'pm', 'path', pkg])).replace('package:', '');

    const tmpApp = _path.default.resolve(tmpDir, `${pkg}.apk`);

    yield this.pull(pkgPath, tmpApp);

    _logger.default.debug(`Pulled app for package '${pkg}' to '${tmpApp}'`);

    return tmpApp;
  });

  return function pullApk(_x27, _x28) {
    return _pullApk.apply(this, arguments);
  };
}();

var _default = apkUtilsMethods;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
