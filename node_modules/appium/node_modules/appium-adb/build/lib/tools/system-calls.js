"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "DEFAULT_ADB_EXEC_TIMEOUT", {
  enumerable: true,
  get: function get() {
    return _helpers.DEFAULT_ADB_EXEC_TIMEOUT;
  }
});
exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _path = _interopRequireDefault(require("path"));

var _logger = _interopRequireDefault(require("../logger.js"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumSupport = require("appium-support");

var _helpers = require("../helpers");

var _teen_process = require("teen_process");

var _asyncbox = require("asyncbox");

var _lodash = _interopRequireDefault(require("lodash"));

var _shellQuote = require("shell-quote");

let systemCallMethods = {};
const DEFAULT_ADB_REBOOT_RETRIES = 90;
const LINKER_WARNING_REGEXP = /^WARNING: linker.+$/m;
const PROTOCOL_FAULT_ERROR_REGEXP = new RegExp('protocol fault \\(no status\\)', 'i');
const DEVICE_NOT_FOUND_ERROR_REGEXP = new RegExp(`error: device ('.+' )?not found`, 'i');
const DEVICE_CONNECTING_ERROR_REGEXP = new RegExp('error: device still connecting', 'i');
const CERTS_ROOT = '/system/etc/security/cacerts';

systemCallMethods.getSdkBinaryPath = function () {
  var _getSdkBinaryPath = (0, _asyncToGenerator2.default)(function* (binaryName) {
    if (this.sdkRoot) {
      return yield this.getBinaryFromSdkRoot(binaryName);
    }

    _logger.default.warn(`The ANDROID_HOME environment variable is not set to the Android SDK ` + `root directory path. ANDROID_HOME is required for compatibility ` + `with SDK 23+. Checking along PATH for ${binaryName}.`);

    return yield this.getBinaryFromPath(binaryName);
  });

  return function getSdkBinaryPath(_x) {
    return _getSdkBinaryPath.apply(this, arguments);
  };
}();

systemCallMethods.getBinaryNameForOS = _lodash.default.memoize(function getBinaryNameForOS(binaryName) {
  if (!_appiumSupport.system.isWindows()) {
    return binaryName;
  }

  if (['android', 'apksigner', 'apkanalyzer'].includes(binaryName)) {
    return `${binaryName}.bat`;
  }

  if (!_path.default.extname(binaryName)) {
    return `${binaryName}.exe`;
  }

  return binaryName;
});

systemCallMethods.getBinaryFromSdkRoot = function () {
  var _getBinaryFromSdkRoot = (0, _asyncToGenerator2.default)(function* (binaryName) {
    if (this.binaries[binaryName]) {
      return this.binaries[binaryName];
    }

    const fullBinaryName = this.getBinaryNameForOS(binaryName);
    const binaryLocs = ['platform-tools', 'emulator', 'tools', `tools${_path.default.sep}bin`].map(x => _path.default.resolve(this.sdkRoot, x, fullBinaryName));
    let buildToolsDirs = yield (0, _helpers.getBuildToolsDirs)(this.sdkRoot);

    if (this.buildToolsVersion) {
      buildToolsDirs = buildToolsDirs.filter(x => _path.default.basename(x) === this.buildToolsVersion);

      if (_lodash.default.isEmpty(buildToolsDirs)) {
        _logger.default.info(`Found no build tools whose version matches to '${this.buildToolsVersion}'`);
      } else {
        _logger.default.info(`Using build tools at '${buildToolsDirs}'`);
      }
    }

    binaryLocs.push(...buildToolsDirs.map(dir => _path.default.resolve(dir, fullBinaryName)));
    let binaryLoc = null;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = binaryLocs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        const loc = _step.value;

        if (yield _appiumSupport.fs.exists(loc)) {
          binaryLoc = loc;
          break;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    if (_lodash.default.isNull(binaryLoc)) {
      throw new Error(`Could not find '${fullBinaryName}' in ${JSON.stringify(binaryLocs)}. ` + `Do you have Android Build Tools ${this.buildToolsVersion ? `v ${this.buildToolsVersion} ` : ''}` + `installed at '${this.sdkRoot}'?`);
    }

    _logger.default.info(`Using '${fullBinaryName}' from '${binaryLoc}'`);

    this.binaries[binaryName] = binaryLoc;
    return binaryLoc;
  });

  return function getBinaryFromSdkRoot(_x2) {
    return _getBinaryFromSdkRoot.apply(this, arguments);
  };
}();

systemCallMethods.getBinaryFromPath = function () {
  var _getBinaryFromPath = (0, _asyncToGenerator2.default)(function* (binaryName) {
    if (this.binaries[binaryName]) {
      return this.binaries[binaryName];
    }

    const fullBinaryName = this.getBinaryNameForOS(binaryName);

    try {
      const binaryLoc = yield _appiumSupport.fs.which(fullBinaryName);

      _logger.default.info(`Using '${fullBinaryName}' from '${binaryLoc}'`);

      this.binaries[binaryName] = binaryLoc;
      return binaryLoc;
    } catch (e) {
      throw new Error(`Could not find '${fullBinaryName}' in PATH. Please set the ANDROID_HOME ` + `environment variable with the Android SDK root directory path.`);
    }
  });

  return function getBinaryFromPath(_x3) {
    return _getBinaryFromPath.apply(this, arguments);
  };
}();

systemCallMethods.getConnectedDevices = function () {
  var _getConnectedDevices = (0, _asyncToGenerator2.default)(function* () {
    _logger.default.debug('Getting connected devices...');

    try {
      let _ref = yield (0, _teen_process.exec)(this.executable.path, this.executable.defaultArgs.concat(['devices'])),
          stdout = _ref.stdout;

      let startingIndex = stdout.indexOf('List of devices');

      if (startingIndex === -1) {
        throw new Error(`Unexpected output while trying to get devices. output was: ${stdout}`);
      }

      stdout = stdout.slice(startingIndex);
      let devices = [];
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = stdout.split('\n')[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          let line = _step2.value;

          if (line.trim() !== '' && line.indexOf('List of devices') === -1 && line.indexOf('adb server') === -1 && line.indexOf('* daemon') === -1 && line.indexOf('offline') === -1) {
            let lineInfo = line.split('\t');
            devices.push({
              udid: lineInfo[0],
              state: lineInfo[1]
            });
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      _logger.default.debug(`${devices.length} device(s) connected`);

      return devices;
    } catch (e) {
      throw new Error(`Error while getting connected devices. Original error: ${e.message}`);
    }
  });

  return function getConnectedDevices() {
    return _getConnectedDevices.apply(this, arguments);
  };
}();

systemCallMethods.getDevicesWithRetry = function () {
  var _getDevicesWithRetry = (0, _asyncToGenerator2.default)(function* (timeoutMs = 20000) {
    var _this = this;

    let start = Date.now();

    _logger.default.debug('Trying to find a connected android device');

    let getDevices = function () {
      var _ref2 = (0, _asyncToGenerator2.default)(function* () {
        if (Date.now() - start > timeoutMs) {
          throw new Error('Could not find a connected Android device.');
        }

        try {
          let devices = yield _this.getConnectedDevices();

          if (devices.length < 1) {
            _logger.default.debug('Could not find devices, restarting adb server...');

            yield _this.restartAdb();
            yield (0, _asyncbox.sleep)(200);
            return yield getDevices();
          }

          return devices;
        } catch (e) {
          _logger.default.debug('Could not find devices, restarting adb server...');

          yield _this.restartAdb();
          yield (0, _asyncbox.sleep)(200);
          return yield getDevices();
        }
      });

      return function getDevices() {
        return _ref2.apply(this, arguments);
      };
    }();

    return yield getDevices();
  });

  return function getDevicesWithRetry() {
    return _getDevicesWithRetry.apply(this, arguments);
  };
}();

systemCallMethods.restartAdb = function () {
  var _restartAdb = (0, _asyncToGenerator2.default)(function* () {
    if (this.suppressKillServer) {
      _logger.default.debug(`Not restarting abd since 'suppressKillServer' is on`);

      return;
    }

    _logger.default.debug('Restarting adb');

    try {
      yield this.killServer();
    } catch (e) {
      _logger.default.error("Error killing ADB server, going to see if it's online anyway");
    }
  });

  return function restartAdb() {
    return _restartAdb.apply(this, arguments);
  };
}();

systemCallMethods.killServer = function () {
  var _killServer = (0, _asyncToGenerator2.default)(function* () {
    _logger.default.debug(`Killing adb server on port ${this.adbPort}`);

    yield (0, _teen_process.exec)(this.executable.path, [...this.executable.defaultArgs, 'kill-server']);
  });

  return function killServer() {
    return _killServer.apply(this, arguments);
  };
}();

systemCallMethods.resetTelnetAuthToken = _lodash.default.memoize(function () {
  var _resetTelnetAuthToken = (0, _asyncToGenerator2.default)(function* () {
    const homeFolderPath = process.env[process.platform === 'win32' ? 'USERPROFILE' : 'HOME'];

    if (!homeFolderPath) {
      _logger.default.warn(`Cannot find the path to user home folder. Ignoring resetting of emulator's telnet authentication token`);

      return false;
    }

    const dstPath = _path.default.resolve(homeFolderPath, '.emulator_console_auth_token');

    _logger.default.debug(`Overriding ${dstPath} with an empty string to avoid telnet authentication for emulator commands`);

    try {
      yield _appiumSupport.fs.writeFile(dstPath, '');
    } catch (e) {
      _logger.default.warn(`Error ${e.message} while resetting the content of ${dstPath}. Ignoring resetting of emulator's telnet authentication token`);

      return false;
    }

    return true;
  });

  return function resetTelnetAuthToken() {
    return _resetTelnetAuthToken.apply(this, arguments);
  };
}());

systemCallMethods.adbExecEmu = function () {
  var _adbExecEmu = (0, _asyncToGenerator2.default)(function* (cmd) {
    yield this.verifyEmulatorConnected();
    yield this.resetTelnetAuthToken();
    yield this.adbExec(['emu', ...cmd]);
  });

  return function adbExecEmu(_x4) {
    return _adbExecEmu.apply(this, arguments);
  };
}();

systemCallMethods.adbExec = function () {
  var _adbExec = (0, _asyncToGenerator2.default)(function* (cmd, opts = {}) {
    var _this2 = this;

    if (!cmd) {
      throw new Error('You need to pass in a command to adbExec()');
    }

    opts = _lodash.default.cloneDeep(opts);
    opts.timeout = opts.timeout || this.adbExecTimeout || _helpers.DEFAULT_ADB_EXEC_TIMEOUT;
    opts.timeoutCapName = opts.timeoutCapName || 'adbExecTimeout';
    cmd = _lodash.default.isArray(cmd) ? cmd : [cmd];
    let adbRetried = false;

    const execFunc = function () {
      var _ref3 = (0, _asyncToGenerator2.default)(function* () {
        try {
          const args = _this2.executable.defaultArgs.concat(cmd);

          _logger.default.debug(`Running '${_this2.executable.path} ${(0, _shellQuote.quote)(args)}'`);

          let _ref4 = yield (0, _teen_process.exec)(_this2.executable.path, args, opts),
              stdout = _ref4.stdout;

          stdout = stdout.replace(LINKER_WARNING_REGEXP, '').trim();
          return stdout;
        } catch (e) {
          const errText = `${e.message}, ${e.stdout}, ${e.stderr}`;
          const protocolFaultError = PROTOCOL_FAULT_ERROR_REGEXP.test(errText);
          const deviceNotFoundError = DEVICE_NOT_FOUND_ERROR_REGEXP.test(errText);
          const deviceConnectingError = DEVICE_CONNECTING_ERROR_REGEXP.test(errText);

          if (protocolFaultError || deviceNotFoundError || deviceConnectingError) {
            _logger.default.info(`Error sending command, reconnecting device and retrying: ${cmd}`);

            yield (0, _asyncbox.sleep)(1000);
            yield _this2.getDevicesWithRetry();

            if (adbRetried) {
              adbRetried = true;
              return yield execFunc();
            }
          }

          if (e.code === 0 && e.stdout) {
            return e.stdout.replace(LINKER_WARNING_REGEXP, '').trim();
          }

          if (_lodash.default.isNull(e.code)) {
            e.message = `Error executing adbExec. Original error: '${e.message}'. ` + `Try to increase the ${opts.timeout}ms adb execution timeout represented by '${opts.timeoutCapName}' capability`;
          } else {
            e.message = `Error executing adbExec. Original error: '${e.message}'; ` + `Stderr: '${(e.stderr || '').trim()}'; Code: '${e.code}'`;
          }

          throw e;
        }
      });

      return function execFunc() {
        return _ref3.apply(this, arguments);
      };
    }();

    return yield execFunc();
  });

  return function adbExec(_x5) {
    return _adbExec.apply(this, arguments);
  };
}();

systemCallMethods.shell = function () {
  var _shell = (0, _asyncToGenerator2.default)(function* (cmd, opts = {}) {
    const privileged = opts.privileged,
          keepPrivileged = opts.keepPrivileged;
    let shouldRestoreUser = false;

    if (privileged) {
      _logger.default.info(`'adb shell ${cmd}' requires root access. Attempting to gain root access now.`);

      const _ref5 = yield this.root(),
            wasAlreadyRooted = _ref5.wasAlreadyRooted,
            isSuccessful = _ref5.isSuccessful;

      shouldRestoreUser = !wasAlreadyRooted;

      if (wasAlreadyRooted) {
        _logger.default.info('Device already had root access');
      } else {
        _logger.default.info(isSuccessful ? 'Root access successfully gained' : 'Could not gain root access');
      }
    }

    let didCommandFail = false;

    try {
      try {
        return yield this.adbExec(_lodash.default.isArray(cmd) ? ['shell', ...cmd] : ['shell', cmd], opts);
      } catch (err) {
        didCommandFail = true;
        throw err;
      }
    } finally {
      if (privileged && shouldRestoreUser && (!keepPrivileged || didCommandFail)) {
        const _ref6 = yield this.unroot(),
              isSuccessful = _ref6.isSuccessful;

        _logger.default.debug(isSuccessful ? 'Returned device to unrooted state' : 'Could not return device to unrooted state');
      }
    }
  });

  return function shell(_x6) {
    return _shell.apply(this, arguments);
  };
}();

systemCallMethods.createSubProcess = function createSubProcess(args = []) {
  args = this.executable.defaultArgs.concat(args);

  _logger.default.debug(`Creating ADB subprocess with args: ${JSON.stringify(args)}`);

  return new _teen_process.SubProcess(this.getAdbPath(), args);
};

systemCallMethods.getAdbServerPort = function getAdbServerPort() {
  return this.adbPort;
};

systemCallMethods.getEmulatorPort = function () {
  var _getEmulatorPort = (0, _asyncToGenerator2.default)(function* () {
    _logger.default.debug('Getting running emulator port');

    if (this.emulatorPort !== null) {
      return this.emulatorPort;
    }

    try {
      let devices = yield this.getConnectedDevices();
      let port = this.getPortFromEmulatorString(devices[0].udid);

      if (port) {
        return port;
      } else {
        throw new Error(`Emulator port not found`);
      }
    } catch (e) {
      throw new Error(`No devices connected. Original error: ${e.message}`);
    }
  });

  return function getEmulatorPort() {
    return _getEmulatorPort.apply(this, arguments);
  };
}();

systemCallMethods.getPortFromEmulatorString = function getPortFromEmulatorString(emStr) {
  let portPattern = /emulator-(\d+)/;

  if (portPattern.test(emStr)) {
    return parseInt(portPattern.exec(emStr)[1], 10);
  }

  return false;
};

systemCallMethods.getConnectedEmulators = function () {
  var _getConnectedEmulators = (0, _asyncToGenerator2.default)(function* () {
    _logger.default.debug('Getting connected emulators');

    try {
      let devices = yield this.getConnectedDevices();
      let emulators = [];
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = devices[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          let device = _step3.value;
          let port = this.getPortFromEmulatorString(device.udid);

          if (port) {
            device.port = port;
            emulators.push(device);
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      _logger.default.debug(`${emulators.length} emulator(s) connected`);

      return emulators;
    } catch (e) {
      throw new Error(`Error getting emulators. Original error: ${e.message}`);
    }
  });

  return function getConnectedEmulators() {
    return _getConnectedEmulators.apply(this, arguments);
  };
}();

systemCallMethods.setEmulatorPort = function setEmulatorPort(emPort) {
  this.emulatorPort = emPort;
};

systemCallMethods.setDeviceId = function setDeviceId(deviceId) {
  _logger.default.debug(`Setting device id to ${deviceId}`);

  this.curDeviceId = deviceId;
  let argsHasDevice = this.executable.defaultArgs.indexOf('-s');

  if (argsHasDevice !== -1) {
    this.executable.defaultArgs.splice(argsHasDevice, 2);
  }

  this.executable.defaultArgs.push('-s', deviceId);
};

systemCallMethods.setDevice = function setDevice(deviceObj) {
  let deviceId = deviceObj.udid;
  let emPort = this.getPortFromEmulatorString(deviceId);
  this.setEmulatorPort(emPort);
  this.setDeviceId(deviceId);
};

systemCallMethods.getRunningAVD = function () {
  var _getRunningAVD = (0, _asyncToGenerator2.default)(function* (avdName) {
    _logger.default.debug(`Trying to find '${avdName}' emulator`);

    try {
      const emulators = yield this.getConnectedEmulators();
      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = emulators[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          const emulator = _step4.value;
          this.setEmulatorPort(emulator.port);
          const runningAVDName = yield this.sendTelnetCommand('avd name');

          if (_lodash.default.toLower(avdName) === _lodash.default.toLower(runningAVDName)) {
            _logger.default.debug(`Found emulator '${avdName}' on port ${emulator.port}`);

            this.setDeviceId(emulator.udid);
            return emulator;
          }
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }

      _logger.default.debug(`Emulator '${avdName}' not running`);

      return null;
    } catch (e) {
      throw new Error(`Error getting AVD. Original error: ${e.message}`);
    }
  });

  return function getRunningAVD(_x7) {
    return _getRunningAVD.apply(this, arguments);
  };
}();

systemCallMethods.getRunningAVDWithRetry = function () {
  var _getRunningAVDWithRetry = (0, _asyncToGenerator2.default)(function* (avdName, timeoutMs = 20000) {
    var _this3 = this;

    let runningAvd;

    try {
      yield (0, _asyncbox.waitForCondition)((0, _asyncToGenerator2.default)(function* () {
        try {
          runningAvd = yield _this3.getRunningAVD(avdName.replace('@', ''));
          return runningAvd;
        } catch (e) {
          _logger.default.debug(e.message);

          return false;
        }
      }), {
        waitMs: timeoutMs,
        intervalMs: 1000
      });
    } catch (e) {
      throw new Error(`Error getting AVD with retry. Original error: ${e.message}`);
    }

    return runningAvd;
  });

  return function getRunningAVDWithRetry(_x8) {
    return _getRunningAVDWithRetry.apply(this, arguments);
  };
}();

systemCallMethods.killAllEmulators = function () {
  var _killAllEmulators = (0, _asyncToGenerator2.default)(function* () {
    let cmd, args;

    if (_appiumSupport.system.isWindows()) {
      cmd = 'TASKKILL';
      args = ['TASKKILL', '/IM', 'emulator.exe'];
    } else {
      cmd = '/usr/bin/killall';
      args = ['-m', 'emulator*'];
    }

    try {
      yield (0, _teen_process.exec)(cmd, args);
    } catch (e) {
      throw new Error(`Error killing emulators. Original error: ${e.message}`);
    }
  });

  return function killAllEmulators() {
    return _killAllEmulators.apply(this, arguments);
  };
}();

systemCallMethods.killEmulator = function () {
  var _killEmulator = (0, _asyncToGenerator2.default)(function* (avdName = null, timeout = 60000) {
    var _this4 = this;

    if (_appiumSupport.util.hasValue(avdName)) {
      _logger.default.debug(`Killing avd '${avdName}'`);

      const device = yield this.getRunningAVD(avdName);

      if (!device) {
        _logger.default.info(`No avd with name '${avdName}' running. Skipping kill step.`);

        return false;
      }
    } else {
      _logger.default.debug(`Killing avd with id '${this.curDeviceId}'`);

      if (!(yield this.isEmulatorConnected())) {
        _logger.default.debug(`Emulator with id '${this.curDeviceId}' not connected. Skipping kill step`);

        return false;
      }
    }

    yield this.adbExec(['emu', 'kill']);

    _logger.default.debug(`Waiting up to ${timeout}ms until the emulator '${avdName ? avdName : this.curDeviceId}' is killed`);

    try {
      yield (0, _asyncbox.waitForCondition)((0, _asyncToGenerator2.default)(function* () {
        try {
          return _appiumSupport.util.hasValue(avdName) ? !(yield _this4.getRunningAVD(avdName)) : !(yield _this4.isEmulatorConnected());
        } catch (ign) {}

        return false;
      }), {
        waitMs: timeout,
        intervalMs: 2000
      });
    } catch (e) {
      throw new Error(`The emulator '${avdName ? avdName : this.curDeviceId}' is still running after being killed ${timeout}ms ago`);
    }

    _logger.default.info(`Successfully killed the '${avdName ? avdName : this.curDeviceId}' emulator`);

    return true;
  });

  return function killEmulator() {
    return _killEmulator.apply(this, arguments);
  };
}();

systemCallMethods.launchAVD = function () {
  var _launchAVD = (0, _asyncToGenerator2.default)(function* (avdName, avdArgs, language, country, avdLaunchTimeout = 60000, avdReadyTimeout = 60000, retryTimes = 1) {
    var _this5 = this;

    _logger.default.debug(`Launching Emulator with AVD ${avdName}, launchTimeout ` + `${avdLaunchTimeout}ms and readyTimeout ${avdReadyTimeout}ms`);

    let emulatorBinaryPath = yield this.getSdkBinaryPath('emulator');

    if (avdName[0] === '@') {
      avdName = avdName.substr(1);
    }

    yield this.checkAvdExist(avdName);
    let launchArgs = ['-avd', avdName];

    if (_lodash.default.isString(language)) {
      _logger.default.debug(`Setting Android Device Language to ${language}`);

      launchArgs.push('-prop', `persist.sys.language=${language.toLowerCase()}`);
    }

    if (_lodash.default.isString(country)) {
      _logger.default.debug(`Setting Android Device Country to ${country}`);

      launchArgs.push('-prop', `persist.sys.country=${country.toUpperCase()}`);
    }

    let locale;

    if (_lodash.default.isString(language) && _lodash.default.isString(country)) {
      locale = language.toLowerCase() + '-' + country.toUpperCase();
    } else if (_lodash.default.isString(language)) {
      locale = language.toLowerCase();
    } else if (_lodash.default.isString(country)) {
      locale = country;
    }

    if (_lodash.default.isString(locale)) {
      _logger.default.debug(`Setting Android Device Locale to ${locale}`);

      launchArgs.push('-prop', `persist.sys.locale=${locale}`);
    }

    if (!_lodash.default.isEmpty(avdArgs)) {
      launchArgs.push(...(_lodash.default.isArray(avdArgs) ? avdArgs : avdArgs.split(' ')));
    }

    _logger.default.debug(`Running '${emulatorBinaryPath}' with args: ${JSON.stringify(launchArgs)}`);

    let proc = new _teen_process.SubProcess(emulatorBinaryPath, launchArgs);
    yield proc.start(0);
    proc.on('output', (stdout, stderr) => {
      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = (stdout || stderr || '').split('\n').filter(Boolean)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          let line = _step5.value;

          _logger.default.info(`[AVD OUTPUT] ${line}`);
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
            _iterator5.return();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }
    });
    proc.on('die', (code, signal) => {
      _logger.default.warn(`Emulator avd ${avdName} exited with code ${code}${signal ? `, signal ${signal}` : ''}`);
    });
    yield (0, _asyncbox.retry)(retryTimes, (0, _asyncToGenerator2.default)(function* () {
      return yield _this5.getRunningAVDWithRetry(avdName, avdLaunchTimeout);
    }));
    yield this.waitForEmulatorReady(avdReadyTimeout);
    return proc;
  });

  return function launchAVD(_x9, _x10, _x11, _x12) {
    return _launchAVD.apply(this, arguments);
  };
}();

systemCallMethods.getAdbVersion = _lodash.default.memoize(function () {
  var _getAdbVersion = (0, _asyncToGenerator2.default)(function* () {
    try {
      let adbVersion = (yield this.adbExec('version')).replace(/Android\sDebug\sBridge\sversion\s([\d.]*)[\s\w-]*/, '$1');
      let parts = adbVersion.split('.');
      return {
        versionString: adbVersion,
        versionFloat: parseFloat(adbVersion),
        major: parseInt(parts[0], 10),
        minor: parseInt(parts[1], 10),
        patch: parts[2] ? parseInt(parts[2], 10) : undefined
      };
    } catch (e) {
      throw new Error(`Error getting adb version. Original error: '${e.message}'; ` + `Stderr: '${(e.stderr || '').trim()}'; Code: '${e.code}'`);
    }
  });

  return function getAdbVersion() {
    return _getAdbVersion.apply(this, arguments);
  };
}());

systemCallMethods.checkAvdExist = function () {
  var _checkAvdExist = (0, _asyncToGenerator2.default)(function* (avdName) {
    let cmd, result;

    try {
      cmd = yield this.getSdkBinaryPath('emulator');
      result = yield (0, _teen_process.exec)(cmd, ['-list-avds']);
    } catch (e) {
      let unknownOptionError = new RegExp('unknown option: -list-avds', 'i').test(e.stderr);

      if (!unknownOptionError) {
        throw new Error(`Error executing checkAvdExist. Original error: '${e.message}'; ` + `Stderr: '${(e.stderr || '').trim()}'; Code: '${e.code}'`);
      }

      const sdkVersion = yield (0, _helpers.getSdkToolsVersion)();
      let binaryName = 'android';

      if (sdkVersion) {
        if (sdkVersion.major >= 25) {
          binaryName = 'avdmanager';
        }
      } else {
        _logger.default.warn(`Defaulting binary name to '${binaryName}', because SDK version cannot be parsed`);
      }

      cmd = yield this.getSdkBinaryPath(binaryName);
      result = yield (0, _teen_process.exec)(cmd, ['list', 'avd', '-c']);
    }

    if (result.stdout.indexOf(avdName) === -1) {
      let existings = `(${result.stdout.trim().replace(/[\n]/g, '), (')})`;
      throw new Error(`Avd '${avdName}' is not available. please select your avd name from one of these: '${existings}'`);
    }
  });

  return function checkAvdExist(_x13) {
    return _checkAvdExist.apply(this, arguments);
  };
}();

systemCallMethods.waitForEmulatorReady = function () {
  var _waitForEmulatorReady = (0, _asyncToGenerator2.default)(function* (timeoutMs = 20000) {
    var _this6 = this;

    try {
      yield (0, _asyncbox.waitForCondition)((0, _asyncToGenerator2.default)(function* () {
        try {
          if (!(yield _this6.shell(['getprop', 'init.svc.bootanim'])).includes('stopped')) {
            return false;
          }

          return /\d+\[\w+\]/.test((yield _this6.shell(['pm', 'get-install-location'])));
        } catch (err) {
          _logger.default.debug(`Waiting for emulator startup. Intermediate error: ${err.message}`);

          return false;
        }
      }), {
        waitMs: timeoutMs,
        intervalMs: 3000
      });
    } catch (e) {
      throw new Error(`Emulator is not ready within ${timeoutMs}ms`);
    }
  });

  return function waitForEmulatorReady() {
    return _waitForEmulatorReady.apply(this, arguments);
  };
}();

systemCallMethods.waitForDevice = function () {
  var _waitForDevice = (0, _asyncToGenerator2.default)(function* (appDeviceReadyTimeout = 30) {
    var _this7 = this;

    this.appDeviceReadyTimeout = appDeviceReadyTimeout;
    const retries = 3;
    const timeout = parseInt(this.appDeviceReadyTimeout, 10) / retries * 1000;
    yield (0, _asyncbox.retry)(retries, (0, _asyncToGenerator2.default)(function* () {
      try {
        yield _this7.adbExec('wait-for-device', {
          timeout
        });
        yield _this7.ping();
      } catch (e) {
        yield _this7.restartAdb();
        yield _this7.getConnectedDevices();
        throw new Error(`Error waiting for the device to be available. Original error: '${e.message}'`);
      }
    }));
  });

  return function waitForDevice() {
    return _waitForDevice.apply(this, arguments);
  };
}();

systemCallMethods.reboot = function () {
  var _reboot = (0, _asyncToGenerator2.default)(function* (retries = DEFAULT_ADB_REBOOT_RETRIES) {
    var _this8 = this;

    const _ref12 = yield this.root(),
          wasAlreadyRooted = _ref12.wasAlreadyRooted;

    try {
      yield this.shell(['stop']);
      yield _bluebird.default.delay(2000);
      yield this.setDeviceProperty('sys.boot_completed', 0, {
        privileged: false
      });
      yield this.shell(['start']);
    } catch (e) {
      const message = e.message;

      if (message.includes('must be root')) {
        throw new Error(`Could not reboot device. Rebooting requires root access and ` + `attempt to get root access on device failed with error: '${message}'`);
      }

      throw e;
    } finally {
      if (!wasAlreadyRooted) {
        yield this.unroot();
      }
    }

    const started = process.hrtime();
    yield (0, _asyncbox.retryInterval)(retries, 1000, (0, _asyncToGenerator2.default)(function* () {
      if ((yield _this8.getDeviceProperty('sys.boot_completed')) === '1') {
        return;
      }

      const msg = `Reboot is not completed after ${process.hrtime(started)[0]}s`;

      _logger.default.debug(msg);

      throw new Error(msg);
    }));
  });

  return function reboot() {
    return _reboot.apply(this, arguments);
  };
}();

systemCallMethods.changeUserPrivileges = function () {
  var _changeUserPrivileges = (0, _asyncToGenerator2.default)(function* (isElevated) {
    const cmd = isElevated ? 'root' : 'unroot';
    const isRoot = yield this.isRoot();

    if (isRoot && isElevated || !isRoot && !isElevated) {
      return {
        isSuccessful: true,
        wasAlreadyRooted: isRoot
      };
    }

    let wasAlreadyRooted = isRoot;

    try {
      let _ref14 = yield (0, _teen_process.exec)(this.executable.path, [cmd]),
          stdout = _ref14.stdout;

      if (stdout) {
        if (stdout.includes('adbd cannot run as root')) {
          return {
            isSuccessful: false,
            wasAlreadyRooted
          };
        }

        if (stdout.includes('already running as root')) {
          wasAlreadyRooted = true;
        }
      }

      return {
        isSuccessful: true,
        wasAlreadyRooted
      };
    } catch (err) {
      const _err$stderr = err.stderr,
            stderr = _err$stderr === void 0 ? '' : _err$stderr,
            message = err.message;

      _logger.default.warn(`Unable to ${cmd} adb daemon. Original error: '${message}'. Stderr: '${stderr}'. Continuing.`);

      if (['closed', 'device offline'].includes(x => stderr.toLowerCase().includes(x))) {
        _logger.default.warn(`Attempt to 'adb ${cmd}' caused device to go offline. Restarting adb.`);

        yield this.restartAdb();
      }

      return {
        isSuccessful: false,
        wasAlreadyRooted
      };
    }
  });

  return function changeUserPrivileges(_x14) {
    return _changeUserPrivileges.apply(this, arguments);
  };
}();

systemCallMethods.root = function () {
  var _root = (0, _asyncToGenerator2.default)(function* () {
    return yield this.changeUserPrivileges(true);
  });

  return function root() {
    return _root.apply(this, arguments);
  };
}();

systemCallMethods.unroot = function () {
  var _unroot = (0, _asyncToGenerator2.default)(function* () {
    return yield this.changeUserPrivileges(false);
  });

  return function unroot() {
    return _unroot.apply(this, arguments);
  };
}();

systemCallMethods.isRoot = function () {
  var _isRoot = (0, _asyncToGenerator2.default)(function* () {
    return (yield this.shell(['whoami'])).trim() === 'root';
  });

  return function isRoot() {
    return _isRoot.apply(this, arguments);
  };
}();

systemCallMethods.fileExists = function () {
  var _fileExists = (0, _asyncToGenerator2.default)(function* (remotePath) {
    let files = yield this.ls(remotePath);
    return files.length > 0;
  });

  return function fileExists(_x15) {
    return _fileExists.apply(this, arguments);
  };
}();

systemCallMethods.ls = function () {
  var _ls = (0, _asyncToGenerator2.default)(function* (remotePath, opts = []) {
    try {
      let args = ['ls', ...opts, remotePath];
      let stdout = yield this.shell(args);
      let lines = stdout.split('\n');
      return lines.map(l => l.trim()).filter(Boolean).filter(l => l.indexOf('No such file') === -1);
    } catch (err) {
      if (err.message.indexOf('No such file or directory') === -1) {
        throw err;
      }

      return [];
    }
  });

  return function ls(_x16) {
    return _ls.apply(this, arguments);
  };
}();

systemCallMethods.fileSize = function () {
  var _fileSize = (0, _asyncToGenerator2.default)(function* (remotePath) {
    try {
      const files = yield this.ls(remotePath, ['-la']);

      if (files.length !== 1) {
        throw new Error(`Remote path is not a file`);
      }

      const match = /[rwxsStT\-+]{10}[\s\d]*\s[^\s]+\s+[^\s]+\s+(\d+)/.exec(files[0]);

      if (!match || _lodash.default.isNaN(parseInt(match[1], 10))) {
        throw new Error(`Unable to parse size from list output: '${files[0]}'`);
      }

      return parseInt(match[1], 10);
    } catch (err) {
      throw new Error(`Unable to get file size for '${remotePath}': ${err.message}`);
    }
  });

  return function fileSize(_x17) {
    return _fileSize.apply(this, arguments);
  };
}();

systemCallMethods.installMitmCertificate = function () {
  var _installMitmCertificate = (0, _asyncToGenerator2.default)(function* (cert) {
    var _this9 = this;

    const openSsl = yield (0, _helpers.getOpenSslForOs)();

    if (!_lodash.default.isBuffer(cert)) {
      cert = Buffer.from(cert, 'base64');
    }

    const tmpRoot = yield _appiumSupport.tempDir.openDir();

    try {
      const srcCert = _path.default.resolve(tmpRoot, 'source.cer');

      yield _appiumSupport.fs.writeFile(srcCert, cert);

      let _ref15 = yield (0, _teen_process.exec)(openSsl, ['x509', '-noout', '-hash', '-in', srcCert]),
          stdout = _ref15.stdout;

      const certHash = stdout.trim();

      _logger.default.debug(`Got certificate hash: ${certHash}`);

      _logger.default.debug('Preparing certificate content');

      var _ref16 = yield (0, _teen_process.exec)(openSsl, ['x509', '-in', srcCert], {
        isBuffer: true
      });

      stdout = _ref16.stdout;
      let dstCertContent = stdout;

      var _ref17 = yield (0, _teen_process.exec)(openSsl, ['x509', '-in', srcCert, '-text', '-fingerprint', '-noout'], {
        isBuffer: true
      });

      stdout = _ref17.stdout;
      dstCertContent = Buffer.concat([dstCertContent, stdout]);

      const dstCert = _path.default.resolve(tmpRoot, `${certHash}.0`);

      yield _appiumSupport.fs.writeFile(dstCert, dstCertContent);

      _logger.default.debug('Remounting /system in rw mode');

      yield (0, _asyncbox.retryInterval)(5, 2000, (0, _asyncToGenerator2.default)(function* () {
        return yield _this9.adbExec(['remount']);
      }));

      _logger.default.debug(`Uploading the generated certificate from '${dstCert}' to '${CERTS_ROOT}'`);

      yield this.push(dstCert, CERTS_ROOT);

      _logger.default.debug('Remounting /system to confirm changes');

      yield this.adbExec(['remount']);
    } catch (err) {
      throw new Error(`Cannot inject the custom certificate. ` + `Is the certificate properly encoded into base64-string? ` + `Do you have root permissions on the device? ` + `Original error: ${err.message}`);
    } finally {
      yield _appiumSupport.fs.rimraf(tmpRoot);
    }
  });

  return function installMitmCertificate(_x18) {
    return _installMitmCertificate.apply(this, arguments);
  };
}();

systemCallMethods.isMitmCertificateInstalled = function () {
  var _isMitmCertificateInstalled = (0, _asyncToGenerator2.default)(function* (cert) {
    const openSsl = yield (0, _helpers.getOpenSslForOs)();

    if (!_lodash.default.isBuffer(cert)) {
      cert = Buffer.from(cert, 'base64');
    }

    const tmpRoot = yield _appiumSupport.tempDir.openDir();
    let certHash;

    try {
      const tmpCert = _path.default.resolve(tmpRoot, 'source.cer');

      yield _appiumSupport.fs.writeFile(tmpCert, cert);

      const _ref19 = yield (0, _teen_process.exec)(openSsl, ['x509', '-noout', '-hash', '-in', tmpCert]),
            stdout = _ref19.stdout;

      certHash = stdout.trim();
    } catch (err) {
      throw new Error(`Cannot retrieve the certificate hash. ` + `Is the certificate properly encoded into base64-string? ` + `Original error: ${err.message}`);
    } finally {
      yield _appiumSupport.fs.rimraf(tmpRoot);
    }

    const dstPath = _path.default.posix.resolve(CERTS_ROOT, `${certHash}.0`);

    _logger.default.debug(`Checking if the certificate is already installed at '${dstPath}'`);

    return yield this.fileExists(dstPath);
  });

  return function isMitmCertificateInstalled(_x19) {
    return _isMitmCertificateInstalled.apply(this, arguments);
  };
}();

var _default = systemCallMethods;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
