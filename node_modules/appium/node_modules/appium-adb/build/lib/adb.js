"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_ADB_PORT = exports.ADB = exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _os = _interopRequireDefault(require("os"));

var _path = _interopRequireDefault(require("path"));

var _index = _interopRequireDefault(require("./tools/index.js"));

var _helpers = require("./helpers");

const DEFAULT_ADB_PORT = 5037;
exports.DEFAULT_ADB_PORT = DEFAULT_ADB_PORT;

const JAR_PATH = _path.default.resolve(_helpers.rootDir, 'jars');

const DEFAULT_OPTS = {
  sdkRoot: null,
  udid: null,
  appDeviceReadyTimeout: null,
  useKeystore: null,
  keystorePath: null,
  keystorePassword: null,
  keyAlias: null,
  keyPassword: null,
  executable: {
    path: 'adb',
    defaultArgs: []
  },
  tmpDir: _os.default.tmpdir(),
  curDeviceId: null,
  emulatorPort: null,
  logcat: null,
  binaries: {},
  instrumentProc: null,
  suppressKillServer: null,
  jars: {},
  helperJarPath: JAR_PATH,
  adbPort: DEFAULT_ADB_PORT,
  adbExecTimeout: _helpers.DEFAULT_ADB_EXEC_TIMEOUT,
  remoteAppsCacheLimit: 10,
  buildToolsVersion: null
};

class ADB {
  constructor(opts = {}) {
    if (typeof opts.sdkRoot === 'undefined') {
      opts.sdkRoot = process.env.ANDROID_HOME || '';
    }

    Object.assign(this, opts);

    _lodash.default.defaultsDeep(this, _lodash.default.cloneDeep(DEFAULT_OPTS));

    if (opts.remoteAdbHost) {
      this.executable.defaultArgs.push('-H', opts.remoteAdbHost);
    }

    if (opts.remoteAdbPort) {
      this.adbPort = opts.remoteAdbPort;
    }

    this.executable.defaultArgs.push('-P', this.adbPort);
    this.initJars();
  }

  initJars() {
    const tempJars = ['move_manifest.jar', 'sign.jar', 'appium_apk_tools.jar', 'unsign.jar', 'verify.jar'];

    for (var _i = 0; _i < tempJars.length; _i++) {
      const jarName = tempJars[_i];
      this.jars[jarName] = _path.default.resolve(JAR_PATH, jarName);
    }
  }

}

exports.ADB = ADB;

ADB.createADB = function () {
  var _createADB = (0, _asyncToGenerator2.default)(function* (opts) {
    let adb = new ADB(opts);
    yield adb.getAdbWithCorrectAdbPath();
    return adb;
  });

  return function createADB(_x) {
    return _createADB.apply(this, arguments);
  };
}();

var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
  for (var _iterator = _lodash.default.toPairs(_index.default)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    const _step$value = (0, _slicedToArray2.default)(_step.value, 2),
          fnName = _step$value[0],
          fn = _step$value[1];

    ADB.prototype[fnName] = fn;
  }
} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion && _iterator.return != null) {
      _iterator.return();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}

var _default = ADB;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9hZGIuanMiXSwibmFtZXMiOlsiREVGQVVMVF9BREJfUE9SVCIsIkpBUl9QQVRIIiwicGF0aCIsInJlc29sdmUiLCJyb290RGlyIiwiREVGQVVMVF9PUFRTIiwic2RrUm9vdCIsInVkaWQiLCJhcHBEZXZpY2VSZWFkeVRpbWVvdXQiLCJ1c2VLZXlzdG9yZSIsImtleXN0b3JlUGF0aCIsImtleXN0b3JlUGFzc3dvcmQiLCJrZXlBbGlhcyIsImtleVBhc3N3b3JkIiwiZXhlY3V0YWJsZSIsImRlZmF1bHRBcmdzIiwidG1wRGlyIiwib3MiLCJ0bXBkaXIiLCJjdXJEZXZpY2VJZCIsImVtdWxhdG9yUG9ydCIsImxvZ2NhdCIsImJpbmFyaWVzIiwiaW5zdHJ1bWVudFByb2MiLCJzdXBwcmVzc0tpbGxTZXJ2ZXIiLCJqYXJzIiwiaGVscGVySmFyUGF0aCIsImFkYlBvcnQiLCJhZGJFeGVjVGltZW91dCIsIkRFRkFVTFRfQURCX0VYRUNfVElNRU9VVCIsInJlbW90ZUFwcHNDYWNoZUxpbWl0IiwiYnVpbGRUb29sc1ZlcnNpb24iLCJBREIiLCJjb25zdHJ1Y3RvciIsIm9wdHMiLCJwcm9jZXNzIiwiZW52IiwiQU5EUk9JRF9IT01FIiwiT2JqZWN0IiwiYXNzaWduIiwiXyIsImRlZmF1bHRzRGVlcCIsImNsb25lRGVlcCIsInJlbW90ZUFkYkhvc3QiLCJwdXNoIiwicmVtb3RlQWRiUG9ydCIsImluaXRKYXJzIiwidGVtcEphcnMiLCJqYXJOYW1lIiwiY3JlYXRlQURCIiwiYWRiIiwiZ2V0QWRiV2l0aENvcnJlY3RBZGJQYXRoIiwidG9QYWlycyIsIm1ldGhvZHMiLCJmbk5hbWUiLCJmbiIsInByb3RvdHlwZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLE1BQU1BLGdCQUFnQixHQUFHLElBQXpCOzs7QUFDQSxNQUFNQyxRQUFRLEdBQUdDLGNBQUtDLE9BQUwsQ0FBYUMsZ0JBQWIsRUFBc0IsTUFB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QUFBQSxrQkFBK0JELFNBQS9CO0FBQUE7QUFBQTtBQUFBOzs7Ozs7O0FBT0EsdUJBQTJCVCxnQkFBRVksT0FBRixDQUFVQyxjQUFWLENBQTNCLDhIQUErQztBQUFBO0FBQUEsVUFBbkNDLE1BQW1DO0FBQUEsVUFBM0JDLEVBQTJCOztBQUM3Q3ZCLElBQUFBLEdBQUcsQ0FBQ3dCLFNBQUosQ0FBY0YsTUFBZCxJQUF3QkMsRUFBeEI7QUFDRDs7Ozs7Ozs7Ozs7Ozs7OztlQUVjdkIsRyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgb3MgZnJvbSAnb3MnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgbWV0aG9kcyBmcm9tICcuL3Rvb2xzL2luZGV4LmpzJztcbmltcG9ydCB7IHJvb3REaXIsIERFRkFVTFRfQURCX0VYRUNfVElNRU9VVCB9IGZyb20gJy4vaGVscGVycyc7XG5cbmNvbnN0IERFRkFVTFRfQURCX1BPUlQgPSA1MDM3O1xuY29uc3QgSkFSX1BBVEggPSBwYXRoLnJlc29sdmUocm9vdERpciwgJ2phcnMnKTtcbmNvbnN0IERFRkFVTFRfT1BUUyA9IHtcbiAgc2RrUm9vdDogbnVsbCxcbiAgdWRpZDogbnVsbCxcbiAgYXBwRGV2aWNlUmVhZHlUaW1lb3V0OiBudWxsLFxuICB1c2VLZXlzdG9yZTogbnVsbCxcbiAga2V5c3RvcmVQYXRoOiBudWxsLFxuICBrZXlzdG9yZVBhc3N3b3JkOiBudWxsLFxuICBrZXlBbGlhczogbnVsbCxcbiAga2V5UGFzc3dvcmQ6IG51bGwsXG4gIGV4ZWN1dGFibGU6IHtwYXRoOiAnYWRiJywgZGVmYXVsdEFyZ3M6IFtdfSxcbiAgdG1wRGlyOiBvcy50bXBkaXIoKSxcbiAgY3VyRGV2aWNlSWQ6IG51bGwsXG4gIGVtdWxhdG9yUG9ydDogbnVsbCxcbiAgbG9nY2F0OiBudWxsLFxuICBiaW5hcmllczoge30sXG4gIGluc3RydW1lbnRQcm9jOiBudWxsLFxuICBzdXBwcmVzc0tpbGxTZXJ2ZXI6IG51bGwsXG4gIGphcnM6IHt9LFxuICBoZWxwZXJKYXJQYXRoOiBKQVJfUEFUSCxcbiAgYWRiUG9ydDogREVGQVVMVF9BREJfUE9SVCxcbiAgYWRiRXhlY1RpbWVvdXQ6IERFRkFVTFRfQURCX0VYRUNfVElNRU9VVCxcbiAgcmVtb3RlQXBwc0NhY2hlTGltaXQ6IDEwLFxuICBidWlsZFRvb2xzVmVyc2lvbjogbnVsbCxcbn07XG5cbmNsYXNzIEFEQiB7XG4gIGNvbnN0cnVjdG9yIChvcHRzID0ge30pIHtcbiAgICBpZiAodHlwZW9mIG9wdHMuc2RrUm9vdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIG9wdHMuc2RrUm9vdCA9IHByb2Nlc3MuZW52LkFORFJPSURfSE9NRSB8fCAnJztcbiAgICB9XG5cbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIG9wdHMpO1xuICAgIF8uZGVmYXVsdHNEZWVwKHRoaXMsIF8uY2xvbmVEZWVwKERFRkFVTFRfT1BUUykpO1xuXG4gICAgaWYgKG9wdHMucmVtb3RlQWRiSG9zdCkge1xuICAgICAgdGhpcy5leGVjdXRhYmxlLmRlZmF1bHRBcmdzLnB1c2goJy1IJywgb3B0cy5yZW1vdGVBZGJIb3N0KTtcbiAgICB9XG4gICAgLy8gVE9ETyBmaWd1cmUgb3V0IHdoeSB3ZSBoYXZlIHRoaXMgb3B0aW9uIGFzIGl0IGRvZXMgbm90IGFwcGVhciB0byBiZVxuICAgIC8vIHVzZWQgYW55d2hlcmUuIFByb2JhYmx5IGRlcHJlY2F0ZSBpbiBmYXZvciBvZiBzaW1wbGUgb3B0cy5hZGJQb3J0XG4gICAgaWYgKG9wdHMucmVtb3RlQWRiUG9ydCkge1xuICAgICAgdGhpcy5hZGJQb3J0ID0gb3B0cy5yZW1vdGVBZGJQb3J0O1xuICAgIH1cbiAgICB0aGlzLmV4ZWN1dGFibGUuZGVmYXVsdEFyZ3MucHVzaCgnLVAnLCB0aGlzLmFkYlBvcnQpO1xuXG4gICAgdGhpcy5pbml0SmFycygpO1xuICB9XG5cbiAgaW5pdEphcnMgKCkge1xuICAgIGNvbnN0IHRlbXBKYXJzID0gW1xuICAgICAgJ21vdmVfbWFuaWZlc3QuamFyJywgJ3NpZ24uamFyJywgJ2FwcGl1bV9hcGtfdG9vbHMuamFyJyxcbiAgICAgICd1bnNpZ24uamFyJywgJ3ZlcmlmeS5qYXInLFxuICAgIF07XG4gICAgZm9yIChjb25zdCBqYXJOYW1lIG9mIHRlbXBKYXJzKSB7XG4gICAgICB0aGlzLmphcnNbamFyTmFtZV0gPSBwYXRoLnJlc29sdmUoSkFSX1BBVEgsIGphck5hbWUpO1xuICAgIH1cbiAgfVxufVxuXG5BREIuY3JlYXRlQURCID0gYXN5bmMgZnVuY3Rpb24gY3JlYXRlQURCIChvcHRzKSB7XG4gIGxldCBhZGIgPSBuZXcgQURCKG9wdHMpO1xuICBhd2FpdCBhZGIuZ2V0QWRiV2l0aENvcnJlY3RBZGJQYXRoKCk7XG4gIHJldHVybiBhZGI7XG59O1xuXG4vLyBhZGQgYWxsIHRoZSBtZXRob2RzIHRvIHRoZSBBREIgcHJvdG90eXBlXG5mb3IgKGNvbnN0IFtmbk5hbWUsIGZuXSBvZiBfLnRvUGFpcnMobWV0aG9kcykpIHtcbiAgQURCLnByb3RvdHlwZVtmbk5hbWVdID0gZm47XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFEQjtcbmV4cG9ydCB7IEFEQiwgREVGQVVMVF9BREJfUE9SVCB9O1xuIl0sImZpbGUiOiJsaWIvYWRiLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
