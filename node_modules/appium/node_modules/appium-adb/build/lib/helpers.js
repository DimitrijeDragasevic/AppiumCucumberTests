"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAndroidPlatformAndPath = getAndroidPlatformAndPath;
exports.unzipFile = unzipFile;
exports.getIMEListFromOutput = getIMEListFromOutput;
exports.isShowingLockscreen = isShowingLockscreen;
exports.isCurrentFocusOnKeyguard = isCurrentFocusOnKeyguard;
exports.getSurfaceOrientation = getSurfaceOrientation;
exports.isScreenOnFully = isScreenOnFully;
exports.buildStartCmd = buildStartCmd;
exports.getJavaHome = getJavaHome;
exports.getApksignerForOs = getApksignerForOs;
exports.getApkanalyzerForOs = getApkanalyzerForOs;
exports.buildInstallArgs = buildInstallArgs;
exports.DEFAULT_ADB_EXEC_TIMEOUT = exports.APK_EXTENSION = exports.APKS_INSTALL_TIMEOUT = exports.APK_INSTALL_TIMEOUT = exports.APKS_EXTENSION = exports.extractMatchingPermissions = exports.getOpenSslForOs = exports.getBuildToolsDirs = exports.getSdkToolsVersion = exports.rootDir = exports.getJavaForOs = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _path = _interopRequireDefault(require("path"));

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("./logger.js"));

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _semver = _interopRequireDefault(require("semver"));

const rootDir = _path.default.resolve(__dirname, process.env.NO_PRECOMPILE ? '..' : '../..');

exports.rootDir = rootDir;
const APKS_EXTENSION = '.apks';
exports.APKS_EXTENSION = APKS_EXTENSION;
const APK_EXTENSION = '.apk';
exports.APK_EXTENSION = APK_EXTENSION;
const APK_INSTALL_TIMEOUT = 60000;
exports.APK_INSTALL_TIMEOUT = APK_INSTALL_TIMEOUT;
const APKS_INSTALL_TIMEOUT = APK_INSTALL_TIMEOUT * 2;
exports.APKS_INSTALL_TIMEOUT = APKS_INSTALL_TIMEOUT;
const DEFAULT_ADB_EXEC_TIMEOUT = 20000;
exports.DEFAULT_ADB_EXEC_TIMEOUT = DEFAULT_ADB_EXEC_TIMEOUT;

function getAndroidPlatformAndPath() {
  return _getAndroidPlatformAndPath.apply(this, arguments);
}

function _getAndroidPlatformAndPath() {
  _getAndroidPlatformAndPath = (0, _asyncToGenerator2.default)(function* () {
    const androidHome = process.env.ANDROID_HOME;

    if (!_lodash.default.isString(androidHome)) {
      throw new Error('ANDROID_HOME environment variable was not exported');
    }

    let propsPaths = yield _appiumSupport.fs.glob(_path.default.resolve(androidHome, 'platforms', '*', 'build.prop'), {
      absolute: true
    });
    const platformsMapping = {};
    var _iteratorNormalCompletion5 = true;
    var _didIteratorError5 = false;
    var _iteratorError5 = undefined;

    try {
      for (var _iterator5 = propsPaths[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
        const propsPath = _step5.value;
        const propsContent = yield _appiumSupport.fs.readFile(propsPath, 'utf-8');

        const platformPath = _path.default.dirname(propsPath);

        const platform = _path.default.basename(platformPath);

        const match = /ro\.build\.version\.sdk=(\d+)/.exec(propsContent);

        if (!match) {
          _logger.default.warn(`Cannot read the SDK version from '${propsPath}'. Skipping '${platform}'`);

          continue;
        }

        platformsMapping[parseInt(match[1], 10)] = {
          platform,
          platformPath
        };
      }
    } catch (err) {
      _didIteratorError5 = true;
      _iteratorError5 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
          _iterator5.return();
        }
      } finally {
        if (_didIteratorError5) {
          throw _iteratorError5;
        }
      }
    }

    if (_lodash.default.isEmpty(platformsMapping)) {
      _logger.default.warn(`Found zero platform folders at '${_path.default.resolve(androidHome, 'platforms')}'. ` + `Do you have any Android SDKs installed?`);

      return {
        platform: null,
        platformPath: null
      };
    }

    const recentSdkVersion = _lodash.default.keys(platformsMapping).sort().reverse()[0];

    const result = platformsMapping[recentSdkVersion];

    _logger.default.debug(`Found the most recent Android platform: ${JSON.stringify(result)}`);

    return result;
  });
  return _getAndroidPlatformAndPath.apply(this, arguments);
}

function unzipFile(_x) {
  return _unzipFile.apply(this, arguments);
}

function _unzipFile() {
  _unzipFile = (0, _asyncToGenerator2.default)(function* (zipPath, dstRoot = _path.default.dirname(zipPath)) {
    _logger.default.debug(`Unzipping '${zipPath}' to '${dstRoot}'`);

    yield _appiumSupport.zip.assertValidZip(zipPath);
    yield _appiumSupport.zip.extractAllTo(zipPath, dstRoot);

    _logger.default.debug('Unzip successful');
  });
  return _unzipFile.apply(this, arguments);
}

function getIMEListFromOutput(stdout) {
  let engines = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = stdout.split('\n')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      let line = _step.value;

      if (line.length > 0 && line[0] !== ' ') {
        engines.push(line.trim().replace(/:$/, ''));
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return engines;
}

const getJavaForOs = _lodash.default.memoize(() => {
  return _path.default.resolve(getJavaHome(), 'bin', `java${_appiumSupport.system.isWindows() ? '.exe' : ''}`);
});

exports.getJavaForOs = getJavaForOs;

const getOpenSslForOs = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* () {
    const binaryName = `openssl${_appiumSupport.system.isWindows() ? '.exe' : ''}`;

    try {
      return yield _appiumSupport.fs.which(binaryName);
    } catch (err) {
      throw new Error('The openssl tool must be installed on the system and available on the path');
    }
  });

  return function getOpenSslForOs() {
    return _ref.apply(this, arguments);
  };
}();

exports.getOpenSslForOs = getOpenSslForOs;

function getJavaHome() {
  if (process.env.JAVA_HOME) {
    return process.env.JAVA_HOME;
  }

  throw new Error('JAVA_HOME is not set currently. Please set JAVA_HOME.');
}

function getApksignerForOs(_x2) {
  return _getApksignerForOs.apply(this, arguments);
}

function _getApksignerForOs() {
  _getApksignerForOs = (0, _asyncToGenerator2.default)(function* (sysHelpers) {
    return yield sysHelpers.getBinaryFromSdkRoot('apksigner');
  });
  return _getApksignerForOs.apply(this, arguments);
}

function getApkanalyzerForOs(_x3) {
  return _getApkanalyzerForOs.apply(this, arguments);
}

function _getApkanalyzerForOs() {
  _getApkanalyzerForOs = (0, _asyncToGenerator2.default)(function* (sysHelpers) {
    return yield sysHelpers.getBinaryFromSdkRoot('apkanalyzer');
  });
  return _getApkanalyzerForOs.apply(this, arguments);
}

function isShowingLockscreen(dumpsys) {
  return /(mShowingLockscreen=true|mDreamingLockscreen=true)/gi.test(dumpsys);
}

function isCurrentFocusOnKeyguard(dumpsys) {
  let m = /mCurrentFocus.+Keyguard/gi.exec(dumpsys);
  return m && m.length && m[0] ? true : false;
}

function getSurfaceOrientation(dumpsys) {
  let m = /SurfaceOrientation: \d/gi.exec(dumpsys);
  return m && parseInt(m[0].split(':')[1], 10);
}

function isScreenOnFully(dumpsys) {
  let m = /mScreenOnFully=\w+/gi.exec(dumpsys);
  return !m || m && m.length > 0 && m[0].split('=')[1] === 'true' || false;
}

function buildStartCmd(startAppOptions, apiLevel) {
  let cmd = ['am', 'start'];

  if (_appiumSupport.util.hasValue(startAppOptions.user)) {
    cmd.push('--user', startAppOptions.user);
  }

  cmd.push('-W', '-n', `${startAppOptions.pkg}/${startAppOptions.activity}`);

  if (startAppOptions.stopApp && apiLevel >= 15) {
    cmd.push('-S');
  }

  if (startAppOptions.action) {
    cmd.push('-a', startAppOptions.action);
  }

  if (startAppOptions.category) {
    cmd.push('-c', startAppOptions.category);
  }

  if (startAppOptions.flags) {
    cmd.push('-f', startAppOptions.flags);
  }

  if (startAppOptions.optionalIntentArguments) {
    let parseKeyValue = function parseKeyValue(str) {
      str = str.trim();
      let space = str.indexOf(' ');

      if (space === -1) {
        return str.length ? [str] : [];
      } else {
        return [str.substring(0, space).trim(), str.substring(space + 1).trim()];
      }
    };

    let optionalIntentArguments = ` ${startAppOptions.optionalIntentArguments}`;
    let re = / (-[^\s]+) (.+)/;

    while (true) {
      let args = re.exec(optionalIntentArguments);

      if (!args) {
        if (optionalIntentArguments.length) {
          cmd.push.apply(cmd, parseKeyValue(optionalIntentArguments));
        }

        break;
      }

      let flag = args[1];
      let flagPos = optionalIntentArguments.indexOf(flag);

      if (flagPos !== 0) {
        let prevArgs = optionalIntentArguments.substring(0, flagPos);
        cmd.push.apply(cmd, parseKeyValue(prevArgs));
      }

      cmd.push(flag);
      optionalIntentArguments = args[2];
    }
  }

  return cmd;
}

const getSdkToolsVersion = _lodash.default.memoize(function () {
  var _getSdkToolsVersion = (0, _asyncToGenerator2.default)(function* () {
    const androidHome = process.env.ANDROID_HOME;

    if (!androidHome) {
      throw new Error('ANDROID_HOME environment variable is expected to be set');
    }

    const propertiesPath = _path.default.resolve(androidHome, 'tools', 'source.properties');

    if (!(yield _appiumSupport.fs.exists(propertiesPath))) {
      _logger.default.warn(`Cannot find ${propertiesPath} file to read SDK version from`);

      return;
    }

    const propertiesContent = yield _appiumSupport.fs.readFile(propertiesPath, 'utf8');
    const versionMatcher = new RegExp(/Pkg\.Revision=(\d+)\.?(\d+)?\.?(\d+)?/);
    const match = versionMatcher.exec(propertiesContent);

    if (match) {
      return {
        major: parseInt(match[1], 10),
        minor: match[2] ? parseInt(match[2], 10) : 0,
        build: match[3] ? parseInt(match[3], 10) : 0
      };
    }

    _logger.default.warn(`Cannot parse "Pkg.Revision" value from ${propertiesPath}`);
  });

  return function getSdkToolsVersion() {
    return _getSdkToolsVersion.apply(this, arguments);
  };
}());

exports.getSdkToolsVersion = getSdkToolsVersion;

const getBuildToolsDirs = _lodash.default.memoize(function () {
  var _getBuildToolsDirs = (0, _asyncToGenerator2.default)(function* (sdkRoot) {
    let buildToolsDirs = yield _appiumSupport.fs.glob(_path.default.resolve(sdkRoot, 'build-tools', '*'), {
      absolute: true
    });

    try {
      buildToolsDirs = buildToolsDirs.map(dir => [_path.default.basename(dir), dir]).sort((a, b) => _semver.default.rcompare(a[0], b[0])).map(pair => pair[1]);
    } catch (err) {
      _logger.default.warn(`Cannot sort build-tools folders ${JSON.stringify(buildToolsDirs.map(dir => _path.default.basename(dir)))} ` + `by semantic version names.`);

      _logger.default.warn(`Falling back to sorting by modification date. Original error: ${err.message}`);

      const pairs = yield _bluebird.default.map(buildToolsDirs, function () {
        var _ref2 = (0, _asyncToGenerator2.default)(function* (dir) {
          return [(yield _appiumSupport.fs.stat(dir)).mtime.valueOf(), dir];
        });

        return function (_x5) {
          return _ref2.apply(this, arguments);
        };
      }());
      buildToolsDirs = pairs.sort((a, b) => a[0] < b[0]).map(pair => pair[1]);
    }

    _logger.default.info(`Found ${buildToolsDirs.length} 'build-tools' folders under '${sdkRoot}' (newest first):`);

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = buildToolsDirs[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        let dir = _step2.value;

        _logger.default.info(`    ${dir}`);
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return buildToolsDirs;
  });

  return function getBuildToolsDirs(_x4) {
    return _getBuildToolsDirs.apply(this, arguments);
  };
}());

exports.getBuildToolsDirs = getBuildToolsDirs;

const extractMatchingPermissions = function extractMatchingPermissions(dumpsysOutput, groupNames, grantedState = null) {
  const groupPatternByName = groupName => new RegExp(`^(\\s*${_lodash.default.escapeRegExp(groupName)} permissions:[\\s\\S]+)`, 'm');

  const indentPattern = /\S|$/;
  const permissionNamePattern = /android\.permission\.\w+/;
  const grantedStatePattern = /\bgranted=(\w+)/;
  const result = [];
  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = groupNames[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      const groupName = _step3.value;
      const groupMatch = groupPatternByName(groupName).exec(dumpsysOutput);

      if (!groupMatch) {
        continue;
      }

      const lines = groupMatch[1].split('\n');

      if (lines.length < 2) {
        continue;
      }

      const titleIndent = lines[0].search(indentPattern);
      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = lines.slice(1)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          const line = _step4.value;
          const currentIndent = line.search(indentPattern);

          if (currentIndent <= titleIndent) {
            break;
          }

          const permissionNameMatch = permissionNamePattern.exec(line);

          if (!permissionNameMatch) {
            continue;
          }

          const item = {
            permission: permissionNameMatch[0]
          };
          const grantedStateMatch = grantedStatePattern.exec(line);

          if (grantedStateMatch) {
            item.granted = grantedStateMatch[1] === 'true';
          }

          result.push(item);
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
        _iterator3.return();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }

  const filteredResult = result.filter(item => !_lodash.default.isBoolean(grantedState) || item.granted === grantedState).map(item => item.permission);

  _logger.default.debug(`Retrieved ${filteredResult.length} permission(s) from ${JSON.stringify(groupNames)} group(s)`);

  return filteredResult;
};

exports.extractMatchingPermissions = extractMatchingPermissions;

function buildInstallArgs(apiLevel, options = {}) {
  const result = [];

  if (!_appiumSupport.util.hasValue(options.replace) || options.replace) {
    result.push('-r');
  }

  if (options.allowTestPackages) {
    result.push('-t');
  }

  if (options.useSdcard) {
    result.push('-s');
  }

  if (options.grantPermissions) {
    if (apiLevel < 23) {
      _logger.default.debug(`Skipping permissions grant option, since ` + `the current API level ${apiLevel} does not support applications ` + `permissions customization`);
    } else {
      result.push('-g');
    }
  }

  return result;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
