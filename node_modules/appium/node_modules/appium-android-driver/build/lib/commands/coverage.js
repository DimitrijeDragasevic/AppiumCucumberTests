"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _temp = _interopRequireDefault(require("temp"));

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("../logger"));

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

async function unlinkFile(file) {
  if (await _appiumSupport.fs.exists(file)) {
    await _appiumSupport.fs.unlink(file);
  }
}

commands.endCoverage = async function endCoverage(intentToBroadcast, ecOnDevicePath) {
  let localFile = _temp.default.path({
    prefix: 'appium',
    suffix: '.ec'
  });

  await unlinkFile(localFile);
  let b64data = '';

  try {
    await this.adb.rimraf(ecOnDevicePath);
    await this.adb.broadcastProcessEnd(intentToBroadcast, this.appProcess);
    await this.adb.pull(ecOnDevicePath, localFile);
    let data = await _appiumSupport.fs.readFile(localFile);
    b64data = Buffer.from(data).toString('base64');
    await unlinkFile(localFile);
  } catch (err) {
    _logger.default.debug(`Error ending test coverage: ${err.message}`);
  }

  return b64data;
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9jb3ZlcmFnZS5qcyJdLCJuYW1lcyI6WyJjb21tYW5kcyIsImhlbHBlcnMiLCJleHRlbnNpb25zIiwidW5saW5rRmlsZSIsImZpbGUiLCJmcyIsImV4aXN0cyIsInVubGluayIsImVuZENvdmVyYWdlIiwiaW50ZW50VG9Ccm9hZGNhc3QiLCJlY09uRGV2aWNlUGF0aCIsImxvY2FsRmlsZSIsInRlbXAiLCJwYXRoIiwicHJlZml4Iiwic3VmZml4IiwiYjY0ZGF0YSIsImFkYiIsInJpbXJhZiIsImJyb2FkY2FzdFByb2Nlc3NFbmQiLCJhcHBQcm9jZXNzIiwicHVsbCIsImRhdGEiLCJyZWFkRmlsZSIsIkJ1ZmZlciIsImZyb20iLCJ0b1N0cmluZyIsImVyciIsImxvZyIsImRlYnVnIiwibWVzc2FnZSIsIk9iamVjdCIsImFzc2lnbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFHQSxJQUFJQSxRQUFRLEdBQUcsRUFBZjtBQUFBLElBQW1CQyxPQUFPLEdBQUcsRUFBN0I7QUFBQSxJQUFpQ0MsVUFBVSxHQUFHLEVBQTlDOzs7O0FBRUEsZUFBZUMsVUFBZixDQUEyQkMsSUFBM0IsRUFBaUM7QUFDL0IsTUFBSSxNQUFNQyxrQkFBR0MsTUFBSCxDQUFVRixJQUFWLENBQVYsRUFBMkI7QUFDekIsVUFBTUMsa0JBQUdFLE1BQUgsQ0FBVUgsSUFBVixDQUFOO0FBQ0Q7QUFDRjs7QUFFREosUUFBUSxDQUFDUSxXQUFULEdBQXVCLGVBQWVBLFdBQWYsQ0FBNEJDLGlCQUE1QixFQUErQ0MsY0FBL0MsRUFBK0Q7QUFDcEYsTUFBSUMsU0FBUyxHQUFHQyxjQUFLQyxJQUFMLENBQVU7QUFBQ0MsSUFBQUEsTUFBTSxFQUFFLFFBQVQ7QUFBbUJDLElBQUFBLE1BQU0sRUFBRTtBQUEzQixHQUFWLENBQWhCOztBQUNBLFFBQU1aLFVBQVUsQ0FBQ1EsU0FBRCxDQUFoQjtBQUVBLE1BQUlLLE9BQU8sR0FBRyxFQUFkOztBQUNBLE1BQUk7QUFFRixVQUFNLEtBQUtDLEdBQUwsQ0FBU0MsTUFBVCxDQUFnQlIsY0FBaEIsQ0FBTjtBQUVBLFVBQU0sS0FBS08sR0FBTCxDQUFTRSxtQkFBVCxDQUE2QlYsaUJBQTdCLEVBQWdELEtBQUtXLFVBQXJELENBQU47QUFFQSxVQUFNLEtBQUtILEdBQUwsQ0FBU0ksSUFBVCxDQUFjWCxjQUFkLEVBQThCQyxTQUE5QixDQUFOO0FBQ0EsUUFBSVcsSUFBSSxHQUFHLE1BQU1qQixrQkFBR2tCLFFBQUgsQ0FBWVosU0FBWixDQUFqQjtBQUNBSyxJQUFBQSxPQUFPLEdBQUdRLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSCxJQUFaLEVBQWtCSSxRQUFsQixDQUEyQixRQUEzQixDQUFWO0FBQ0EsVUFBTXZCLFVBQVUsQ0FBQ1EsU0FBRCxDQUFoQjtBQUNELEdBVkQsQ0FVRSxPQUFPZ0IsR0FBUCxFQUFZO0FBQ1pDLG9CQUFJQyxLQUFKLENBQVcsK0JBQThCRixHQUFHLENBQUNHLE9BQVEsRUFBckQ7QUFDRDs7QUFDRCxTQUFPZCxPQUFQO0FBQ0QsQ0FuQkQ7O0FBc0JBZSxNQUFNLENBQUNDLE1BQVAsQ0FBYzlCLFVBQWQsRUFBMEJGLFFBQTFCLEVBQW9DQyxPQUFwQztlQUVlQyxVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHRlbXAgZnJvbSAndGVtcCc7XG5pbXBvcnQgeyBmcyB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcblxuXG5sZXQgY29tbWFuZHMgPSB7fSwgaGVscGVycyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbmFzeW5jIGZ1bmN0aW9uIHVubGlua0ZpbGUgKGZpbGUpIHtcbiAgaWYgKGF3YWl0IGZzLmV4aXN0cyhmaWxlKSkge1xuICAgIGF3YWl0IGZzLnVubGluayhmaWxlKTtcbiAgfVxufVxuXG5jb21tYW5kcy5lbmRDb3ZlcmFnZSA9IGFzeW5jIGZ1bmN0aW9uIGVuZENvdmVyYWdlIChpbnRlbnRUb0Jyb2FkY2FzdCwgZWNPbkRldmljZVBhdGgpIHtcbiAgbGV0IGxvY2FsRmlsZSA9IHRlbXAucGF0aCh7cHJlZml4OiAnYXBwaXVtJywgc3VmZml4OiAnLmVjJ30pO1xuICBhd2FpdCB1bmxpbmtGaWxlKGxvY2FsRmlsZSk7XG5cbiAgbGV0IGI2NGRhdGEgPSAnJztcbiAgdHJ5IHtcbiAgICAvLyBlbnN1cmUgdGhlIGVjIHdlJ3JlIHB1bGxpbmcgaXMgbmV3bHkgY3JlYXRlZCBhcyBhIHJlc3VsdCBvZiB0aGUgaW50ZW50LlxuICAgIGF3YWl0IHRoaXMuYWRiLnJpbXJhZihlY09uRGV2aWNlUGF0aCk7XG5cbiAgICBhd2FpdCB0aGlzLmFkYi5icm9hZGNhc3RQcm9jZXNzRW5kKGludGVudFRvQnJvYWRjYXN0LCB0aGlzLmFwcFByb2Nlc3MpO1xuXG4gICAgYXdhaXQgdGhpcy5hZGIucHVsbChlY09uRGV2aWNlUGF0aCwgbG9jYWxGaWxlKTtcbiAgICBsZXQgZGF0YSA9IGF3YWl0IGZzLnJlYWRGaWxlKGxvY2FsRmlsZSk7XG4gICAgYjY0ZGF0YSA9IEJ1ZmZlci5mcm9tKGRhdGEpLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgICBhd2FpdCB1bmxpbmtGaWxlKGxvY2FsRmlsZSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZy5kZWJ1ZyhgRXJyb3IgZW5kaW5nIHRlc3QgY292ZXJhZ2U6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gIH1cbiAgcmV0dXJuIGI2NGRhdGE7XG59O1xuXG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgY29tbWFuZHMsIGhlbHBlcnMpO1xuZXhwb3J0IHsgY29tbWFuZHMsIGhlbHBlcnMgfTtcbmV4cG9ydCBkZWZhdWx0IGV4dGVuc2lvbnM7XG4iXSwiZmlsZSI6ImxpYi9jb21tYW5kcy9jb3ZlcmFnZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
