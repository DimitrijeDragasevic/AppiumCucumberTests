"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.installApp = installApp;
exports.removeApp = removeApp;
exports.launch = launch;
exports.spawn = spawn;
exports.spawnSubProcess = spawnSubProcess;
exports.openUrl = openUrl;
exports.terminate = terminate;
exports.shutdown = shutdown;
exports.createDevice = createDevice;
exports.getAppContainer = getAppContainer;
exports.getScreenshot = getScreenshot;
exports.deleteDevice = deleteDevice;
exports.eraseDevice = eraseDevice;
exports.getDevices = getDevices;
exports.getRuntimeForPlatformVersion = getRuntimeForPlatformVersion;
exports.bootDevice = bootDevice;
exports.setPasteboard = setPasteboard;
exports.getPasteboard = getPasteboard;
exports.addMedia = addMedia;
exports.appInfo = appInfo;
exports.getDeviceTypes = getDeviceTypes;
exports.startBootMonitor = startBootMonitor;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

require("source-map-support/register");

var _teen_process = require("teen_process");

var _asyncbox = require("asyncbox");

var _appiumSupport = require("appium-support");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumXcode = require("appium-xcode");

const log = _appiumSupport.logger.getLogger('simctl');

const CMDLINE_TOOLS_CLANG_FORMAT_CHANGED_VERSION = '1001.0.46';
const XCODE_FORMAT_CHANGED_VERSION = '10.2';
const SIM_RUNTIME_NAME = 'com.apple.CoreSimulator.SimRuntime.';
const SIM_RUNTIME_NAME_SUFFIX_IOS = 'iOS';
const DEFAULT_CREATE_SIMULATOR_TIMEOUT = 10000;

async function simCommand(command, timeout, args = [], env = {}, executingFunction = _teen_process.exec, logErrors = true) {
  args = ['simctl', command, ...args];
  env = _lodash.default.defaults(_lodash.default.mapKeys(env, (value, key) => {
    return `SIMCTL_CHILD_${key}`;
  }), process.env);

  try {
    return await executingFunction('xcrun', args, {
      timeout,
      env
    });
  } catch (e) {
    if (!logErrors) {
      throw e;
    } else if (e.stderr) {
      log.errorAndThrow(`simctl error running '${command}': ${e.stderr.trim()}`);
    } else {
      log.errorAndThrow(e);
    }
  }
}

async function simExec(command, timeout, args = [], env = {}, logErrors = true) {
  return await simCommand(command, timeout, args, env, async (c, a, ob) => {
    return await (0, _teen_process.exec)(c, a, ob);
  }, logErrors);
}

async function simSubProcess(command, timeout, args = [], env = {}) {
  return await simCommand(command, timeout, args, env, (c, a, ob) => {
    return new _teen_process.SubProcess(c, a, ob);
  });
}

async function installApp(udid, appPath) {
  await simExec('install', 0, [udid, appPath]);
}

async function bootDevice(udid) {
  try {
    await simExec('boot', 0, [udid]);
  } catch (err) {
    if ((err.message || '').indexOf('Unable to boot device in current state: Booted') === -1) {
      throw err;
    }

    log.debug(`Simulator already in 'Booted' state. Continuing`);
  }
}

async function removeApp(udid, bundleId) {
  await simExec('uninstall', 0, [udid, bundleId]);
}

async function launch(udid, bundleId, tries = 5) {
  await (0, _asyncbox.retryInterval)(tries, 1000, async () => {
    await simExec('launch', 0, [udid, bundleId]);
  });
}

async function spawn(udid, args, env = {}) {
  return await simExec('spawn', 0, [udid, ...(_lodash.default.isArray(args) ? args : [args])], env);
}

async function spawnSubProcess(udid, args, env = {}) {
  return await simSubProcess('spawn', 0, [udid, ...(_lodash.default.isArray(args) ? args : [args])], env);
}

async function openUrl(udid, url) {
  return await simExec('openurl', 0, [udid, url]);
}

async function appInfo(udid, bundleId) {
  const {
    stdout
  } = await simExec('appinfo', 0, [udid, bundleId]);
  return (stdout || '').trim();
}

async function addMedia(udid, path) {
  return await simExec('addmedia', 0, [udid, path]);
}

async function terminate(udid, bundleId) {
  await simExec('terminate', 0, [udid, bundleId]);
}

async function getAppContainer(udid, bundleId, logErrors = true, containerType = null) {
  const args = [udid, bundleId];

  if (containerType) {
    args.push(containerType);
  }

  const {
    stdout
  } = await simExec('get_app_container', 0, args, {}, logErrors);
  return (stdout || '').trim();
}

async function shutdown(udid) {
  try {
    await simExec('shutdown', 0, [udid]);
  } catch (err) {
    if (!(err + '').includes('current state: Shutdown')) {
      throw err;
    }

    log.debug(`Simulator already in 'Shutdown' state. Continuing`);
  }
}

async function createDevice(name, deviceTypeId, runtimeId, opts = {}) {
  const {
    platform = SIM_RUNTIME_NAME_SUFFIX_IOS,
    timeout = DEFAULT_CREATE_SIMULATOR_TIMEOUT
  } = opts;

  try {
    runtimeId = await getRuntimeForPlatformVersion(runtimeId, platform);
  } catch (err) {
    log.warn(`Unable to find runtime for iOS '${runtimeId}'. Continuing`);
  }

  const clangVersion = await (0, _appiumXcode.getClangVersion)();

  let isNewerIdFormatRequired = clangVersion && _appiumSupport.util.compareVersions(clangVersion, '>=', CMDLINE_TOOLS_CLANG_FORMAT_CHANGED_VERSION);

  if (!isNewerIdFormatRequired) {
    const xcodeVersion = await (0, _appiumXcode.getVersion)(false);
    isNewerIdFormatRequired = xcodeVersion && _appiumSupport.util.compareVersions(xcodeVersion, '>=', XCODE_FORMAT_CHANGED_VERSION);
  }

  if (isNewerIdFormatRequired) {
    runtimeId = `${SIM_RUNTIME_NAME}${platform}-${runtimeId.replace(/\./g, '-')}`;
  }

  log.debug(`Creating simulator with name '${name}', device type id '${deviceTypeId}' and runtime id '${runtimeId}'`);
  let udid;

  try {
    const out = await simExec('create', 0, [name, deviceTypeId, runtimeId]);
    udid = out.stdout.trim();
  } catch (err) {
    let reason = err.message;

    if (err.stderr) {
      reason = err.stderr.trim();
    }

    log.errorAndThrow(`Could not create simulator with name '${name}', device ` + `type id '${deviceTypeId}' and runtime id '${runtimeId}'. Reason: '${reason}'`);
  }

  let retries = parseInt(timeout / 1000, 10);
  await (0, _asyncbox.retryInterval)(retries, 1000, async () => {
    let devices = await getDevices();

    for (const deviceArr of _lodash.default.values(devices)) {
      for (const device of deviceArr) {
        if (device.udid === udid) {
          if (device.state === 'Creating') {
            throw new Error('Device still being created');
          } else {
            return;
          }
        }
      }
    }
  });
  return udid;
}

async function deleteDevice(udid) {
  await simExec('delete', 0, [udid]);
}

async function eraseDevice(udid, timeout = 1000) {
  let loopFn = async () => {
    await simExec('erase', 10000, [udid]);
  };

  let retries = parseInt(timeout / 200, 10);
  await (0, _asyncbox.retryInterval)(retries, 200, loopFn);
}

async function getDevicesByParsing(platform) {
  const {
    stdout
  } = await simExec('list', 0, ['devices']);
  const deviceSectionRe = _lodash.default.isEmpty(platform) ? new RegExp(`\\-\\-\\s+(\\S+)\\s+(\\S+)\\s+\\-\\-(\\n\\s{4}.+)*`, 'mgi') : new RegExp(`\\-\\-\\s+${_lodash.default.escapeRegExp(platform)}\\s+(\\S+)\\s+\\-\\-(\\n\\s{4}.+)*`, 'mgi');
  const matches = [];
  let match;

  while (match = deviceSectionRe.exec(stdout)) {
    matches.push(match);
  }

  if (_lodash.default.isEmpty(matches)) {
    throw new Error('Could not find device section');
  }

  const lineRe = /([^\s].+) \((\w+-.+\w+)\) \((\w+\s?\w+)\)/;
  const devices = {};

  for (match of matches) {
    const sdk = platform ? match[1] : match[2];
    devices[sdk] = devices[sdk] || [];

    for (const line of match[0].split('\n').slice(1)) {
      if (line.includes('(unavailable, ')) {
        continue;
      }

      const lineMatch = lineRe.exec(line);

      if (!lineMatch) {
        throw new Error(`Could not match line: ${line}`);
      }

      devices[sdk].push({
        name: lineMatch[1],
        udid: lineMatch[2],
        state: lineMatch[3],
        sdk,
        platform: platform || match[1]
      });
    }
  }

  return devices;
}

async function getDevices(forSdk, platform) {
  let devices = {};

  try {
    const {
      stdout
    } = await simExec('list', 0, ['devices', '-j']);
    const versionMatchRe = _lodash.default.isEmpty(platform) ? new RegExp(`^([^\\s-]+)[\\s-](\\S+)`, 'i') : new RegExp(`^${_lodash.default.escapeRegExp(platform)}[\\s-](\\S+)`, 'i');

    for (let [sdkName, entries] of _lodash.default.toPairs(JSON.parse(stdout).devices)) {
      sdkName = sdkName.replace(SIM_RUNTIME_NAME, '');
      const versionMatch = versionMatchRe.exec(sdkName);

      if (!versionMatch) {
        continue;
      }

      const sdk = (platform ? versionMatch[1] : versionMatch[2]).replace('-', '.');
      devices[sdk] = devices[sdk] || [];
      devices[sdk].push(...entries.filter(el => _lodash.default.isUndefined(el.isAvailable) || el.isAvailable).map(el => {
        delete el.availability;
        return (0, _objectSpread2.default)({
          sdk
        }, el, {
          platform: platform || versionMatch[1]
        });
      }));
    }
  } catch (err) {
    log.debug(`Unable to get JSON device list: ${err.stack}`);
    log.debug('Falling back to manual parsing');
    devices = await getDevicesByParsing(platform);
  }

  if (!forSdk) {
    return devices;
  }

  if (devices[forSdk]) {
    return devices[forSdk];
  }

  let errMsg = `'${forSdk}' does not exist in the list of simctl SDKs.`;

  const availableSDKs = _lodash.default.keys(devices);

  errMsg += availableSDKs.length ? ` Only the following Simulator SDK versions are available on your system: ${availableSDKs.join(', ')}` : ` No Simulator SDK versions are available on your system. Please install some via Xcode preferences.`;
  throw new Error(errMsg);
}

async function getRuntimeForPlatformVersion(platformVersion, platform = 'iOS') {
  try {
    const {
      stdout
    } = await simExec('list', 0, ['runtimes']);
    const runtimeRe = new RegExp(`${_lodash.default.escapeRegExp(platform)}\\s+(\\d+\\.\\d+)\\s+\\((\\d+\\.\\d+\\.*\\d*)`, 'i');

    for (const line of stdout.split('\n')) {
      const match = runtimeRe.exec(line);

      if (match && match[1] === platformVersion) {
        return match[2];
      }
    }
  } catch (ign) {}

  return platformVersion;
}

async function getScreenshot(udid) {
  let pathToScreenshotPng = await _appiumSupport.tempDir.path({
    prefix: `screenshot-${udid}`,
    suffix: '.png'
  });
  await simExec('io', 0, [udid, 'screenshot', pathToScreenshotPng]);
  let screenshotImg = await _appiumSupport.fs.readFile(pathToScreenshotPng);
  await _appiumSupport.fs.rimraf(pathToScreenshotPng);
  return screenshotImg.toString('base64');
}

async function setPasteboard(udid, content, encoding = 'utf-8') {
  const pbCopySubprocess = new _teen_process.SubProcess('xcrun', ['simctl', 'pbcopy', udid]);
  await pbCopySubprocess.start(0);
  const exitCodeVerifier = pbCopySubprocess.join();
  const stdin = pbCopySubprocess.proc.stdin;
  stdin.setEncoding(encoding);
  stdin.write(content);
  stdin.end();
  await exitCodeVerifier;
}

async function getPasteboard(udid, encoding = 'utf-8') {
  const args = ['simctl', 'pbpaste', udid];

  try {
    const {
      stdout
    } = await (0, _teen_process.exec)('xcrun', args, {
      timeout: 0,
      encoding
    });
    return stdout;
  } catch (e) {
    if (e.stderr) {
      log.errorAndThrow(`Error running 'xcrun ${args.join(' ')}': ${e.stderr.trim()}`);
    } else {
      log.errorAndThrow(e);
    }
  }
}

async function getDeviceTypes() {
  try {
    const {
      stdout
    } = await simExec('list', 0, ['devicetypes', '-j']);
    const deviceTypes = JSON.parse(stdout.trim());
    return deviceTypes.devicetypes.map(type => type.name);
  } catch (err) {
    let msg = `Unable to get list of device types: ${err.message}`;

    if (err.stderr) {
      msg = `${msg}. Stderr: ${err.stderr}`;
    }

    throw new Error(msg);
  }
}

async function startBootMonitor(udid, opts = {}) {
  const {
    timeout = 240000,
    onWaitingDataMigration,
    onWaitingSystemApp,
    onFinished,
    onError
  } = opts;
  let status = '';
  let isBootingFinished = false;
  let error = null;
  let timeoutHandler = null;
  const bootMonitor = await simSubProcess('bootstatus', 0, [udid]);
  bootMonitor.on('output', (stdout, stderr) => {
    status += stdout || stderr;

    if (stdout) {
      if (stdout.includes('Waiting on Data Migration') && onWaitingDataMigration) {
        onWaitingDataMigration();
      } else if (stdout.includes('Waiting on System App') && onWaitingSystemApp) {
        onWaitingSystemApp();
      }
    }
  });
  bootMonitor.on('exit', (code, signal) => {
    if (timeoutHandler) {
      clearTimeout(timeoutHandler);
    }

    if (code === 0) {
      if (onFinished) {
        onFinished();
      }

      isBootingFinished = true;
    } else {
      status = status || signal;
      error = new Error(status);

      if (onError) {
        onError(error);
      }
    }
  });
  await bootMonitor.start(0);

  const stopMonitor = async () => {
    if (bootMonitor.isRunning) {
      try {
        await bootMonitor.stop();
      } catch (e) {
        log.warn(e.message);
      }
    }
  };

  const timeStarted = process.hrtime();

  if (onFinished) {
    timeoutHandler = setTimeout(stopMonitor, timeout);
  } else {
    try {
      await (0, _asyncbox.waitForCondition)(() => {
        if (error) {
          throw error;
        }

        return isBootingFinished;
      }, {
        waitMs: timeout,
        intervalMs: 500
      });
    } catch (err) {
      await stopMonitor();
      throw new Error(`The simulator ${udid} has failed to finish booting after ${process.hrtime(timeStarted)[0]}s. ` + `Original status: ${status}`);
    }
  }

  return bootMonitor;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
