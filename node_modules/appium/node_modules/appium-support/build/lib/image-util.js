"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cropBase64Image = cropBase64Image;
exports.base64ToImage = base64ToImage;
exports.imageToBase64 = imageToBase64;
exports.cropImage = cropImage;
exports.getImagesMatches = getImagesMatches;
exports.getImagesSimilarity = getImagesSimilarity;
exports.getImageOccurrence = getImageOccurrence;
exports.getJimpImage = getJimpImage;
exports.MIME_BMP = exports.MIME_PNG = exports.MIME_JPEG = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _jimp = _interopRequireDefault(require("jimp"));

var _buffer = require("buffer");

var _pngjs = require("pngjs");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _util = require("./util");

const MIME_JPEG = _jimp.default.MIME_JPEG,
      MIME_PNG = _jimp.default.MIME_PNG,
      MIME_BMP = _jimp.default.MIME_BMP;
exports.MIME_BMP = MIME_BMP;
exports.MIME_PNG = MIME_PNG;
exports.MIME_JPEG = MIME_JPEG;
let cv = null;
const BYTES_IN_PIXEL_BLOCK = 4;
const SCANLINE_FILTER_METHOD = 4;
const DEFAULT_MATCH_THRESHOLD = 0.5;
const AVAILABLE_DETECTORS = ['AKAZE', 'AGAST', 'BRISK', 'FAST', 'GFTT', 'KAZE', 'MSER', 'SIFT', 'ORB'];
const AVAILABLE_MATCHING_FUNCTIONS = ['FlannBased', 'BruteForce', 'BruteForceL1', 'BruteForceHamming', 'BruteForceHammingLut', 'BruteForceSL2'];

function getJimpImage(_x) {
  return _getJimpImage.apply(this, arguments);
}

function _getJimpImage() {
  _getJimpImage = (0, _asyncToGenerator2.default)(function* (data) {
    return yield new _bluebird.default((resolve, reject) => {
      if (!_lodash.default.isString(data) && !_lodash.default.isBuffer(data)) {
        return reject(new Error('Must initialize jimp object with string or buffer'));
      }

      if (_lodash.default.isString(data)) {
        data = _buffer.Buffer.from(data, 'base64');
      }

      new _jimp.default(data, (err, imgObj) => {
        if (err) {
          return reject(err);
        }

        if (!imgObj) {
          return reject(new Error('Could not create jimp image from that data'));
        }

        imgObj._getBuffer = imgObj.getBuffer.bind(imgObj);
        imgObj.getBuffer = _bluebird.default.promisify(imgObj._getBuffer, {
          context: imgObj
        });
        resolve(imgObj);
      });
    });
  });
  return _getJimpImage.apply(this, arguments);
}

function initOpenCV() {
  if (!cv) {
    try {
      cv = require('opencv4nodejs');
    } catch (ign) {}
  }

  if (!cv) {
    throw new Error('opencv4nodejs module is required to use OpenCV features. ' + 'Please install it first (npm i -g opencv4nodejs) and restart Appium. ' + 'Read https://github.com/justadudewhohacks/opencv4nodejs#how-to-install for more details on this topic.');
  }
}

function detectAndCompute(_x2, _x3) {
  return _detectAndCompute.apply(this, arguments);
}

function _detectAndCompute() {
  _detectAndCompute = (0, _asyncToGenerator2.default)(function* (img, detector) {
    const keyPoints = yield detector.detectAsync(img);
    const descriptor = yield detector.computeAsync(img, keyPoints);
    return {
      keyPoints,
      descriptor
    };
  });
  return _detectAndCompute.apply(this, arguments);
}

function calculateMatchedRect(matchedPoints) {
  if (matchedPoints.length < 2) {
    return {
      x: 0,
      y: 0,
      width: 0,
      height: 0
    };
  }

  const pointsSortedByDistance = matchedPoints.map(point => [Math.sqrt(point.x * point.x + point.y * point.y), point]).sort((pair1, pair2) => pair1[0] >= pair2[0]).map(pair => pair[1]);

  const firstPoint = _lodash.default.head(pointsSortedByDistance);

  const lastPoint = _lodash.default.last(pointsSortedByDistance);

  const topLeftPoint = {
    x: firstPoint.x <= lastPoint.x ? firstPoint.x : lastPoint.x,
    y: firstPoint.y <= lastPoint.y ? firstPoint.y : lastPoint.y
  };
  const bottomRightPoint = {
    x: firstPoint.x >= lastPoint.x ? firstPoint.x : lastPoint.x,
    y: firstPoint.y >= lastPoint.y ? firstPoint.y : lastPoint.y
  };
  return {
    x: topLeftPoint.x,
    y: topLeftPoint.y,
    width: bottomRightPoint.x - topLeftPoint.x,
    height: bottomRightPoint.y - topLeftPoint.y
  };
}

function highlightRegion(mat, region) {
  if (region.width <= 0 || region.height <= 0) {
    return;
  }

  const color = new cv.Vec(0, 0, 255);
  const thickness = 2;
  mat.drawRectangle(new cv.Rect(region.x, region.y, region.width, region.height), color, thickness, cv.LINE_8);
  return mat;
}

function getImagesMatches(_x4, _x5) {
  return _getImagesMatches.apply(this, arguments);
}

function _getImagesMatches() {
  _getImagesMatches = (0, _asyncToGenerator2.default)(function* (img1Data, img2Data, options = {}) {
    initOpenCV();
    const _options$detectorName = options.detectorName,
          detectorName = _options$detectorName === void 0 ? 'ORB' : _options$detectorName,
          _options$visualize = options.visualize,
          visualize = _options$visualize === void 0 ? false : _options$visualize,
          goodMatchesFactor = options.goodMatchesFactor,
          _options$matchFunc = options.matchFunc,
          matchFunc = _options$matchFunc === void 0 ? 'BruteForce' : _options$matchFunc;

    if (!_lodash.default.includes(AVAILABLE_DETECTORS, detectorName)) {
      throw new Error(`'${detectorName}' detector is unknown. ` + `Only ${JSON.stringify(AVAILABLE_DETECTORS)} detectors are supported.`);
    }

    if (!_lodash.default.includes(AVAILABLE_MATCHING_FUNCTIONS, matchFunc)) {
      throw new Error(`'${matchFunc}' matching function is unknown. ` + `Only ${JSON.stringify(AVAILABLE_MATCHING_FUNCTIONS)} matching functions are supported.`);
    }

    const detector = new cv[`${detectorName}Detector`]();

    const _ref = yield _bluebird.default.all([cv.imdecodeAsync(img1Data), cv.imdecodeAsync(img2Data)]),
          _ref2 = (0, _slicedToArray2.default)(_ref, 2),
          img1 = _ref2[0],
          img2 = _ref2[1];

    const _ref3 = yield _bluebird.default.all([detectAndCompute(img1, detector), detectAndCompute(img2, detector)]),
          _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
          result1 = _ref4[0],
          result2 = _ref4[1];

    let matches = [];

    try {
      matches = yield cv[`match${matchFunc}Async`](result1.descriptor, result2.descriptor);
    } catch (e) {
      throw new Error(`Cannot find any matches between the given images. Try another detection algorithm. ` + ` Original error: ${e}`);
    }

    const totalCount = matches.length;

    if ((0, _util.hasValue)(goodMatchesFactor)) {
      if (_lodash.default.isFunction(goodMatchesFactor)) {
        const distances = matches.map(match => match.distance);

        const minDistance = _lodash.default.min(distances);

        const maxDistance = _lodash.default.max(distances);

        matches = matches.filter(match => goodMatchesFactor(match.distance, minDistance, maxDistance));
      } else {
        if (matches.length > goodMatchesFactor) {
          matches = matches.sort((match1, match2) => match1.distance - match2.distance).slice(0, goodMatchesFactor);
        }
      }
    }

    const points1 = matches.map(match => result1.keyPoints[match.queryIdx].point);
    const rect1 = calculateMatchedRect(points1);
    const points2 = matches.map(match => result2.keyPoints[match.trainIdx].point);
    const rect2 = calculateMatchedRect(points2);
    const result = {
      points1,
      rect1,
      points2,
      rect2,
      totalCount,
      count: matches.length
    };

    if (visualize) {
      const visualization = cv.drawMatches(img1, img2, result1.keyPoints, result2.keyPoints, matches);
      highlightRegion(visualization, rect1);
      highlightRegion(visualization, {
        x: img1.cols + rect2.x,
        y: rect2.y,
        width: rect2.width,
        height: rect2.height
      });
      result.visualization = yield cv.imencodeAsync('.png', visualization);
    }

    return result;
  });
  return _getImagesMatches.apply(this, arguments);
}

function getImagesSimilarity(_x6, _x7) {
  return _getImagesSimilarity.apply(this, arguments);
}

function _getImagesSimilarity() {
  _getImagesSimilarity = (0, _asyncToGenerator2.default)(function* (img1Data, img2Data, options = {}) {
    initOpenCV();
    const _options$visualize2 = options.visualize,
          visualize = _options$visualize2 === void 0 ? false : _options$visualize2;

    let _ref5 = yield _bluebird.default.all([cv.imdecodeAsync(img1Data), cv.imdecodeAsync(img2Data)]),
        _ref6 = (0, _slicedToArray2.default)(_ref5, 2),
        template = _ref6[0],
        reference = _ref6[1];

    if (template.rows !== reference.rows || template.cols !== reference.cols) {
      throw new Error('Both images are expected to have the same size in order to ' + 'calculate the similarity score.');
    }

    var _ref7 = yield _bluebird.default.all([template.convertToAsync(cv.CV_8UC3), reference.convertToAsync(cv.CV_8UC3)]);

    var _ref8 = (0, _slicedToArray2.default)(_ref7, 2);

    template = _ref8[0];
    reference = _ref8[1];
    const matched = yield reference.matchTemplateAsync(template, cv.TM_CCOEFF_NORMED);
    const minMax = yield matched.minMaxLocAsync();
    const result = {
      score: minMax.maxVal
    };

    if (visualize) {
      const resultMat = new cv.Mat(template.rows, template.cols * 2, cv.CV_8UC3);
      yield _bluebird.default.all([reference.copyToAsync(resultMat.getRegion(new cv.Rect(0, 0, reference.cols, reference.rows))), template.copyToAsync(resultMat.getRegion(new cv.Rect(reference.cols, 0, template.cols, template.rows)))]);
      let mask = reference.absdiff(template);
      mask = yield mask.cvtColorAsync(cv.COLOR_BGR2GRAY);
      let contours = [];

      try {
        mask = yield mask.thresholdAsync(128, 255, cv.THRESH_BINARY | cv.THRESH_OTSU);
        contours = yield mask.findContoursAsync(cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE);
      } catch (ign) {}

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = contours[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          const contour = _step.value;
          const boundingRect = contour.boundingRect();
          highlightRegion(resultMat, boundingRect);
          highlightRegion(resultMat, {
            x: reference.cols + boundingRect.x,
            y: boundingRect.y,
            width: boundingRect.width,
            height: boundingRect.height
          });
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      result.visualization = yield cv.imencodeAsync('.png', resultMat);
    }

    return result;
  });
  return _getImagesSimilarity.apply(this, arguments);
}

function getImageOccurrence(_x8, _x9) {
  return _getImageOccurrence.apply(this, arguments);
}

function _getImageOccurrence() {
  _getImageOccurrence = (0, _asyncToGenerator2.default)(function* (fullImgData, partialImgData, options = {}) {
    initOpenCV();
    const _options$visualize3 = options.visualize,
          visualize = _options$visualize3 === void 0 ? false : _options$visualize3,
          _options$threshold = options.threshold,
          threshold = _options$threshold === void 0 ? DEFAULT_MATCH_THRESHOLD : _options$threshold;

    const _ref9 = yield _bluebird.default.all([cv.imdecodeAsync(fullImgData), cv.imdecodeAsync(partialImgData)]),
          _ref10 = (0, _slicedToArray2.default)(_ref9, 2),
          fullImg = _ref10[0],
          partialImg = _ref10[1];

    const result = {};

    try {
      const matched = yield fullImg.matchTemplateAsync(partialImg, cv.TM_CCOEFF_NORMED);
      const minMax = yield matched.minMaxLocAsync();

      if (minMax.maxVal < threshold) {
        throw new Error(`Cannot find any occurrences of the partial image in the full ` + `image above the threshold of ${threshold}. Highest match value ` + `found was ${minMax.maxVal}`);
      }

      result.rect = {
        x: minMax.maxLoc.x,
        y: minMax.maxLoc.y,
        width: partialImg.cols,
        height: partialImg.rows
      };
    } catch (e) {
      throw new Error(`Cannot find any occurences of the partial image in the full image. ` + `Original error: ${e}`);
    }

    if (visualize) {
      highlightRegion(fullImg, result.rect);
      result.visualization = yield cv.imencodeAsync('.png', fullImg);
    }

    return result;
  });
  return _getImageOccurrence.apply(this, arguments);
}

function cropBase64Image(_x10, _x11) {
  return _cropBase64Image.apply(this, arguments);
}

function _cropBase64Image() {
  _cropBase64Image = (0, _asyncToGenerator2.default)(function* (base64Image, rect) {
    const image = yield base64ToImage(base64Image);
    cropImage(image, rect);
    return yield imageToBase64(image);
  });
  return _cropBase64Image.apply(this, arguments);
}

function base64ToImage(_x12) {
  return _base64ToImage.apply(this, arguments);
}

function _base64ToImage() {
  _base64ToImage = (0, _asyncToGenerator2.default)(function* (base64Image) {
    const imageBuffer = _buffer.Buffer.from(base64Image, 'base64');

    return yield new _bluebird.default((resolve, reject) => {
      const image = new _pngjs.PNG({
        filterType: SCANLINE_FILTER_METHOD
      });
      image.parse(imageBuffer, (err, image) => {
        if (err) {
          return reject(err);
        }

        resolve(image);
      });
    });
  });
  return _base64ToImage.apply(this, arguments);
}

function imageToBase64(_x13) {
  return _imageToBase.apply(this, arguments);
}

function _imageToBase() {
  _imageToBase = (0, _asyncToGenerator2.default)(function* (image) {
    return yield new _bluebird.default((resolve, reject) => {
      const chunks = [];
      image.pack().on('data', chunk => chunks.push(chunk)).on('end', () => {
        resolve(_buffer.Buffer.concat(chunks).toString('base64'));
      }).on('error', err => {
        reject(err);
      });
    });
  });
  return _imageToBase.apply(this, arguments);
}

function cropImage(image, rect) {
  const imageRect = {
    width: image.width,
    height: image.height
  };
  const interRect = getRectIntersection(rect, imageRect);

  if (interRect.width < rect.width || interRect.height < rect.height) {
    throw new Error(`Cannot crop ${JSON.stringify(rect)} from ${JSON.stringify(imageRect)} because the intersection between them was not the size of the rect`);
  }

  const firstVerticalPixel = interRect.top;
  const lastVerticalPixel = interRect.top + interRect.height;
  const firstHorizontalPixel = interRect.left;
  const lastHorizontalPixel = interRect.left + interRect.width;
  const croppedArray = [];

  for (let y = firstVerticalPixel; y < lastVerticalPixel; y++) {
    for (let x = firstHorizontalPixel; x < lastHorizontalPixel; x++) {
      const firstByteIdxInPixelBlock = imageRect.width * y + x << 2;

      for (let byteIdx = 0; byteIdx < BYTES_IN_PIXEL_BLOCK; byteIdx++) {
        croppedArray.push(image.data[firstByteIdxInPixelBlock + byteIdx]);
      }
    }
  }

  image.data = _buffer.Buffer.from(croppedArray);
  image.width = interRect.width;
  image.height = interRect.height;
  return image;
}

function getRectIntersection(rect, imageSize) {
  const left = rect.left >= imageSize.width ? imageSize.width : rect.left;
  const top = rect.top >= imageSize.height ? imageSize.height : rect.top;
  const width = imageSize.width >= left + rect.width ? rect.width : imageSize.width - left;
  const height = imageSize.height >= top + rect.height ? rect.height : imageSize.height - top;
  return {
    left,
    top,
    width,
    height
  };
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9pbWFnZS11dGlsLmpzIl0sIm5hbWVzIjpbIk1JTUVfSlBFRyIsIkppbXAiLCJNSU1FX1BORyIsIk1JTUVfQk1QIiwiY3YiLCJCWVRFU19JTl9QSVhFTF9CTE9DSyIsIlNDQU5MSU5FX0ZJTFRFUl9NRVRIT0QiLCJERUZBVUxUX01BVENIX1RIUkVTSE9MRCIsIkFWQUlMQUJMRV9ERVRFQ1RPUlMiLCJBVkFJTEFCTEVfTUFUQ0hJTkdfRlVOQ1RJT05TIiwiZ2V0SmltcEltYWdlIiwiZGF0YSIsIkIiLCJyZXNvbHZlIiwicmVqZWN0IiwiXyIsImlzU3RyaW5nIiwiaXNCdWZmZXIiLCJFcnJvciIsIkJ1ZmZlciIsImZyb20iLCJlcnIiLCJpbWdPYmoiLCJfZ2V0QnVmZmVyIiwiZ2V0QnVmZmVyIiwiYmluZCIsInByb21pc2lmeSIsImNvbnRleHQiLCJpbml0T3BlbkNWIiwicmVxdWlyZSIsImlnbiIsImRldGVjdEFuZENvbXB1dGUiLCJpbWciLCJkZXRlY3RvciIsImtleVBvaW50cyIsImRldGVjdEFzeW5jIiwiZGVzY3JpcHRvciIsImNvbXB1dGVBc3luYyIsImNhbGN1bGF0ZU1hdGNoZWRSZWN0IiwibWF0Y2hlZFBvaW50cyIsImxlbmd0aCIsIngiLCJ5Iiwid2lkdGgiLCJoZWlnaHQiLCJwb2ludHNTb3J0ZWRCeURpc3RhbmNlIiwibWFwIiwicG9pbnQiLCJNYXRoIiwic3FydCIsInNvcnQiLCJwYWlyMSIsInBhaXIyIiwicGFpciIsImZpcnN0UG9pbnQiLCJoZWFkIiwibGFzdFBvaW50IiwibGFzdCIsInRvcExlZnRQb2ludCIsImJvdHRvbVJpZ2h0UG9pbnQiLCJoaWdobGlnaHRSZWdpb24iLCJtYXQiLCJyZWdpb24iLCJjb2xvciIsIlZlYyIsInRoaWNrbmVzcyIsImRyYXdSZWN0YW5nbGUiLCJSZWN0IiwiTElORV84IiwiZ2V0SW1hZ2VzTWF0Y2hlcyIsImltZzFEYXRhIiwiaW1nMkRhdGEiLCJvcHRpb25zIiwiZGV0ZWN0b3JOYW1lIiwidmlzdWFsaXplIiwiZ29vZE1hdGNoZXNGYWN0b3IiLCJtYXRjaEZ1bmMiLCJpbmNsdWRlcyIsIkpTT04iLCJzdHJpbmdpZnkiLCJhbGwiLCJpbWRlY29kZUFzeW5jIiwiaW1nMSIsImltZzIiLCJyZXN1bHQxIiwicmVzdWx0MiIsIm1hdGNoZXMiLCJlIiwidG90YWxDb3VudCIsImlzRnVuY3Rpb24iLCJkaXN0YW5jZXMiLCJtYXRjaCIsImRpc3RhbmNlIiwibWluRGlzdGFuY2UiLCJtaW4iLCJtYXhEaXN0YW5jZSIsIm1heCIsImZpbHRlciIsIm1hdGNoMSIsIm1hdGNoMiIsInNsaWNlIiwicG9pbnRzMSIsInF1ZXJ5SWR4IiwicmVjdDEiLCJwb2ludHMyIiwidHJhaW5JZHgiLCJyZWN0MiIsInJlc3VsdCIsImNvdW50IiwidmlzdWFsaXphdGlvbiIsImRyYXdNYXRjaGVzIiwiY29scyIsImltZW5jb2RlQXN5bmMiLCJnZXRJbWFnZXNTaW1pbGFyaXR5IiwidGVtcGxhdGUiLCJyZWZlcmVuY2UiLCJyb3dzIiwiY29udmVydFRvQXN5bmMiLCJDVl84VUMzIiwibWF0Y2hlZCIsIm1hdGNoVGVtcGxhdGVBc3luYyIsIlRNX0NDT0VGRl9OT1JNRUQiLCJtaW5NYXgiLCJtaW5NYXhMb2NBc3luYyIsInNjb3JlIiwibWF4VmFsIiwicmVzdWx0TWF0IiwiTWF0IiwiY29weVRvQXN5bmMiLCJnZXRSZWdpb24iLCJtYXNrIiwiYWJzZGlmZiIsImN2dENvbG9yQXN5bmMiLCJDT0xPUl9CR1IyR1JBWSIsImNvbnRvdXJzIiwidGhyZXNob2xkQXN5bmMiLCJUSFJFU0hfQklOQVJZIiwiVEhSRVNIX09UU1UiLCJmaW5kQ29udG91cnNBc3luYyIsIlJFVFJfRVhURVJOQUwiLCJDSEFJTl9BUFBST1hfU0lNUExFIiwiY29udG91ciIsImJvdW5kaW5nUmVjdCIsImdldEltYWdlT2NjdXJyZW5jZSIsImZ1bGxJbWdEYXRhIiwicGFydGlhbEltZ0RhdGEiLCJ0aHJlc2hvbGQiLCJmdWxsSW1nIiwicGFydGlhbEltZyIsInJlY3QiLCJtYXhMb2MiLCJjcm9wQmFzZTY0SW1hZ2UiLCJiYXNlNjRJbWFnZSIsImltYWdlIiwiYmFzZTY0VG9JbWFnZSIsImNyb3BJbWFnZSIsImltYWdlVG9CYXNlNjQiLCJpbWFnZUJ1ZmZlciIsIlBORyIsImZpbHRlclR5cGUiLCJwYXJzZSIsImNodW5rcyIsInBhY2siLCJvbiIsImNodW5rIiwicHVzaCIsImNvbmNhdCIsInRvU3RyaW5nIiwiaW1hZ2VSZWN0IiwiaW50ZXJSZWN0IiwiZ2V0UmVjdEludGVyc2VjdGlvbiIsImZpcnN0VmVydGljYWxQaXhlbCIsInRvcCIsImxhc3RWZXJ0aWNhbFBpeGVsIiwiZmlyc3RIb3Jpem9udGFsUGl4ZWwiLCJsZWZ0IiwibGFzdEhvcml6b250YWxQaXhlbCIsImNyb3BwZWRBcnJheSIsImZpcnN0Qnl0ZUlkeEluUGl4ZWxCbG9jayIsImJ5dGVJZHgiLCJpbWFnZVNpemUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztNQUVRQSxTLEdBQWtDQyxhLENBQWxDRCxTO01BQVdFLFEsR0FBdUJELGEsQ0FBdkJDLFE7TUFBVUMsUSxHQUFhRixhLENBQWJFLFE7Ozs7QUFDN0IsSUFBSUMsRUFBRSxHQUFHLElBQVQ7QUF3QkEsTUFBTUMsb0JBQW9CLEdBQUcsQ0FBN0I7QUFDQSxNQUFNQyxzQkFBc0IsR0FBRyxDQUEvQjtBQUNBLE1BQU1DLHVCQUF1QixHQUFHLEdBQWhDO0FBRUEsTUFBTUMsbUJBQW1CLEdBQUcsQ0FDMUIsT0FEMEIsRUFFMUIsT0FGMEIsRUFHMUIsT0FIMEIsRUFJMUIsTUFKMEIsRUFLMUIsTUFMMEIsRUFNMUIsTUFOMEIsRUFPMUIsTUFQMEIsRUFRMUIsTUFSMEIsRUFTMUIsS0FUMEIsQ0FBNUI7QUFZQSxNQUFNQyw0QkFBNEIsR0FBRyxDQUNuQyxZQURtQyxFQUVuQyxZQUZtQyxFQUduQyxjQUhtQyxFQUluQyxtQkFKbUMsRUFLbkMsc0JBTG1DLEVBTW5DLGVBTm1DLENB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QUksQ0FBQzBCLElBQW5FO0FBQ0EsUUFBTUgsR0FBRyxHQUFHdkIsSUFBSSxDQUFDdUIsR0FBTCxJQUFZUSxTQUFTLENBQUN4SSxNQUF0QixHQUErQndJLFNBQVMsQ0FBQ3hJLE1BQXpDLEdBQWtEeUcsSUFBSSxDQUFDdUIsR0FBbkU7QUFDQSxRQUFNakksS0FBSyxHQUFHeUksU0FBUyxDQUFDekksS0FBVixJQUFvQm9JLElBQUksR0FBRzFCLElBQUksQ0FBQzFHLEtBQWhDLEdBQXlDMEcsSUFBSSxDQUFDMUcsS0FBOUMsR0FBdUR5SSxTQUFTLENBQUN6SSxLQUFWLEdBQWtCb0ksSUFBdkY7QUFDQSxRQUFNbkksTUFBTSxHQUFHd0ksU0FBUyxDQUFDeEksTUFBVixJQUFxQmdJLEdBQUcsR0FBR3ZCLElBQUksQ0FBQ3pHLE1BQWhDLEdBQTBDeUcsSUFBSSxDQUFDekcsTUFBL0MsR0FBeUR3SSxTQUFTLENBQUN4SSxNQUFWLEdBQW1CZ0ksR0FBM0Y7QUFDQSxTQUFPO0FBQUNHLElBQUFBLElBQUQ7QUFBT0gsSUFBQUEsR0FBUDtBQUFZakksSUFBQUEsS0FBWjtBQUFtQkMsSUFBQUE7QUFBbkIsR0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBKaW1wIGZyb20gJ2ppbXAnO1xuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSAnYnVmZmVyJztcbmltcG9ydCB7IFBORyB9IGZyb20gJ3BuZ2pzJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCB7IGhhc1ZhbHVlIH0gZnJvbSAnLi91dGlsJztcblxuY29uc3QgeyBNSU1FX0pQRUcsIE1JTUVfUE5HLCBNSU1FX0JNUCB9ID0gSmltcDtcbmxldCBjdiA9IG51bGw7XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gUmVnaW9uXG4gKiBAcHJvcGVydHkge251bWJlcn0gbGVmdCAtIFRoZSBvZmZzZXQgZnJvbSB0aGUgbGVmdCBzaWRlXG4gKiBAcHJvcGVydHkge251bWJlcn0gdG9wIC0gVGhlIG9mZnNldCBmcm9tIHRoZSB0b3BcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB3aWR0aCAtIFRoZSB3aWR0aFxuICogQHByb3BlcnR5IHtudW1iZXJ9IGhlaWdodCAtIFRoZSBoZWlnaHRcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFBvaW50XG4gKiBAcHJvcGVydHkge251bWJlcn0geCAtIFRoZSB4IGNvb3JkaW5hdGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB5IC0gVGhlIHkgY29vcmRpbmF0ZVxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gUmVjdFxuICogQHByb3BlcnR5IHtudW1iZXJ9IHggLSBUaGUgdG9wIGxlZnQgY29vcmRpbmF0ZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IHkgLSBUaGUgYm90dG9tIHJpZ2h0IGNvb3JkaW5hdGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB3aWR0aCAtIFRoZSB3aWR0aFxuICogQHByb3BlcnR5IHtudW1iZXJ9IGhlaWdodCAtIFRoZSBoZWlnaHRcbiAqL1xuXG5jb25zdCBCWVRFU19JTl9QSVhFTF9CTE9DSyA9IDQ7XG5jb25zdCBTQ0FOTElORV9GSUxURVJfTUVUSE9EID0gNDtcbmNvbnN0IERFRkFVTFRfTUFUQ0hfVEhSRVNIT0xEID0gMC41O1xuXG5jb25zdCBBVkFJTEFCTEVfREVURUNUT1JTID0gW1xuICAnQUtBWkUnLFxuICAnQUdBU1QnLFxuICAnQlJJU0snLFxuICAnRkFTVCcsXG4gICdHRlRUJyxcbiAgJ0tBWkUnLFxuICAnTVNFUicsXG4gICdTSUZUJyxcbiAgJ09SQicsXG5dO1xuXG5jb25zdCBBVkFJTEFCTEVfTUFUQ0hJTkdfRlVOQ1RJT05TID0gW1xuICAnRmxhbm5CYXNlZCcsXG4gICdCcnV0ZUZvcmNlJyxcbiAgJ0JydXRlRm9yY2VMMScsXG4gICdCcnV0ZUZvcmNlSGFtbWluZycsXG4gICdCcnV0ZUZvcmNlSGFtbWluZ0x1dCcsXG4gICdCcnV0ZUZvcmNlU0wyJyxcbl07XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiB0byBnZXQgYSBKaW1wIGltYWdlIG9iamVjdCBmcm9tIGJ1ZmZlciBvciBiYXNlNjQgZGF0YS4gSmltcFxuICogaXMgYSBncmVhdCBsaWJyYXJ5IGhvd2V2ZXIgaXQgZG9lcyBJTyBpbiB0aGUgY29uc3RydWN0b3Igc28gaXQncyBub3RcbiAqIGNvbnZlbmllbnQgZm9yIG91ciBhc3luYy9hd2FpdCBtb2RlbC5cbiAqXG4gKiBAcGFyYW0ge0J1ZmZlcnxzdHJpbmd9IGRhdGEgLSBiaW5hcnkgaW1hZ2UgYnVmZmVyIG9yIGJhc2U2NC1lbmNvZGVkIGltYWdlXG4gKiBzdHJpbmdcbiAqIEByZXR1cm5zIHtKaW1wfSAtIHRoZSBqaW1wIGltYWdlIG9iamVjdFxuICovXG5hc3luYyBmdW5jdGlvbiBnZXRKaW1wSW1hZ2UgKGRhdGEpIHtcbiAgcmV0dXJuIGF3YWl0IG5ldyBCKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBpZiAoIV8uaXNTdHJpbmcoZGF0YSkgJiYgIV8uaXNCdWZmZXIoZGF0YSkpIHtcbiAgICAgIHJldHVybiByZWplY3QobmV3IEVycm9yKCdNdXN0IGluaXRpYWxpemUgamltcCBvYmplY3Qgd2l0aCBzdHJpbmcgb3IgYnVmZmVyJykpO1xuICAgIH1cbiAgICAvLyBpZiBkYXRhIGlzIGEgc3RyaW5nLCBhc3N1bWUgaXQgaXMgYSBiYXNlNjQtZW5jb2RlZCBpbWFnZVxuICAgIGlmIChfLmlzU3RyaW5nKGRhdGEpKSB7XG4gICAgICBkYXRhID0gQnVmZmVyLmZyb20oZGF0YSwgJ2Jhc2U2NCcpO1xuICAgIH1cbiAgICBuZXcgSmltcChkYXRhLCAoZXJyLCBpbWdPYmopID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgfVxuICAgICAgaWYgKCFpbWdPYmopIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoJ0NvdWxkIG5vdCBjcmVhdGUgamltcCBpbWFnZSBmcm9tIHRoYXQgZGF0YScpKTtcbiAgICAgIH1cbiAgICAgIGltZ09iai5fZ2V0QnVmZmVyID0gaW1nT2JqLmdldEJ1ZmZlci5iaW5kKGltZ09iaik7XG4gICAgICBpbWdPYmouZ2V0QnVmZmVyID0gQi5wcm9taXNpZnkoaW1nT2JqLl9nZXRCdWZmZXIsIHtjb250ZXh0OiBpbWdPYmp9KTtcbiAgICAgIHJlc29sdmUoaW1nT2JqKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbi8qKlxuICogQHRocm93cyB7RXJyb3J9IElmIG9wZW5jdjRub2RlanMgbW9kdWxlIGlzIG5vdCBpbnN0YWxsZWQgb3IgY2Fubm90IGJlIGxvYWRlZFxuICovXG5mdW5jdGlvbiBpbml0T3BlbkNWICgpIHtcbiAgaWYgKCFjdikge1xuICAgIHRyeSB7XG4gICAgICBjdiA9IHJlcXVpcmUoJ29wZW5jdjRub2RlanMnKTtcbiAgICB9IGNhdGNoIChpZ24pIHt9XG4gIH1cbiAgaWYgKCFjdikge1xuICAgIHRocm93IG5ldyBFcnJvcignb3BlbmN2NG5vZGVqcyBtb2R1bGUgaXMgcmVxdWlyZWQgdG8gdXNlIE9wZW5DViBmZWF0dXJlcy4gJyArXG4gICAgICAgICAgICAgICAgICAgICdQbGVhc2UgaW5zdGFsbCBpdCBmaXJzdCAobnBtIGkgLWcgb3BlbmN2NG5vZGVqcykgYW5kIHJlc3RhcnQgQXBwaXVtLiAnICtcbiAgICAgICAgICAgICAgICAgICAgJ1JlYWQgaHR0cHM6Ly9naXRodWIuY29tL2p1c3RhZHVkZXdob2hhY2tzL29wZW5jdjRub2RlanMjaG93LXRvLWluc3RhbGwgZm9yIG1vcmUgZGV0YWlscyBvbiB0aGlzIHRvcGljLicpO1xuICB9XG59XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gTWF0Y2hDb21wdXRhdGlvblJlc3VsdFxuICogQHByb3BlcnR5IHtjdi5EZXNjcmlwdG9yTWF0Y2h9IGRlc2NpcHRvciAtIE9wZW5DViBtYXRjaCBkZXNjcmlwdG9yXG4gKiBAcHJvcGVydHkge0FycmF5PGN2LktleVBvaW50Pn0ga2V5UG9pbnRzIC0gVGhlIGFycmF5IG9mIGtleSBwb2ludHNcbiAqL1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgYW4gT3BlbkNWIG1hdGNoIGRlc2NyaXB0b3Igb2YgYW4gaW1hZ2UsIHdoaWNoIGNhbiBiZSB1c2VkXG4gKiBmb3IgYnJ1dGUtZm9yY2UgbWF0Y2hpbmcuXG4gKiBSZWFkIGh0dHBzOi8vZG9jcy5vcGVuY3Yub3JnLzMuMC1iZXRhL2RvYy9weV90dXRvcmlhbHMvcHlfZmVhdHVyZTJkL3B5X21hdGNoZXIvcHlfbWF0Y2hlci5odG1sXG4gKiBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEBwYXJhbSB7Y3YuTWF0fSBpbWcgSW1hZ2UgZGF0YVxuICogQHBhcmFtIHtjdi5GZWF0dXJlRGV0ZWN0b3J9IGRldGVjdG9yIE9wZW5DViBmZWF0dXJlIGRldGVjdG9yIGluc3RhbmNlXG4gKlxuICogQHJldHVybnMge01hdGNoQ29tcHV0YXRpb25SZXN1bHR9XG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGRldGVjdEFuZENvbXB1dGUgKGltZywgZGV0ZWN0b3IpIHtcbiAgY29uc3Qga2V5UG9pbnRzID0gYXdhaXQgZGV0ZWN0b3IuZGV0ZWN0QXN5bmMoaW1nKTtcbiAgY29uc3QgZGVzY3JpcHRvciA9IGF3YWl0IGRldGVjdG9yLmNvbXB1dGVBc3luYyhpbWcsIGtleVBvaW50cyk7XG4gIHJldHVybiB7XG4gICAga2V5UG9pbnRzLFxuICAgIGRlc2NyaXB0b3JcbiAgfTtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVkIHRoZSBib3VuZGluZyByZWN0IGNvb3JkaW5hdGVzIGZvciB0aGUgYXJyYXkgb2YgbWF0Y2hpbmcgcG9pbnRzXG4gKlxuICogQHBhcmFtIHtBcnJheTxQb2ludD59IG1hdGNoZWRQb2ludHMgQXJyYXkgb2YgbWF0Y2hpbmcgcG9pbnRzXG4gKiBAcmV0dXJucyB7UmVjdH0gVGhlIG1hdGNoaW5nIGJvdW5kaW5nIHJlY3Qgb3IgYSB6ZXJvIHJlY3QgaWYgbm8gbWF0Y2hcbiAqIGNhbiBiZSBmb3VuZC5cbiAqL1xuZnVuY3Rpb24gY2FsY3VsYXRlTWF0Y2hlZFJlY3QgKG1hdGNoZWRQb2ludHMpIHtcbiAgaWYgKG1hdGNoZWRQb2ludHMubGVuZ3RoIDwgMikge1xuICAgIHJldHVybiB7XG4gICAgICB4OiAwLFxuICAgICAgeTogMCxcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgaGVpZ2h0OiAwXG4gICAgfTtcbiAgfVxuXG4gIGNvbnN0IHBvaW50c1NvcnRlZEJ5RGlzdGFuY2UgPSBtYXRjaGVkUG9pbnRzXG4gICAgLm1hcChwb2ludCA9PiBbTWF0aC5zcXJ0KHBvaW50LnggKiBwb2ludC54ICsgcG9pbnQueSAqIHBvaW50LnkpLCBwb2ludF0pXG4gICAgLnNvcnQoKHBhaXIxLCBwYWlyMikgPT4gcGFpcjFbMF0gPj0gcGFpcjJbMF0pXG4gICAgLm1hcChwYWlyID0+IHBhaXJbMV0pO1xuICBjb25zdCBmaXJzdFBvaW50ID0gXy5oZWFkKHBvaW50c1NvcnRlZEJ5RGlzdGFuY2UpO1xuICBjb25zdCBsYXN0UG9pbnQgPSBfLmxhc3QocG9pbnRzU29ydGVkQnlEaXN0YW5jZSk7XG4gIGNvbnN0IHRvcExlZnRQb2ludCA9IHtcbiAgICB4OiBmaXJzdFBvaW50LnggPD0gbGFzdFBvaW50LnggPyBmaXJzdFBvaW50LnggOiBsYXN0UG9pbnQueCxcbiAgICB5OiBmaXJzdFBvaW50LnkgPD0gbGFzdFBvaW50LnkgPyBmaXJzdFBvaW50LnkgOiBsYXN0UG9pbnQueSxcbiAgfTtcbiAgY29uc3QgYm90dG9tUmlnaHRQb2ludCA9IHtcbiAgICB4OiBmaXJzdFBvaW50LnggPj0gbGFzdFBvaW50LnggPyBmaXJzdFBvaW50LnggOiBsYXN0UG9pbnQueCxcbiAgICB5OiBmaXJzdFBvaW50LnkgPj0gbGFzdFBvaW50LnkgPyBmaXJzdFBvaW50LnkgOiBsYXN0UG9pbnQueSxcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICB4OiB0b3BMZWZ0UG9pbnQueCxcbiAgICB5OiB0b3BMZWZ0UG9pbnQueSxcbiAgICB3aWR0aDogYm90dG9tUmlnaHRQb2ludC54IC0gdG9wTGVmdFBvaW50LngsXG4gICAgaGVpZ2h0OiBib3R0b21SaWdodFBvaW50LnkgLSB0b3BMZWZ0UG9pbnQueVxuICB9O1xufVxuXG4vKipcbiAqIERyYXdzIGEgcmVjdGFubmdsZSBvbiB0aGUgZ2l2ZW4gaW1hZ2UgbWF0cml4XG4gKlxuICogQHBhcmFtIHtjdi5NYXR9IG1hdCBUaGUgc291cmNlIGltYWdlXG4gKiBAcGFyYW0ge1JlY3R9IHJlZ2lvbiBUaGUgcmVnaW9uIHRvIGhpZ2hsaWdodFxuICpcbiAqIEByZXR1cm5zIHtjdi5NYXR9IFRoZSBzYW1lIGltYWdlIHdpdGggdGhlIHJlY3RhbmdlIG9uIGl0XG4gKi9cbmZ1bmN0aW9uIGhpZ2hsaWdodFJlZ2lvbiAobWF0LCByZWdpb24pIHtcbiAgaWYgKHJlZ2lvbi53aWR0aCA8PSAwIHx8IHJlZ2lvbi5oZWlnaHQgPD0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGhpZ2hsaWdodCBpbiByZWRcbiAgY29uc3QgY29sb3IgPSBuZXcgY3YuVmVjKDAsIDAsIDI1NSk7XG4gIGNvbnN0IHRoaWNrbmVzcyA9IDI7XG4gIG1hdC5kcmF3UmVjdGFuZ2xlKG5ldyBjdi5SZWN0KHJlZ2lvbi54LCByZWdpb24ueSwgcmVnaW9uLndpZHRoLCByZWdpb24uaGVpZ2h0KSwgY29sb3IsIHRoaWNrbmVzcywgY3YuTElORV84KTtcbiAgcmV0dXJuIG1hdDtcbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBNYXRjaGluZ09wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gZGV0ZWN0b3JOYW1lIFsnT1JCJ10gT25lIG9mIHBvc3NpYmxlIE9wZW5DViBmZWF0dXJlIGRldGVjdG9yIG5hbWVzXG4gKiBmcm9tIGBBVkFJTEFCTEVfREVURUNUT1JTYCBhcnJheS5cbiAqIFNvbWUgb2YgdGhlc2UgbWV0aG9kcyAoRkFTVCwgQUdBU1QsIEdGVFQsIEZBU1QsIFNJRlQgYW5kIE1TRVIpIGFyZSBub3QgYXZhaWxhYmxlXG4gKiBpbiB0aGUgZGVmYXVsdCBPcGVuQ1YgaW5zdGFsbGF0aW9uIGFuZCBoYXZlIHRvIGJlIGVuYWJsZWQgbWFudWFsbHkgYmVmb3JlXG4gKiBsaWJyYXJ5IGNvbXBpbGF0aW9uLlxuICogQHByb3BlcnR5IHs/c3RyaW5nfSBtYXRjaEZ1bmMgWydCcnV0ZUZvcmNlJ10gVGhlIG5hbWUgb2YgdGhlIG1hdGNoaW5nIGZ1bmN0aW9uLlxuICogU2hvdWxkIGJlIG9uZSBvZiBgQVZBSUxBQkxFX01BVENISU5HX0ZVTkNUSU9OU2AgYXJyYXkuXG4gKiBAcHJvcGVydHkgez9udW1iZXJ8RnVuY3Rpb259IGdvb2RNYXRjaGVzRmFjdG9yIFRoZSBtYXhpbXVtIGNvdW50IG9mIFwiZ29vZFwiIG1hdGNoZXNcbiAqIChlLiBnLiB3aXRoIG1pbmltYWwgZGlzdGFuY2VzKSBvciBhIGZ1bmN0aW9uLCB3aGljaCBhY2NlcHRzIDMgYXJndW1lbnRzOiB0aGUgY3VycmVudCBkaXN0YW5jZSxcbiAqIG1pbmltYWwgZGlzdGFuY2UsIG1heGltdW0gZGlzdGFuY2UgYW5kIHJldHVybnMgdHJ1ZSBvciBmYWxzZSB0byBpbmNsdWRlIG9yIGV4Y2x1ZGUgdGhlIG1hdGNoLlxuICogQHByb3BlcnR5IHs/Ym9vbGVhbn0gdmlzdWFsaXplIFtmYWxzZV0gV2hldGhlciB0byByZXR1cm4gdGhlIHJlc3VsdGluZyB2aXNhbGl6YXRpb25cbiAqIGFzIGFuIGltYWdlICh1c2VmdWwgZm9yIGRlYnVnZ2luZyBwdXJwb3NlcylcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IE1hdGNoaW5nUmVzdWx0XG4gKiBAcHJvcGVydHkge251bWJlcn0gY291bnQgVGhlIGNvdW50IG9mIG1hdGNoZWQgZWRnZXMgb24gYm90aCBpbWFnZXMuXG4gKiBUaGUgbW9yZSBtYXRjaGluZyBlZGdlcyB0aGVyZSBhcmUgbm8gYm90aCBpbWFnZXMgdGhlIG1vcmUgc2ltaWxhciB0aGV5IGFyZS5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB0b3RhbENvdW50IFRoZSB0b3RhbCBjb3VudCBvZiBtYXRjaGVkIGVkZ2VzIG9uIGJvdGggaW1hZ2VzLlxuICogSXQgaXMgZXF1YWwgdG8gYGNvdW50YCBpZiBgZ29vZE1hdGNoZXNGYWN0b3JgIGRvZXMgbm90IGxpbWl0IHRoZSBtYXRjaGVzLFxuICogb3RoZXJ3aXNlIGl0IGNvbnRhaW5zIHRoZSB0b3RhbCBjb3VudCBvZiBtYXRjaGVzIGJlZm9yZSBgZ29vZE1hdGNoZXNGYWN0b3JgIGlzXG4gKiBhcHBsaWVkLlxuICogQHByb3BlcnR5IHs/QnVmZmVyfSB2aXN1YWxpemF0aW9uIFRoZSB2aXN1YWxpemF0aW9uIG9mIHRoZSBtYXRjaGluZyByZXN1bHRcbiAqIHJlcHJlc2VudGVkIGFzIFBORyBpbWFnZSBidWZmZXIuIFRoaXMgdmlzdWFsaXphdGlvbiBsb29rcyBsaWtlXG4gKiBodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8zMTEyNTUyMS8yOTcwMjczMS1jNzllMzE0Mi04OTcyLTExZTctOTQ3ZS1kYjEwOWQ0MTU0NjkuanBnXG4gKiBAcHJvcGVydHkge0FycmF5PFBvaW50Pn0gcG9pbnRzMSBUaGUgYXJyYXkgb2YgbWF0Y2hpbmcgcG9pbnRzIG9uIHRoZSBmaXJzdCBpbWFnZVxuICogQHByb3BlcnR5IHtSZWN0fSByZWN0MSBUaGUgYm91bmRpbmcgcmVjdCBmb3IgdGhlIGBtYXRjaGVkUG9pbnRzMWAgc2V0IG9yIGEgemVybyByZWN0XG4gKiBpZiBub3QgZW5vdWdoIG1hdGNoaW5nIHBvaW50cyBhcmUgZm91bmRcbiAqIEBwcm9wZXJ0eSB7QXJyYXk8UG9pbnQ+fSBwb2ludHMyIFRoZSBhcnJheSBvZiBtYXRjaGluZyBwb2ludHMgb24gdGhlIHNlY29uZCBpbWFnZVxuICogQHByb3BlcnR5IHtSZWN0fSByZWN0MiBUaGUgYm91bmRpbmcgcmVjdCBmb3IgdGhlIGBtYXRjaGVkUG9pbnRzMmAgc2V0IG9yIGEgemVybyByZWN0XG4gKiBpZiBub3QgZW5vdWdoIG1hdGNoaW5nIHBvaW50cyBhcmUgZm91bmRcbiAqL1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGNvdW50IG9mIGNvbW1vbiBlZGdlcyBiZXR3ZWVuIHR3byBpbWFnZXMuXG4gKiBUaGUgaW1hZ2VzIG1pZ2h0IGJlIHJvdGF0ZWQgb3IgcmVzaXplZCByZWxhdGl2ZWx5IHRvIGVhY2ggb3RoZXIuXG4gKlxuICogQHBhcmFtIHtCdWZmZXJ9IGltZzFEYXRhIFRoZSBkYXRhIG9mIHRoZSBmaXJzdCBpbWFnZSBwYWNrZWQgaW50byBhIE5vZGVKUyBidWZmZXJcbiAqIEBwYXJhbSB7QnVmZmVyfSBpbWcyRGF0YSBUaGUgZGF0YSBvZiB0aGUgc2Vjb25kIGltYWdlIHBhY2tlZCBpbnRvIGEgTm9kZUpTIGJ1ZmZlclxuICogQHBhcmFtIHs/TWF0Y2hpbmdPcHRpb25zfSBvcHRpb25zIFt7fV0gU2V0IG9mIG1hdGNoaW5nIG9wdGlvbnNcbiAqXG4gKiBAcmV0dXJucyB7TWF0Y2hpbmdSZXN1bHR9IE1hY2hpbmcgcmVzdWx0XG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgYGRldGVjdG9yTmFtZWAgdmFsdWUgaXMgdW5rbm93bi5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0SW1hZ2VzTWF0Y2hlcyAoaW1nMURhdGEsIGltZzJEYXRhLCBvcHRpb25zID0ge30pIHtcbiAgaW5pdE9wZW5DVigpO1xuXG4gIGNvbnN0IHtkZXRlY3Rvck5hbWUgPSAnT1JCJywgdmlzdWFsaXplID0gZmFsc2UsXG4gICAgICAgICBnb29kTWF0Y2hlc0ZhY3RvciwgbWF0Y2hGdW5jID0gJ0JydXRlRm9yY2UnfSA9IG9wdGlvbnM7XG4gIGlmICghXy5pbmNsdWRlcyhBVkFJTEFCTEVfREVURUNUT1JTLCBkZXRlY3Rvck5hbWUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGAnJHtkZXRlY3Rvck5hbWV9JyBkZXRlY3RvciBpcyB1bmtub3duLiBgICtcbiAgICAgICAgICAgICAgICAgICAgYE9ubHkgJHtKU09OLnN0cmluZ2lmeShBVkFJTEFCTEVfREVURUNUT1JTKX0gZGV0ZWN0b3JzIGFyZSBzdXBwb3J0ZWQuYCk7XG4gIH1cbiAgaWYgKCFfLmluY2x1ZGVzKEFWQUlMQUJMRV9NQVRDSElOR19GVU5DVElPTlMsIG1hdGNoRnVuYykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYCcke21hdGNoRnVuY30nIG1hdGNoaW5nIGZ1bmN0aW9uIGlzIHVua25vd24uIGAgK1xuICAgICAgICAgICAgICAgICAgICBgT25seSAke0pTT04uc3RyaW5naWZ5KEFWQUlMQUJMRV9NQVRDSElOR19GVU5DVElPTlMpfSBtYXRjaGluZyBmdW5jdGlvbnMgYXJlIHN1cHBvcnRlZC5gKTtcbiAgfVxuXG4gIGNvbnN0IGRldGVjdG9yID0gbmV3IGN2W2Ake2RldGVjdG9yTmFtZX1EZXRlY3RvcmBdKCk7XG4gIGNvbnN0IFtpbWcxLCBpbWcyXSA9IGF3YWl0IEIuYWxsKFtcbiAgICBjdi5pbWRlY29kZUFzeW5jKGltZzFEYXRhKSxcbiAgICBjdi5pbWRlY29kZUFzeW5jKGltZzJEYXRhKVxuICBdKTtcbiAgY29uc3QgW3Jlc3VsdDEsIHJlc3VsdDJdID0gYXdhaXQgQi5hbGwoW1xuICAgIGRldGVjdEFuZENvbXB1dGUoaW1nMSwgZGV0ZWN0b3IpLFxuICAgIGRldGVjdEFuZENvbXB1dGUoaW1nMiwgZGV0ZWN0b3IpXG4gIF0pO1xuICBsZXQgbWF0Y2hlcyA9IFtdO1xuICB0cnkge1xuICAgIG1hdGNoZXMgPSBhd2FpdCBjdltgbWF0Y2gke21hdGNoRnVuY31Bc3luY2BdKHJlc3VsdDEuZGVzY3JpcHRvciwgcmVzdWx0Mi5kZXNjcmlwdG9yKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGZpbmQgYW55IG1hdGNoZXMgYmV0d2VlbiB0aGUgZ2l2ZW4gaW1hZ2VzLiBUcnkgYW5vdGhlciBkZXRlY3Rpb24gYWxnb3JpdGhtLiBgICtcbiAgICAgICAgICAgICAgICAgICAgYCBPcmlnaW5hbCBlcnJvcjogJHtlfWApO1xuICB9XG4gIGNvbnN0IHRvdGFsQ291bnQgPSBtYXRjaGVzLmxlbmd0aDtcbiAgaWYgKGhhc1ZhbHVlKGdvb2RNYXRjaGVzRmFjdG9yKSkge1xuICAgIGlmIChfLmlzRnVuY3Rpb24oZ29vZE1hdGNoZXNGYWN0b3IpKSB7XG4gICAgICBjb25zdCBkaXN0YW5jZXMgPSBtYXRjaGVzLm1hcChtYXRjaCA9PiBtYXRjaC5kaXN0YW5jZSk7XG4gICAgICBjb25zdCBtaW5EaXN0YW5jZSA9IF8ubWluKGRpc3RhbmNlcyk7XG4gICAgICBjb25zdCBtYXhEaXN0YW5jZSA9IF8ubWF4KGRpc3RhbmNlcyk7XG4gICAgICBtYXRjaGVzID0gbWF0Y2hlc1xuICAgICAgICAuZmlsdGVyKG1hdGNoID0+IGdvb2RNYXRjaGVzRmFjdG9yKG1hdGNoLmRpc3RhbmNlLCBtaW5EaXN0YW5jZSwgbWF4RGlzdGFuY2UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG1hdGNoZXMubGVuZ3RoID4gZ29vZE1hdGNoZXNGYWN0b3IpIHtcbiAgICAgICAgbWF0Y2hlcyA9IG1hdGNoZXNcbiAgICAgICAgICAuc29ydCgobWF0Y2gxLCBtYXRjaDIpID0+IG1hdGNoMS5kaXN0YW5jZSAtIG1hdGNoMi5kaXN0YW5jZSlcbiAgICAgICAgICAuc2xpY2UoMCwgZ29vZE1hdGNoZXNGYWN0b3IpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHBvaW50czEgPSBtYXRjaGVzLm1hcChtYXRjaCA9PiByZXN1bHQxLmtleVBvaW50c1ttYXRjaC5xdWVyeUlkeF0ucG9pbnQpO1xuICBjb25zdCByZWN0MSA9IGNhbGN1bGF0ZU1hdGNoZWRSZWN0KHBvaW50czEpO1xuICBjb25zdCBwb2ludHMyID0gbWF0Y2hlcy5tYXAobWF0Y2ggPT4gcmVzdWx0Mi5rZXlQb2ludHNbbWF0Y2gudHJhaW5JZHhdLnBvaW50KTtcbiAgY29uc3QgcmVjdDIgPSBjYWxjdWxhdGVNYXRjaGVkUmVjdChwb2ludHMyKTtcblxuICBjb25zdCByZXN1bHQgPSB7XG4gICAgcG9pbnRzMSxcbiAgICByZWN0MSxcbiAgICBwb2ludHMyLFxuICAgIHJlY3QyLFxuICAgIHRvdGFsQ291bnQsXG4gICAgY291bnQ6IG1hdGNoZXMubGVuZ3RoLFxuICB9O1xuICBpZiAodmlzdWFsaXplKSB7XG4gICAgY29uc3QgdmlzdWFsaXphdGlvbiA9IGN2LmRyYXdNYXRjaGVzKGltZzEsIGltZzIsIHJlc3VsdDEua2V5UG9pbnRzLCByZXN1bHQyLmtleVBvaW50cywgbWF0Y2hlcyk7XG4gICAgaGlnaGxpZ2h0UmVnaW9uKHZpc3VhbGl6YXRpb24sIHJlY3QxKTtcbiAgICBoaWdobGlnaHRSZWdpb24odmlzdWFsaXphdGlvbiwge1xuICAgICAgeDogaW1nMS5jb2xzICsgcmVjdDIueCxcbiAgICAgIHk6IHJlY3QyLnksXG4gICAgICB3aWR0aDogcmVjdDIud2lkdGgsXG4gICAgICBoZWlnaHQ6IHJlY3QyLmhlaWdodFxuICAgIH0pO1xuICAgIHJlc3VsdC52aXN1YWxpemF0aW9uID0gYXdhaXQgY3YuaW1lbmNvZGVBc3luYygnLnBuZycsIHZpc3VhbGl6YXRpb24pO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gU2ltaWxhcml0eU9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7P2Jvb2xlYW59IHZpc3VhbGl6ZSBbZmFsc2VdIFdoZXRoZXIgdG8gcmV0dXJuIHRoZSByZXN1bHRpbmcgdmlzYWxpemF0aW9uXG4gKiBhcyBhbiBpbWFnZSAodXNlZnVsIGZvciBkZWJ1Z2dpbmcgcHVycG9zZXMpXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBTaW1pbGFyaXR5UmVzdWx0XG4gKiBAcHJvcGVydHkge251bWJlcn0gc2NvcmUgVGhlIHNpbWlsYXJpdHkgc2NvcmUgYXMgYSBmbG9hdCBudW1iZXIgaW4gcmFuZ2UgWzAuMCwgMS4wXS5cbiAqIDEuMCBpcyB0aGUgaGlnaGVzdCBzY29yZSAobWVhbnMgYm90aCBpbWFnZXMgYXJlIHRvdGFsbHkgZXF1YWwpLlxuICogQHByb3BlcnR5IHs/QnVmZmVyfSB2aXN1YWxpemF0aW9uIFRoZSB2aXN1YWxpemF0aW9uIG9mIHRoZSBtYXRjaGluZyByZXN1bHRcbiAqIHJlcHJlc2VudGVkIGFzIFBORyBpbWFnZSBidWZmZXIuIFRoaXMgaW1hZ2UgaW5jbHVkZXMgYm90aCBpbnB1dCBwaWN0dXJlcyB3aGVyZVxuICogZGlmZmVyZW5jZSByZWdpb25zIGFyZSBoaWdobGlnaHRlZCB3aXRoIHJlY3RhbmdsZXMuXG4gKi9cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBzaW1pbGFyaXR5IHNjb3JlIGJldHdlZW4gdHdvIGltYWdlcy5cbiAqIEl0IGlzIGV4cGVjdGVkLCB0aGF0IGJvdGggaW1hZ2VzIGhhdmUgdGhlIHNhbWUgcmVzb2x1dGlvbi5cbiAqXG4gKiBAcGFyYW0ge0J1ZmZlcn0gaW1nMURhdGEgVGhlIGRhdGEgb2YgdGhlIGZpcnN0IGltYWdlIHBhY2tlZCBpbnRvIGEgTm9kZUpTIGJ1ZmZlclxuICogQHBhcmFtIHtCdWZmZXJ9IGltZzJEYXRhIFRoZSBkYXRhIG9mIHRoZSBzZWNvbmQgaW1hZ2UgcGFja2VkIGludG8gYSBOb2RlSlMgYnVmZmVyXG4gKiBAcGFyYW0gez9TaW1pbGFyaXR5T3B0aW9uc30gb3B0aW9ucyBbe31dIFNldCBvZiBzaW1pbGFyaXR5IGNhbGN1bGF0aW9uIG9wdGlvbnNcbiAqXG4gKiBAcmV0dXJucyB7U2ltaWxhcml0eVJlc3VsdH0gVGhlIGNhbGN1bGF0aW9uIHJlc3VsdFxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBnaXZlbiBpbWFnZXMgaGF2ZSBkaWZmZXJlbnQgcmVzb2x1dGlvbi5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0SW1hZ2VzU2ltaWxhcml0eSAoaW1nMURhdGEsIGltZzJEYXRhLCBvcHRpb25zID0ge30pIHtcbiAgaW5pdE9wZW5DVigpO1xuXG4gIGNvbnN0IHt2aXN1YWxpemUgPSBmYWxzZX0gPSBvcHRpb25zO1xuICBsZXQgW3RlbXBsYXRlLCByZWZlcmVuY2VdID0gYXdhaXQgQi5hbGwoW1xuICAgIGN2LmltZGVjb2RlQXN5bmMoaW1nMURhdGEpLFxuICAgIGN2LmltZGVjb2RlQXN5bmMoaW1nMkRhdGEpXG4gIF0pO1xuICBpZiAodGVtcGxhdGUucm93cyAhPT0gcmVmZXJlbmNlLnJvd3MgfHwgdGVtcGxhdGUuY29scyAhPT0gcmVmZXJlbmNlLmNvbHMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0JvdGggaW1hZ2VzIGFyZSBleHBlY3RlZCB0byBoYXZlIHRoZSBzYW1lIHNpemUgaW4gb3JkZXIgdG8gJyArXG4gICAgICAgICAgICAgICAgICAgICdjYWxjdWxhdGUgdGhlIHNpbWlsYXJpdHkgc2NvcmUuJyk7XG4gIH1cbiAgW3RlbXBsYXRlLCByZWZlcmVuY2VdID0gYXdhaXQgQi5hbGwoW1xuICAgIHRlbXBsYXRlLmNvbnZlcnRUb0FzeW5jKGN2LkNWXzhVQzMpLFxuICAgIHJlZmVyZW5jZS5jb252ZXJ0VG9Bc3luYyhjdi5DVl84VUMzKVxuICBdKTtcblxuICBjb25zdCBtYXRjaGVkID0gYXdhaXQgcmVmZXJlbmNlLm1hdGNoVGVtcGxhdGVBc3luYyh0ZW1wbGF0ZSwgY3YuVE1fQ0NPRUZGX05PUk1FRCk7XG4gIGNvbnN0IG1pbk1heCA9IGF3YWl0IG1hdGNoZWQubWluTWF4TG9jQXN5bmMoKTtcbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIHNjb3JlOiBtaW5NYXgubWF4VmFsXG4gIH07XG4gIGlmICh2aXN1YWxpemUpIHtcbiAgICBjb25zdCByZXN1bHRNYXQgPSBuZXcgY3YuTWF0KHRlbXBsYXRlLnJvd3MsIHRlbXBsYXRlLmNvbHMgKiAyLCBjdi5DVl84VUMzKTtcbiAgICBhd2FpdCBCLmFsbChbXG4gICAgICByZWZlcmVuY2UuY29weVRvQXN5bmMoXG4gICAgICAgIHJlc3VsdE1hdC5nZXRSZWdpb24obmV3IGN2LlJlY3QoMCwgMCwgcmVmZXJlbmNlLmNvbHMsIHJlZmVyZW5jZS5yb3dzKSkpLFxuICAgICAgdGVtcGxhdGUuY29weVRvQXN5bmMoXG4gICAgICAgIHJlc3VsdE1hdC5nZXRSZWdpb24obmV3IGN2LlJlY3QocmVmZXJlbmNlLmNvbHMsIDAsIHRlbXBsYXRlLmNvbHMsIHRlbXBsYXRlLnJvd3MpKSlcbiAgICBdKTtcbiAgICBsZXQgbWFzayA9IHJlZmVyZW5jZS5hYnNkaWZmKHRlbXBsYXRlKTtcbiAgICBtYXNrID0gYXdhaXQgbWFzay5jdnRDb2xvckFzeW5jKGN2LkNPTE9SX0JHUjJHUkFZKTtcbiAgICBsZXQgY29udG91cnMgPSBbXTtcbiAgICB0cnkge1xuICAgICAgbWFzayA9IGF3YWl0IG1hc2sudGhyZXNob2xkQXN5bmMoMTI4LCAyNTUsIGN2LlRIUkVTSF9CSU5BUlkgfCBjdi5USFJFU0hfT1RTVSk7XG4gICAgICBjb250b3VycyA9IGF3YWl0IG1hc2suZmluZENvbnRvdXJzQXN5bmMoY3YuUkVUUl9FWFRFUk5BTCwgY3YuQ0hBSU5fQVBQUk9YX1NJTVBMRSk7XG4gICAgfSBjYXRjaCAoaWduKSB7XG4gICAgICAvLyBObyBjb250b3VycyBjYW4gYmUgZm91bmQsIHdoaWNoIG1lYW5zLCBtb3N0IGxpa2VseSwgdGhhdCBpbWFnZXMgYXJlIGVxdWFsXG4gICAgfVxuICAgIGZvciAoY29uc3QgY29udG91ciBvZiBjb250b3Vycykge1xuICAgICAgY29uc3QgYm91bmRpbmdSZWN0ID0gY29udG91ci5ib3VuZGluZ1JlY3QoKTtcbiAgICAgIGhpZ2hsaWdodFJlZ2lvbihyZXN1bHRNYXQsIGJvdW5kaW5nUmVjdCk7XG4gICAgICBoaWdobGlnaHRSZWdpb24ocmVzdWx0TWF0LCB7XG4gICAgICAgIHg6IHJlZmVyZW5jZS5jb2xzICsgYm91bmRpbmdSZWN0LngsXG4gICAgICAgIHk6IGJvdW5kaW5nUmVjdC55LFxuICAgICAgICB3aWR0aDogYm91bmRpbmdSZWN0LndpZHRoLFxuICAgICAgICBoZWlnaHQ6IGJvdW5kaW5nUmVjdC5oZWlnaHRcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXN1bHQudmlzdWFsaXphdGlvbiA9IGF3YWl0IGN2LmltZW5jb2RlQXN5bmMoJy5wbmcnLCByZXN1bHRNYXQpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gT2NjdXJyZW5jZU9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7P2Jvb2xlYW59IHZpc3VhbGl6ZSBbZmFsc2VdIFdoZXRoZXIgdG8gcmV0dXJuIHRoZSByZXN1bHRpbmcgdmlzYWxpemF0aW9uXG4gKiBhcyBhbiBpbWFnZSAodXNlZnVsIGZvciBkZWJ1Z2dpbmcgcHVycG9zZXMpXG4gKiBAcHJvcGVydHkgez9mbG9hdH0gdGhyZXNob2xkIFswLjVdIEF0IHdoYXQgbm9ybWFsaXplZCB0aHJlc2hvbGQgdG8gcmVqZWN0XG4gKiBhIG1hdGNoXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBPY2N1cnJlbmNlUmVzdWx0XG4gKiBAcHJvcGVydHkge1JlY3R9IHJlY3QgVGhlIHJlZ2lvbiBvZiB0aGUgcGFydGlhbCBpbWFnZSBvY2N1cmVuY2VcbiAqIG9uIHRoZSBmdWxsIGltYWdlXG4gKiBAcHJvcGVydHkgez9CdWZmZXJ9IHZpc3VhbGl6YXRpb24gVGhlIHZpc3VhbGl6YXRpb24gb2YgdGhlIG1hdGNoaW5nIHJlc3VsdFxuICogcmVwcmVzZW50ZWQgYXMgUE5HIGltYWdlIGJ1ZmZlci4gT24gdGhpcyBpbWFnZSB0aGUgbWF0Y2hpbmdcbiAqIHJlZ2lvbiBpcyBoaWdobGlnaHRlZCB3aXRoIGEgcmVjdGFuZ2xlLlxuICovXG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgb2NjdXJlbmNlIHBvc2l0aW9uIG9mIGEgcGFydGlhbCBpbWFnZSBpbiB0aGUgZnVsbFxuICogaW1hZ2UuXG4gKlxuICogQHBhcmFtIHtCdWZmZXJ9IGZ1bGxJbWdEYXRhIFRoZSBkYXRhIG9mIHRoZSBmdWxsIGltYWdlIHBhY2tlZCBpbnRvIGEgTm9kZUpTIGJ1ZmZlclxuICogQHBhcmFtIHtCdWZmZXJ9IHBhcnRpYWxJbWdEYXRhIFRoZSBkYXRhIG9mIHRoZSBwYXJ0aWFsIGltYWdlIHBhY2tlZCBpbnRvIGEgTm9kZUpTIGJ1ZmZlclxuICogQHBhcmFtIHs/T2NjdXJyZW5jZU9wdGlvbnN9IG9wdGlvbnMgW3t9XSBTZXQgb2Ygb2NjdXJyZW5jZSBjYWxjdWxhdGlvbiBvcHRpb25zXG4gKlxuICogQHJldHVybnMge09jY3VycmVuY2VSZXN1bHR9XG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgbm8gb2NjdXJlbmNlcyBvZiB0aGUgcGFydGlhbCBpbWFnZSBjYW4gYmUgZm91bmQgaW4gdGhlIGZ1bGwgaW1hZ2VcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0SW1hZ2VPY2N1cnJlbmNlIChmdWxsSW1nRGF0YSwgcGFydGlhbEltZ0RhdGEsIG9wdGlvbnMgPSB7fSkge1xuICBpbml0T3BlbkNWKCk7XG5cbiAgY29uc3Qge3Zpc3VhbGl6ZSA9IGZhbHNlLCB0aHJlc2hvbGQgPSBERUZBVUxUX01BVENIX1RIUkVTSE9MRH0gPSBvcHRpb25zO1xuICBjb25zdCBbZnVsbEltZywgcGFydGlhbEltZ10gPSBhd2FpdCBCLmFsbChbXG4gICAgY3YuaW1kZWNvZGVBc3luYyhmdWxsSW1nRGF0YSksXG4gICAgY3YuaW1kZWNvZGVBc3luYyhwYXJ0aWFsSW1nRGF0YSlcbiAgXSk7XG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xuICB0cnkge1xuICAgIGNvbnN0IG1hdGNoZWQgPSBhd2FpdCBmdWxsSW1nLm1hdGNoVGVtcGxhdGVBc3luYyhwYXJ0aWFsSW1nLCBjdi5UTV9DQ09FRkZfTk9STUVEKTtcbiAgICBjb25zdCBtaW5NYXggPSBhd2FpdCBtYXRjaGVkLm1pbk1heExvY0FzeW5jKCk7XG4gICAgaWYgKG1pbk1heC5tYXhWYWwgPCB0aHJlc2hvbGQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGZpbmQgYW55IG9jY3VycmVuY2VzIG9mIHRoZSBwYXJ0aWFsIGltYWdlIGluIHRoZSBmdWxsIGAgK1xuICAgICAgICAgICAgICAgICAgICAgIGBpbWFnZSBhYm92ZSB0aGUgdGhyZXNob2xkIG9mICR7dGhyZXNob2xkfS4gSGlnaGVzdCBtYXRjaCB2YWx1ZSBgICtcbiAgICAgICAgICAgICAgICAgICAgICBgZm91bmQgd2FzICR7bWluTWF4Lm1heFZhbH1gKTtcbiAgICB9XG4gICAgcmVzdWx0LnJlY3QgPSB7XG4gICAgICB4OiBtaW5NYXgubWF4TG9jLngsXG4gICAgICB5OiBtaW5NYXgubWF4TG9jLnksXG4gICAgICB3aWR0aDogcGFydGlhbEltZy5jb2xzLFxuICAgICAgaGVpZ2h0OiBwYXJ0aWFsSW1nLnJvd3NcbiAgICB9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgZmluZCBhbnkgb2NjdXJlbmNlcyBvZiB0aGUgcGFydGlhbCBpbWFnZSBpbiB0aGUgZnVsbCBpbWFnZS4gYCArXG4gICAgICAgICAgICAgICAgICAgIGBPcmlnaW5hbCBlcnJvcjogJHtlfWApO1xuICB9XG4gIGlmICh2aXN1YWxpemUpIHtcbiAgICBoaWdobGlnaHRSZWdpb24oZnVsbEltZywgcmVzdWx0LnJlY3QpO1xuICAgIHJlc3VsdC52aXN1YWxpemF0aW9uID0gYXdhaXQgY3YuaW1lbmNvZGVBc3luYygnLnBuZycsIGZ1bGxJbWcpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ3JvcCB0aGUgaW1hZ2UgYnkgZ2l2ZW4gcmVjdGFuZ2xlICh1c2UgYmFzZTY0IHN0cmluZyBhcyBpbnB1dCBhbmQgb3V0cHV0KVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlNjRJbWFnZSBUaGUgc3RyaW5nIHdpdGggYmFzZTY0IGVuY29kZWQgaW1hZ2VcbiAqIEBwYXJhbSB7UmVnaW9ufSByZWN0IFRoZSBzZWxlY3RlZCByZWdpb24gb2YgaW1hZ2VcbiAqIEByZXR1cm4ge3N0cmluZ30gYmFzZTY0IGVuY29kZWQgc3RyaW5nIG9mIGNyb3BwZWQgaW1hZ2VcbiAqL1xuYXN5bmMgZnVuY3Rpb24gY3JvcEJhc2U2NEltYWdlIChiYXNlNjRJbWFnZSwgcmVjdCkge1xuICBjb25zdCBpbWFnZSA9IGF3YWl0IGJhc2U2NFRvSW1hZ2UoYmFzZTY0SW1hZ2UpO1xuICBjcm9wSW1hZ2UoaW1hZ2UsIHJlY3QpO1xuICByZXR1cm4gYXdhaXQgaW1hZ2VUb0Jhc2U2NChpbWFnZSk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcG5nanMgaW1hZ2UgZnJvbSBnaXZlbiBiYXNlNjQgaW1hZ2VcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZTY0SW1hZ2UgVGhlIHN0cmluZyB3aXRoIGJhc2U2NCBlbmNvZGVkIGltYWdlXG4gKiBAcmV0dXJuIHtQTkd9IFRoZSBpbWFnZSBvYmplY3RcbiAqL1xuYXN5bmMgZnVuY3Rpb24gYmFzZTY0VG9JbWFnZSAoYmFzZTY0SW1hZ2UpIHtcbiAgY29uc3QgaW1hZ2VCdWZmZXIgPSBCdWZmZXIuZnJvbShiYXNlNjRJbWFnZSwgJ2Jhc2U2NCcpO1xuICByZXR1cm4gYXdhaXQgbmV3IEIoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IGltYWdlID0gbmV3IFBORyh7ZmlsdGVyVHlwZTogU0NBTkxJTkVfRklMVEVSX01FVEhPRH0pO1xuICAgIGltYWdlLnBhcnNlKGltYWdlQnVmZmVyLCAoZXJyLCBpbWFnZSkgPT4geyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHByb21pc2UvcHJlZmVyLWF3YWl0LXRvLWNhbGxiYWNrc1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICB9XG4gICAgICByZXNvbHZlKGltYWdlKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgYmFzZTY0IHN0cmluZyBmb3IgZ2l2ZW4gaW1hZ2Ugb2JqZWN0XG4gKlxuICogQHBhcmFtIHtQTkd9IGltYWdlIFRoZSBpbWFnZSBvYmplY3RcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHN0cmluZyB3aXRoIGJhc2U2NCBlbmNvZGVkIGltYWdlXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGltYWdlVG9CYXNlNjQgKGltYWdlKSB7XG4gIHJldHVybiBhd2FpdCBuZXcgQigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgY2h1bmtzID0gW107XG4gICAgaW1hZ2UucGFjaygpXG4gICAgLm9uKCdkYXRhJywgKGNodW5rKSA9PiBjaHVua3MucHVzaChjaHVuaykpLm9uKCdlbmQnLCAoKSA9PiB7XG4gICAgICByZXNvbHZlKEJ1ZmZlci5jb25jYXQoY2h1bmtzKS50b1N0cmluZygnYmFzZTY0JykpO1xuICAgIH0pXG4gICAgLm9uKCdlcnJvcicsIChlcnIpID0+IHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBwcm9taXNlL3ByZWZlci1hd2FpdC10by1jYWxsYmFja3NcbiAgICAgIHJlamVjdChlcnIpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcm9wIHRoZSBpbWFnZSBieSBnaXZlbiByZWN0YW5nbGVcbiAqXG4gKiBAcGFyYW0ge1BOR30gaW1hZ2UgVGhlIGltYWdlIHRvIG11dGF0ZSBieSBjcm9wcGluZ1xuICogQHBhcmFtIHtSZWdpb259IHJlY3QgVGhlIHNlbGVjdGVkIHJlZ2lvbiBvZiBpbWFnZVxuICovXG5mdW5jdGlvbiBjcm9wSW1hZ2UgKGltYWdlLCByZWN0KSB7XG4gIGNvbnN0IGltYWdlUmVjdCA9IHt3aWR0aDogaW1hZ2Uud2lkdGgsIGhlaWdodDogaW1hZ2UuaGVpZ2h0fTtcbiAgY29uc3QgaW50ZXJSZWN0ID0gZ2V0UmVjdEludGVyc2VjdGlvbihyZWN0LCBpbWFnZVJlY3QpO1xuICBpZiAoaW50ZXJSZWN0LndpZHRoIDwgcmVjdC53aWR0aCB8fCBpbnRlclJlY3QuaGVpZ2h0IDwgcmVjdC5oZWlnaHQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBjcm9wICR7SlNPTi5zdHJpbmdpZnkocmVjdCl9IGZyb20gJHtKU09OLnN0cmluZ2lmeShpbWFnZVJlY3QpfSBiZWNhdXNlIHRoZSBpbnRlcnNlY3Rpb24gYmV0d2VlbiB0aGVtIHdhcyBub3QgdGhlIHNpemUgb2YgdGhlIHJlY3RgKTtcbiAgfVxuXG4gIGNvbnN0IGZpcnN0VmVydGljYWxQaXhlbCA9IGludGVyUmVjdC50b3A7XG4gIGNvbnN0IGxhc3RWZXJ0aWNhbFBpeGVsID0gaW50ZXJSZWN0LnRvcCArIGludGVyUmVjdC5oZWlnaHQ7XG5cbiAgY29uc3QgZmlyc3RIb3Jpem9udGFsUGl4ZWwgPSBpbnRlclJlY3QubGVmdDtcbiAgY29uc3QgbGFzdEhvcml6b250YWxQaXhlbCA9IGludGVyUmVjdC5sZWZ0ICsgaW50ZXJSZWN0LndpZHRoO1xuXG4gIGNvbnN0IGNyb3BwZWRBcnJheSA9IFtdO1xuICBmb3IgKGxldCB5ID0gZmlyc3RWZXJ0aWNhbFBpeGVsOyB5IDwgbGFzdFZlcnRpY2FsUGl4ZWw7IHkrKykge1xuICAgIGZvciAobGV0IHggPSBmaXJzdEhvcml6b250YWxQaXhlbDsgeCA8IGxhc3RIb3Jpem9udGFsUGl4ZWw7IHgrKykge1xuICAgICAgY29uc3QgZmlyc3RCeXRlSWR4SW5QaXhlbEJsb2NrID0gKGltYWdlUmVjdC53aWR0aCAqIHkgKyB4KSA8PCAyO1xuICAgICAgZm9yIChsZXQgYnl0ZUlkeCA9IDA7IGJ5dGVJZHggPCBCWVRFU19JTl9QSVhFTF9CTE9DSzsgYnl0ZUlkeCsrKSB7XG4gICAgICAgIGNyb3BwZWRBcnJheS5wdXNoKGltYWdlLmRhdGFbZmlyc3RCeXRlSWR4SW5QaXhlbEJsb2NrICsgYnl0ZUlkeF0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGltYWdlLmRhdGEgPSBCdWZmZXIuZnJvbShjcm9wcGVkQXJyYXkpO1xuICBpbWFnZS53aWR0aCA9IGludGVyUmVjdC53aWR0aDtcbiAgaW1hZ2UuaGVpZ2h0ID0gaW50ZXJSZWN0LmhlaWdodDtcbiAgcmV0dXJuIGltYWdlO1xufVxuXG5mdW5jdGlvbiBnZXRSZWN0SW50ZXJzZWN0aW9uIChyZWN0LCBpbWFnZVNpemUpIHtcbiAgY29uc3QgbGVmdCA9IHJlY3QubGVmdCA+PSBpbWFnZVNpemUud2lkdGggPyBpbWFnZVNpemUud2lkdGggOiByZWN0LmxlZnQ7XG4gIGNvbnN0IHRvcCA9IHJlY3QudG9wID49IGltYWdlU2l6ZS5oZWlnaHQgPyBpbWFnZVNpemUuaGVpZ2h0IDogcmVjdC50b3A7XG4gIGNvbnN0IHdpZHRoID0gaW1hZ2VTaXplLndpZHRoID49IChsZWZ0ICsgcmVjdC53aWR0aCkgPyByZWN0LndpZHRoIDogKGltYWdlU2l6ZS53aWR0aCAtIGxlZnQpO1xuICBjb25zdCBoZWlnaHQgPSBpbWFnZVNpemUuaGVpZ2h0ID49ICh0b3AgKyByZWN0LmhlaWdodCkgPyByZWN0LmhlaWdodCA6IChpbWFnZVNpemUuaGVpZ2h0IC0gdG9wKTtcbiAgcmV0dXJuIHtsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHR9O1xufVxuXG5leHBvcnQge1xuICBjcm9wQmFzZTY0SW1hZ2UsIGJhc2U2NFRvSW1hZ2UsIGltYWdlVG9CYXNlNjQsIGNyb3BJbWFnZSwgZ2V0SW1hZ2VzTWF0Y2hlcyxcbiAgZ2V0SW1hZ2VzU2ltaWxhcml0eSwgZ2V0SW1hZ2VPY2N1cnJlbmNlLCBnZXRKaW1wSW1hZ2UsIE1JTUVfSlBFRywgTUlNRV9QTkcsXG4gIE1JTUVfQk1QLFxufTtcbiJdLCJmaWxlIjoibGliL2ltYWdlLXV0aWwuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
