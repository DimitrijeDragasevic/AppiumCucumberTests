"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isWindows = isWindows;
exports.isMac = isMac;
exports.isLinux = isLinux;
exports.isOSWin64 = isOSWin64;
exports.arch = arch;
exports.macOsxVersion = macOsxVersion;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _teen_process = require("teen_process");

var _os = _interopRequireDefault(require("os"));

const VERSION_PATTERN = /^(\d+\.\d+)/m;

function isWindows() {
  return _os.default.type() === 'Windows_NT';
}

function isMac() {
  return _os.default.type() === 'Darwin';
}

function isLinux() {
  return !isWindows() && !isMac();
}

function isOSWin64() {
  return process.arch === 'x64' || process.env.hasOwnProperty('PROCESSOR_ARCHITEW6432');
}

function arch() {
  return _arch.apply(this, arguments);
}

function _arch() {
  _arch = (0, _asyncToGenerator2.default)(function* () {
    if (isLinux() || isMac()) {
      let _ref = yield (0, _teen_process.exec)('uname', ['-m']),
          stdout = _ref.stdout;

      return stdout.trim() === 'i686' ? '32' : '64';
    } else if (isWindows()) {
      let is64 = this.isOSWin64();
      return is64 ? '64' : '32';
    }
  });
  return _arch.apply(this, arguments);
}

function macOsxVersion() {
  return _macOsxVersion.apply(this, arguments);
}

function _macOsxVersion() {
  _macOsxVersion = (0, _asyncToGenerator2.default)(function* () {
    let stdout;

    try {
      stdout = (yield (0, _teen_process.exec)('sw_vers', ['-productVersion'])).stdout.trim();
    } catch (err) {
      throw new Error(`Could not detect Mac OS X Version: ${err}`);
    }

    const versionMatch = VERSION_PATTERN.exec(stdout);

    if (!versionMatch) {
      throw new Error(`Could not detect Mac OS X Version from sw_vers output: '${stdout}'`);
    }

    return versionMatch[1];
  });
  return _macOsxVersion.apply(this, arguments);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zeXN0ZW0uanMiXSwibmFtZXMiOlsiVkVSU0lPTl9QQVRURVJOIiwiaXNXaW5kb3dzIiwib3MiLCJ0eXBlIiwiaXNNYWMiLCJpc0xpbnV4IiwiaXNPU1dpbjY0IiwicHJvY2VzcyIsImFyY2giLCJlbnYiLCJoYXNPd25Qcm9wZXJ0eSIsInN0ZG91dCIsInRyaW0iLCJpczY0IiwibWFjT3N4VmVyc2lvbiIsImVyciIsIkVycm9yIiwidmVyc2lvbk1hdGNoIiwiZXhlYyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUVBLE1BQU1BLGVBQWUsR0FBRyxjQUF4Qjs7QUFFQSxTQUFTQyxTQUFULEdBQXNCO0FBQ3BCLFNBQU9DLFlBQUdDLElBQUgsT0FBYyxZQUFyQjtBQUNEOztBQUVELFNBQVNDLEtBQVQsR0FBa0I7QUFDaEIsU0FBT0YsWUFBR0MsSUFBSCxPQUFjLFFBQXJCO0FBQ0Q7O0FBRUQsU0FBU0UsT0FBVCxHQUFvQjtBQUNsQixTQUFPLENBQUNKLFNBQVMsRUFBVixJQUFnQixDQUFDRyxLQUFLLEVBQTdCO0FBQ0Q7O0FBRUQsU0FBU0UsU0FBVCxHQUFzQjtBQUNwQixTQUFPQyxPQUFPLENBQUNDLElBQVIsS0FBaUIsS0FBakIsSUFBMEJELE9BQU8sQ0FBQ0UsR0FBUixDQUFZQyxjQUFaLENBQTJCLHdCQUEzQixDQUFqQztBQUNEOztTQUVjRixJOzs7OzswQ0FBZixhQUF1QjtBQUNyQixRQUFJSCxPQUFPLE1BQU1ELEtBQUssRUFBdEIsRUFBMEI7QUFBQSx1QkFDSCx3QkFBSyxPQUFMLEVBQWMsQ0FBQyxJQUFELENBQWQsQ0FERztBQUFBLFVBQ25CTyxNQURtQixRQUNuQkEsTUFEbUI7O0FBRXhCLGFBQU9BLE1BQU0sQ0FBQ0MsSUFBUCxPQUFrQixNQUFsQixHQUEyQixJQUEzQixHQUFrQyxJQUF6QztBQUNELEtBSEQsTUFHTyxJQUFJWCxTQUFTLEVBQWIsRUFBaUI7QUFDdEIsVUFBSVksSUFBSSxHQUFHLEtBQUtQLFNBQUwsRUFBWDtBQUNBLGFBQU9PLElBQUksR0FBRyxJQUFILEdBQVUsSUFBckI7QUFDRDtBQUNGLEc7Ozs7U0FFY0MsYTs7Ozs7bURBQWYsYUFBZ0M7QUFDOUIsUUFBSUgsTUFBSjs7QUFDQSxRQUFJO0FBQ0ZBLE1BQUFBLE1BQU0sR0FBRyxPQUFPLHdCQUFLLFNBQUwsRUFBZ0IsQ0FBQyxpQkFBRCxDQUFoQixDQUFQLEVBQTZDQSxNQUE3QyxDQUFvREMsSUFBcEQsRUFBVDtBQUNELEtBRkQsQ0FFRSxPQUFPRyxHQUFQLEVBQVk7QUFDWixZQUFNLElBQUlDLEtBQUosQ0FBVyxzQ0FBcUNELEdBQUksRUFBcEQsQ0FBTjtBQUNEOztBQUVELFVBQU1FLFlBQVksR0FBR2pCLGVBQWUsQ0FBQ2tCLElBQWhCLENBQXFCUCxNQUFyQixDQUFyQjs7QUFDQSxRQUFJLENBQUNNLFlBQUwsRUFBbUI7QUFDakIsWUFBTSxJQUFJRCxLQUFKLENBQVcsMkRBQTBETCxNQUFPLEdBQTVFLENBQU47QUFDRDs7QUFDRCxXQUFPTSxZQUFZLENBQUMsQ0FBRCxDQUFuQjtBQUNELEciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleGVjIH0gZnJvbSAndGVlbl9wcm9jZXNzJztcbmltcG9ydCBvcyBmcm9tICdvcyc7XG5cbmNvbnN0IFZFUlNJT05fUEFUVEVSTiA9IC9eKFxcZCtcXC5cXGQrKS9tO1xuXG5mdW5jdGlvbiBpc1dpbmRvd3MgKCkge1xuICByZXR1cm4gb3MudHlwZSgpID09PSAnV2luZG93c19OVCc7XG59XG5cbmZ1bmN0aW9uIGlzTWFjICgpIHtcbiAgcmV0dXJuIG9zLnR5cGUoKSA9PT0gJ0Rhcndpbic7XG59XG5cbmZ1bmN0aW9uIGlzTGludXggKCkge1xuICByZXR1cm4gIWlzV2luZG93cygpICYmICFpc01hYygpO1xufVxuXG5mdW5jdGlvbiBpc09TV2luNjQgKCkge1xuICByZXR1cm4gcHJvY2Vzcy5hcmNoID09PSAneDY0JyB8fCBwcm9jZXNzLmVudi5oYXNPd25Qcm9wZXJ0eSgnUFJPQ0VTU09SX0FSQ0hJVEVXNjQzMicpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBhcmNoICgpIHtcbiAgaWYgKGlzTGludXgoKSB8fCBpc01hYygpKSB7XG4gICAgbGV0IHtzdGRvdXR9ID0gYXdhaXQgZXhlYygndW5hbWUnLCBbJy1tJ10pO1xuICAgIHJldHVybiBzdGRvdXQudHJpbSgpID09PSAnaTY4NicgPyAnMzInIDogJzY0JztcbiAgfSBlbHNlIGlmIChpc1dpbmRvd3MoKSkge1xuICAgIGxldCBpczY0ID0gdGhpcy5pc09TV2luNjQoKTtcbiAgICByZXR1cm4gaXM2NCA/ICc2NCcgOiAnMzInO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIG1hY09zeFZlcnNpb24gKCkge1xuICBsZXQgc3Rkb3V0O1xuICB0cnkge1xuICAgIHN0ZG91dCA9IChhd2FpdCBleGVjKCdzd192ZXJzJywgWyctcHJvZHVjdFZlcnNpb24nXSkpLnN0ZG91dC50cmltKCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHRocm93IG5ldyBFcnJvcihgQ291bGQgbm90IGRldGVjdCBNYWMgT1MgWCBWZXJzaW9uOiAke2Vycn1gKTtcbiAgfVxuXG4gIGNvbnN0IHZlcnNpb25NYXRjaCA9IFZFUlNJT05fUEFUVEVSTi5leGVjKHN0ZG91dCk7XG4gIGlmICghdmVyc2lvbk1hdGNoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgZGV0ZWN0IE1hYyBPUyBYIFZlcnNpb24gZnJvbSBzd192ZXJzIG91dHB1dDogJyR7c3Rkb3V0fSdgKTtcbiAgfVxuICByZXR1cm4gdmVyc2lvbk1hdGNoWzFdO1xufVxuXG5leHBvcnQgeyBpc1dpbmRvd3MsIGlzTWFjLCBpc0xpbnV4LCBpc09TV2luNjQsIGFyY2gsIG1hY09zeFZlcnNpb24gfTtcbiJdLCJmaWxlIjoibGliL3N5c3RlbS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
