"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initMJpegServer = initMJpegServer;
exports.TEST_IMG_JPG = exports.MJpegStream = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _request = _interopRequireDefault(require("request"));

var _logger = _interopRequireDefault(require("./logger"));

var _http = _interopRequireDefault(require("http"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _imageUtil = require("./image-util");

var _mjpegServer = _interopRequireDefault(require("mjpeg-server"));

var _stream = require("stream");

let MJpegConsumer = null;

function initMJpegConsumer() {
  if (!MJpegConsumer) {
    try {
      MJpegConsumer = require('mjpeg-consumer');
    } catch (ign) {}
  }

  if (!MJpegConsumer) {
    throw new Error('mjpeg-consumer module is required to use MJPEG-over-HTTP features. ' + 'Please install it first (npm i -g mjpeg-consumer) and restart Appium.');
  }
}

const TEST_IMG_JPG = '/9j/4QAYRXhpZgAASUkqAAgAAAAAAAAAAAAAAP/sABFEdWNreQABAAQAAAAeAAD/4QOBaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLwA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/PiA8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJBZG9iZSBYTVAgQ29yZSA1LjYtYzE0MCA3OS4xNjA0NTEsIDIwMTcvMDUvMDYtMDE6MDg6MjEgICAgICAgICI+IDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+IDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxuczpzdFJlZj0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlUmVmIyIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6NGY5ODc1OTctZGE2My00Y2M0LTkzNDMtNGYyNjgzMGUwNjk3IiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjlDMzI3QkY0N0Q3NTExRThCMTlDOTVDMDc2RDE5MDY5IiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjlDMzI3QkYzN0Q3NTExRThCMTlDOTVDMDc2RDE5MDY5IiB4bXA6Q3JlYXRvclRvb2w9IkFkb2JlIFBob3Rvc2hvcCBDQyAyMDE4IChNYWNpbnRvc2gpIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6NGY5ODc1OTctZGE2My00Y2M0LTkzNDMtNGYyNjgzMGUwNjk3IiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOjRmOTg3NTk3LWRhNjMtNGNjNC05MzQzLTRmMjY4MzBlMDY5NyIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/Pv/uAA5BZG9iZQBkwAAAAAH/2wCEABALCwsMCxAMDBAXDw0PFxsUEBAUGx8XFxcXFx8eFxoaGhoXHh4jJSclIx4vLzMzLy9AQEBAQEBAQEBAQEBAQEABEQ8PERMRFRISFRQRFBEUGhQWFhQaJhoaHBoaJjAjHh4eHiMwKy4nJycuKzU1MDA1NUBAP0BAQEBAQEBAQEBAQP/AABEIACAAIAMBIgACEQEDEQH/xABgAAEAAwEAAAAAAAAAAAAAAAAABAUHCAEBAAAAAAAAAAAAAAAAAAAAABAAAQMCAgsAAAAAAAAAAAAAAAECBBEDEgYhMRODo7PTVAUWNhEBAAAAAAAAAAAAAAAAAAAAAP/aAAwDAQACEQMRAD8Az8AAdAAAAAAI8+fE8dEuTZtzZR7VMb6OdTE5GJoYirrUp/e8qd9wb3TGe/lJ2551sx8D/9k=';
exports.TEST_IMG_JPG = TEST_IMG_JPG;
const MJPEG_SERVER_TIMEOUT_MS = 10000;

class MJpegStream extends _stream.Writable {
  constructor(mJpegUrl, errorHandler = _lodash.default.noop, options = {}) {
    super(options);
    initMJpegConsumer();
    this.errorHandler = errorHandler;
    this.url = mJpegUrl;
    this.clear();
  }

  get lastChunkBase64() {
    return _lodash.default.isBuffer(this.lastChunk) ? this.lastChunk.toString('base64') : null;
  }

  lastChunkPNG() {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (!_lodash.default.isBuffer(_this.lastChunk)) {
        return null;
      }

      const jpg = yield (0, _imageUtil.getJimpImage)(_this.lastChunk);
      return yield jpg.getBuffer(_imageUtil.MIME_PNG);
    })();
  }

  lastChunkPNGBase64() {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      const png = yield _this2.lastChunkPNG();

      if (!png) {
        return null;
      }

      return png.toString('base64');
    })();
  }

  clear() {
    this.registerStartSuccess = null;
    this.registerStartFailure = null;
    this.request = null;
    this.consumer = null;
    this.lastChunk = null;
    this.updateCount = 0;
  }

  start(serverTimeout = MJPEG_SERVER_TIMEOUT_MS) {
    var _this3 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _this3.stop();

      _this3.consumer = new MJpegConsumer();
      const startPromise = new _bluebird.default((res, rej) => {
        _this3.registerStartSuccess = res;
        _this3.registerStartFailure = rej;
      }).timeout(serverTimeout, `Waited ${serverTimeout}ms but the MJPEG server never sent any images`);

      const onErr = err => {
        _logger.default.error(`Error getting MJpeg screenshot chunk: ${err}`);

        _this3.errorHandler(err);

        if (_this3.registerStartFailure) {
          _this3.registerStartFailure(err);
        }
      };

      _this3.request = (0, _request.default)(_this3.url);

      _this3.request.on('error', onErr).pipe(_this3.consumer).pipe(_this3);

      yield startPromise;
    })();
  }

  stop() {
    if (!this.consumer) {
      return;
    }

    this.consumer.unpipe();
    this.request.end();
    this.clear();
  }

  write(data) {
    this.lastChunk = data;
    this.updateCount++;

    if (this.registerStartSuccess) {
      this.registerStartSuccess();
      this.registerStartSuccess = null;
    }
  }

}

exports.MJpegStream = MJpegStream;

function initMJpegServer(port, intMs = 300, times = 20) {
  const server = _http.default.createServer(function () {
    var _ref = (0, _asyncToGenerator2.default)(function* (req, res) {
      const mJpegReqHandler = _mjpegServer.default.createReqHandler(req, res);

      const jpg = Buffer.from(TEST_IMG_JPG, 'base64');

      for (let i = 0; i < times; i++) {
        yield _bluebird.default.delay(intMs);

        mJpegReqHandler._write(jpg, null, _lodash.default.noop);
      }

      mJpegReqHandler.close();
    });

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }()).listen(port);

  return server;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9tanBlZy5qcyJdLCJuYW1lcyI6WyJNSnBlZ0NvbnN1bWVyIiwiaW5pdE1KcGVnQ29uc3VtZXIiLCJyZXF1aXJlIiwiaWduIiwiRXJyb3IiLCJURVNUX0lNR19KUEciLCJNSlBFR19TRVJWRVJfVElNRU9VVF9NUyIsIk1KcGVnU3RyZWFtIiwiV3JpdGFibGUiLCJjb25zdHJ1Y3RvciIsIm1KcGVnVXJsIiwiZXJyb3JIYW5kbGVyIiwiXyIsIm5vb3AiLCJvcHRpb25zIiwidXJsIiwiY2xlYXIiLCJsYXN0Q2h1bmtCYXNlNjQiLCJpc0J1ZmZlciIsImxhc3RDaHVuayIsInRvU3RyaW5nIiwibGFzdENodW5rUE5HIiwianBnIiwiZ2V0QnVmZmVyIiwiTUlNRV9QTkciLCJsYXN0Q2h1bmtQTkdCYXNlNjQiLCJwbmciLCJyZWdpc3RlclN0YXJ0U3VjY2VzcyIsInJlZ2lzdGVyU3RhcnRGYWlsdXJlIiwicmVxdWVzdCIsImNvbnN1bWVyIiwidXBkYXRlQ291bnQiLCJzdGFydCIsInNlcnZlclRpbWVvdXQiLCJzdG9wIiwic3RhcnRQcm9taXNlIiwiQiIsInJlcyIsInJlaiIsInRpbWVvdXQiLCJvbkVyciIsImVyciIsImxvZyIsImVycm9yIiwib24iLCJwaXBlIiwidW5waXBlIiwiZW5kIiwid3JpdGUiLCJkYXRhIiwiaW5pdE1KcGVnU2VydmVyIiwicG9ydCIsImludE1zIiwidGltZXMiLCJzZXJ2ZXIiLCJodHRwIiwiY3JlYXRlU2VydmVyIiwicmVxIiwibUpwZWdSZXFIYW5kbGVyIiwibUpwZWdTZXJ2ZXIiLCJjcmVhdGVSZXFIYW5kbGVyIiwiQnVmZmVyIiwiZnJvbSIsImkiLCJkZWxheSIsIl93cml0ZSIsImNsb3NlIiwibGlzdGVuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFJQSxJQUFJQSxhQUFhLEdBQUcsSUFBcEI7O0FBS0EsU0FBU0MsaUJBQVQsR0FB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RUFBZ0M7QUFDOUIsY0FBTTNCLGtCQUFFNEIsS0FBRixDQUFRWixLQUFSLENBQU47O0FBQ0FNLFFBQUFBLGVBQWUsQ0FBQ08sTUFBaEIsQ0FBdUIzQyxHQUF2QixFQUE0QixJQUE1QixFQUFrQ1YsZ0JBQUVDLElBQXBDO0FBQ0Q7O0FBQ0Q2QyxNQUFBQSxlQUFlLENBQUNRLEtBQWhCO0FBQ0QsS0FWYzs7QUFBQTtBQUFBO0FBQUE7QUFBQSxPQVVaQyxNQVZZLENBVUxoQixJQVZLLENBQWY7O0FBWUEsU0FBT0csTUFBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCByZXF1ZXN0IGZyb20gJ3JlcXVlc3QnO1xuaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgaHR0cCBmcm9tICdodHRwJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCB7IGdldEppbXBJbWFnZSwgTUlNRV9QTkcgfSBmcm9tICcuL2ltYWdlLXV0aWwnO1xuaW1wb3J0IG1KcGVnU2VydmVyIGZyb20gJ21qcGVnLXNlcnZlcic7XG5pbXBvcnQgeyBXcml0YWJsZSB9IGZyb20gJ3N0cmVhbSc7XG5cblxuLy8gbGF6eSBsb2FkIHRoaXMsIGFzIGl0IG1pZ2h0IG5vdCBiZSBhdmFpbGFibGVcbmxldCBNSnBlZ0NvbnN1bWVyID0gbnVsbDtcblxuLyoqXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgYG1qcGVnLWNvbnN1bWVyYCBtb2R1bGUgaXMgbm90IGluc3RhbGxlZCBvciBjYW5ub3QgYmUgbG9hZGVkXG4gKi9cbmZ1bmN0aW9uIGluaXRNSnBlZ0NvbnN1bWVyICgpIHtcbiAgaWYgKCFNSnBlZ0NvbnN1bWVyKSB7XG4gICAgdHJ5IHtcbiAgICAgIE1KcGVnQ29uc3VtZXIgPSByZXF1aXJlKCdtanBlZy1jb25zdW1lcicpO1xuICAgIH0gY2F0Y2ggKGlnbikge31cbiAgfVxuICBpZiAoIU1KcGVnQ29uc3VtZXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ21qcGVnLWNvbnN1bWVyIG1vZHVsZSBpcyByZXF1aXJlZCB0byB1c2UgTUpQRUctb3Zlci1IVFRQIGZlYXR1cmVzLiAnICtcbiAgICAgICAgICAgICAgICAgICAgJ1BsZWFzZSBpbnN0YWxsIGl0IGZpcnN0IChucG0gaSAtZyBtanBlZy1jb25zdW1lcikgYW5kIHJlc3RhcnQgQXBwaXVtLicpO1xuICB9XG59XG5cbmNvbnN0IFRFU1RfSU1HX0pQRyA9ICcvOWovNFFBWVJYaHBaZ0FBU1VrcUFBZ0FBQUFBQUFBQUFBQUFBUC9zQUJGRWRXTnJlUUFCQUFRQUFBQWVBQUQvNFFPQmFIUjBjRG92TDI1ekxtRmtiMkpsTG1OdmJTOTRZWEF2TVM0d0x3QThQM2h3WVdOclpYUWdZbVZuYVc0OUl1Kzd2eUlnYVdROUlsYzFUVEJOY0VObGFHbEllbkpsVTNwT1ZHTjZhMk01WkNJL1BpQThlRHA0YlhCdFpYUmhJSGh0Ykc1ek9uZzlJbUZrYjJKbE9tNXpPbTFsZEdFdklpQjRPbmh0Y0hSclBTSkJaRzlpWlNCWVRWQWdRMjl5WlNBMUxqWXRZekUwTUNBM09TNHhOakEwTlRFc0lESXdNVGN2TURVdk1EWXRNREU2TURnNk1qRWdJQ0FnSUNBZ0lDSStJRHh5WkdZNlVrUkdJSGh0Ykc1ek9uSmtaajBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TVRrNU9TOHdNaTh5TWkxeVpHWXRjM2x1ZEdGNExXNXpJeUkrSUR4eVpHWTZSR1Z6WTNKcGNIUnBiMjRnY21SbU9tRmliM1YwUFNJaUlIaHRiRzV6T25odGNFMU5QU0pvZEhSd09pOHZibk11WVdSdlltVXVZMjl0TDNoaGNDOHhMakF2YlcwdklpQjRiV3h1Y3pwemRGSmxaajBpYUhSMGNEb3ZMMjV6TG1Ga2IySmxMbU52YlM5NFlYQXZNUzR3TDNOVWVYQmxMMUpsYzI5MWNtTmxVbVZtSXlJZ2VHMXNibk02ZUcxd1BTSm9kSFJ3T2k4dmJuTXVZV1J2WW1VdVkyOXRMM2hoY0M4eExqQXZJaUI0YlhCTlRUcFBjbWxuYVc1aGJFUnZZM1Z0Wlc1MFNVUTlJbmh0Y0M1a2FXUTZOR1k1T0RjMU9UY3RaR0UyTXkwMFkyTTBMVGt6TkRNdE5HWXlOamd6TUdVd05qazNJaUI0YlhCTlRUcEViMk4xYldWdWRFbEVQU0o0YlhBdVpHbGtPamxETXpJM1FrWTBOMFEzTlRFeFJUaENNVGxET1RWRE1EYzJSREU1TURZNUlpQjRiWEJOVFRwSmJuTjBZVzVqWlVsRVBTSjRiWEF1YVdsa09qbERNekkzUWtZek4wUTNOVEV4UlRoQ01UbERPVFZETURjMlJERTVNRFk1SWlCNGJYQTZRM0psWVhSdmNsUnZiMnc5SWtGa2IySmxJRkJvYjNSdmMyaHZjQ0JEUXlBeU1ERTRJQ2hOWVdOcGJuUnZjMmdwSWo0Z1BIaHRjRTFOT2tSbGNtbDJaV1JHY205dElITjBVbVZtT21sdWMzUmhibU5sU1VROUluaHRjQzVwYVdRNk5HWTVPRGMxT1RjdFpHRTJNeTAwWTJNMExUa3pORE10TkdZeU5qZ3pNR1V3TmprM0lpQnpkRkpsWmpwa2IyTjFiV1Z1ZEVsRVBTSjRiWEF1Wkdsa09qUm1PVGczTlRrM0xXUmhOak10TkdOak5DMDVNelF6TFRSbU1qWTRNekJsTURZNU55SXZQaUE4TDNKa1pqcEVaWE5qY21sd2RHbHZiajRnUEM5eVpHWTZVa1JHUGlBOEwzZzZlRzF3YldWMFlUNGdQRDk0Y0dGamEyVjBJR1Z1WkQwaWNpSS9Qdi91QUE1QlpHOWlaUUJrd0FBQUFBSC8yd0NFQUJBTEN3c01DeEFNREJBWER3MFBGeHNVRUJBVUd4OFhGeGNYRng4ZUZ4b2FHaG9YSGg0akpTY2xJeDR2THpNekx5OUFRRUJBUUVCQVFFQkFRRUJBUUVBQkVROFBFUk1SRlJJU0ZSUVJGQkVVR2hRV0ZoUWFKaG9hSEJvYUpqQWpIaDRlSGlNd0t5NG5KeWN1S3pVMU1EQTFOVUJBUDBCQVFFQkFRRUJBUUVCQVFQL0FBQkVJQUNBQUlBTUJJZ0FDRVFFREVRSC94QUJnQUFFQUF3RUFBQUFBQUFBQUFBQUFBQUFBQkFVSENBRUJBQUFBQUFBQUFBQUFBQUFBQUFBQUFCQUFBUU1DQWdzQUFBQUFBQUFBQUFBQUFBRUNCQkVERWdZaE1ST0RvN1BUVkFVV05oRUJBQUFBQUFBQUFBQUFBQUFBQUFBQUFQL2FBQXdEQVFBQ0VRTVJBRDhBejhBQWRBQUFBQUFJOCtmRThkRXVUWnR6WlI3Vk1iNk9kVEU1R0pvWWlyclVwL2U4cWQ5d2IzVEdlL2xKMjU1MXN4OEQvOWs9JztcblxuLy8gYW1vdW50IG9mIHRpbWUgdG8gd2FpdCBmb3IgdGhlIGZpcnN0IGltYWdlIGluIHRoZSBzdHJlYW1cbmNvbnN0IE1KUEVHX1NFUlZFUl9USU1FT1VUX01TID0gMTAwMDA7XG5cbi8qKiBDbGFzcyB3aGljaCBzdG9yZXMgdGhlIGxhc3QgYml0IG9mIGRhdGEgc3RyZWFtZWQgaW50byBpdCAqL1xuY2xhc3MgTUpwZWdTdHJlYW0gZXh0ZW5kcyBXcml0YWJsZSB7XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBNSnBlZ1N0cmVhbVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbUpwZWdVcmwgLSBVUkwgb2YgTUpQRUctb3Zlci1IVFRQIHN0cmVhbVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBbZXJyb3JIYW5kbGVyPW5vb3BdIC0gYWRkaXRpb25hbCBmdW5jdGlvbiB0aGF0IHdpbGwgYmVcbiAgICogY2FsbGVkIGluIHRoZSBjYXNlIG9mIGFueSBlcnJvcnMuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucz17fV0gLSBPcHRpb25zIHRvIHBhc3MgdG8gdGhlIFdyaXRhYmxlIGNvbnN0cnVjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3RvciAobUpwZWdVcmwsIGVycm9ySGFuZGxlciA9IF8ubm9vcCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICBpbml0TUpwZWdDb25zdW1lcigpO1xuXG4gICAgdGhpcy5lcnJvckhhbmRsZXIgPSBlcnJvckhhbmRsZXI7XG4gICAgdGhpcy51cmwgPSBtSnBlZ1VybDtcbiAgICB0aGlzLmNsZWFyKCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBiYXNlNjQtZW5jb2RlZCB2ZXJzaW9uIG9mIHRoZSBKUEVHXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBnZXQgbGFzdENodW5rQmFzZTY0ICgpIHtcbiAgICByZXR1cm4gXy5pc0J1ZmZlcih0aGlzLmxhc3RDaHVuaykgP1xuICAgICAgdGhpcy5sYXN0Q2h1bmsudG9TdHJpbmcoJ2Jhc2U2NCcpIDpcbiAgICAgIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBQTkcgdmVyc2lvbiBvZiB0aGUgSlBFRyBidWZmZXJcbiAgICogQHJldHVybnMge0J1ZmZlcn0gUE5HIGltYWdlIGRhdGFcbiAgICovXG4gIGFzeW5jIGxhc3RDaHVua1BORyAoKSB7XG4gICAgaWYgKCFfLmlzQnVmZmVyKHRoaXMubGFzdENodW5rKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QganBnID0gYXdhaXQgZ2V0SmltcEltYWdlKHRoaXMubGFzdENodW5rKTtcbiAgICByZXR1cm4gYXdhaXQganBnLmdldEJ1ZmZlcihNSU1FX1BORyk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBiYXNlNjQtZW5jb2RlZCB2ZXJzaW9uIG9mIHRoZSBQTkdcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIGFzeW5jIGxhc3RDaHVua1BOR0Jhc2U2NCAoKSB7XG4gICAgY29uc3QgcG5nID0gYXdhaXQgdGhpcy5sYXN0Q2h1bmtQTkcoKTtcblxuICAgIGlmICghcG5nKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gcG5nLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNldCBpbnRlcm5hbCBzdGF0ZVxuICAgKi9cbiAgY2xlYXIgKCkge1xuICAgIHRoaXMucmVnaXN0ZXJTdGFydFN1Y2Nlc3MgPSBudWxsO1xuICAgIHRoaXMucmVnaXN0ZXJTdGFydEZhaWx1cmUgPSBudWxsO1xuICAgIHRoaXMucmVxdWVzdCA9IG51bGw7XG4gICAgdGhpcy5jb25zdW1lciA9IG51bGw7XG4gICAgdGhpcy5sYXN0Q2h1bmsgPSBudWxsO1xuICAgIHRoaXMudXBkYXRlQ291bnQgPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IHJlYWRpbmcgdGhlIE1KcGVnIHN0cmVhbSBhbmQgc3RvcmluZyB0aGUgbGFzdCBpbWFnZVxuICAgKi9cbiAgYXN5bmMgc3RhcnQgKHNlcnZlclRpbWVvdXQgPSBNSlBFR19TRVJWRVJfVElNRU9VVF9NUykge1xuICAgIC8vIGVuc3VyZSB3ZSdyZSBub3Qgc3RhcnRlZCBhbHJlYWR5XG4gICAgdGhpcy5zdG9wKCk7XG5cbiAgICB0aGlzLmNvbnN1bWVyID0gbmV3IE1KcGVnQ29uc3VtZXIoKTtcblxuICAgIC8vIHVzZSB0aGUgZGVmZXJyZWQgcGF0dGVybiBzbyB3ZSBjYW4gd2FpdCBmb3IgdGhlIHN0YXJ0IG9mIHRoZSBzdHJlYW1cbiAgICAvLyBiYXNlZCBvbiB3aGF0IGNvbWVzIGluIGZyb20gYW4gZXh0ZXJuYWwgcGlwZVxuICAgIGNvbnN0IHN0YXJ0UHJvbWlzZSA9IG5ldyBCKChyZXMsIHJlaikgPT4ge1xuICAgICAgdGhpcy5yZWdpc3RlclN0YXJ0U3VjY2VzcyA9IHJlcztcbiAgICAgIHRoaXMucmVnaXN0ZXJTdGFydEZhaWx1cmUgPSByZWo7XG4gICAgfSlcbiAgICAvLyBzdGFydCBhIHRpbWVvdXQgc28gdGhhdCBpZiB0aGUgc2VydmVyIGRvZXMgbm90IHJldHVybiBkYXRhLCB3ZSBkb24ndFxuICAgIC8vIGJsb2NrIGZvcmV2ZXIuXG4gICAgICAudGltZW91dChzZXJ2ZXJUaW1lb3V0LFxuICAgICAgICBgV2FpdGVkICR7c2VydmVyVGltZW91dH1tcyBidXQgdGhlIE1KUEVHIHNlcnZlciBuZXZlciBzZW50IGFueSBpbWFnZXNgKTtcblxuICAgIGNvbnN0IG9uRXJyID0gKGVycikgPT4ge1xuICAgICAgbG9nLmVycm9yKGBFcnJvciBnZXR0aW5nIE1KcGVnIHNjcmVlbnNob3QgY2h1bms6ICR7ZXJyfWApO1xuICAgICAgdGhpcy5lcnJvckhhbmRsZXIoZXJyKTtcbiAgICAgIGlmICh0aGlzLnJlZ2lzdGVyU3RhcnRGYWlsdXJlKSB7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJTdGFydEZhaWx1cmUoZXJyKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5yZXF1ZXN0ID0gcmVxdWVzdCh0aGlzLnVybCk7XG5cbiAgICB0aGlzLnJlcXVlc3RcbiAgICAgIC5vbignZXJyb3InLCBvbkVycikgLy8gZW5zdXJlIHdlIGRvIHNvbWV0aGluZyB3aXRoIGVycm9yc1xuICAgICAgLnBpcGUodGhpcy5jb25zdW1lcikgLy8gYWxsb3cgY2h1bmtpbmcgYW5kIHRyYW5zZm9ybWluZyBvZiBqcGVnIGRhdGFcbiAgICAgIC5waXBlKHRoaXMpOyAvLyBzZW5kIHRoZSBhY3R1YWwganBlZ3MgdG8gb3Vyc2VsZlxuXG4gICAgYXdhaXQgc3RhcnRQcm9taXNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0b3AgcmVhZGluZyB0aGUgTUpwZWcgc3RyZWFtLiBFbnN1cmUgd2UgZGlzY29ubmVjdCBhbGwgdGhlIHBpcGVzIGFuZCBzdG9wXG4gICAqIHRoZSBIVFRQIHJlcXVlc3QgaXRzZWxmLiBUaGVuIHJlc2V0IHRoZSBzdGF0ZS5cbiAgICovXG4gIHN0b3AgKCkge1xuICAgIGlmICghdGhpcy5jb25zdW1lcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuY29uc3VtZXIudW5waXBlKCk7XG4gICAgdGhpcy5yZXF1ZXN0LmVuZCgpO1xuICAgIHRoaXMuY2xlYXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgV3JpdGFibGUgd3JpdGUoKSBtZXRob2QgaW4gb3JkZXIgdG8gc2F2ZSB0aGUgbGFzdCBpbWFnZSBhbmRcbiAgICogbG9nIHRoZSBudW1iZXIgb2YgaW1hZ2VzIHdlIGhhdmUgcmVjZWl2ZWRcbiAgICogQG92ZXJyaWRlXG4gICAqIEBwYXJhbSB7QnVmZmVyfSBkYXRhIC0gYmluYXJ5IGRhdGEgc3RyZWFtZWQgZnJvbSB0aGUgTUpwZWcgY29uc3VtZXJcbiAgICovXG4gIHdyaXRlIChkYXRhKSB7XG4gICAgdGhpcy5sYXN0Q2h1bmsgPSBkYXRhO1xuICAgIHRoaXMudXBkYXRlQ291bnQrKztcblxuICAgIGlmICh0aGlzLnJlZ2lzdGVyU3RhcnRTdWNjZXNzKSB7XG4gICAgICB0aGlzLnJlZ2lzdGVyU3RhcnRTdWNjZXNzKCk7XG4gICAgICB0aGlzLnJlZ2lzdGVyU3RhcnRTdWNjZXNzID0gbnVsbDtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBTdGFydCBhbiBtanBlZyBzZXJ2ZXIgZm9yIHRoZSBwdXJwb3NlIG9mIHRlc3RpbmcsIHdoaWNoIGp1c3Qgc2VuZHMgdGhlIHNhbWVcbiAqIGltYWdlIG92ZXIgYW5kIG92ZXIuIENhbGxlciBpcyByZXNwb25zaWJsZSBmb3IgY2xvc2luZyB0aGUgc2VydmVyLlxuICogQHBhcmFtIHtpbnR9IHBvcnQgLSBwb3J0IHRoZSBzZXJ2ZXIgc2hvdWxkIGxpc3RlbiBvblxuICogQHBhcmFtIHtpbnR9IFtpbnRNc10gLSBob3cgb2Z0ZW4gdGhlIHNlcnZlciBzaG91bGQgcHVzaCBhbiBpbWFnZVxuICogQHBhcmFtIHtpbnR9IFt0aW1lc10gLSBob3cgbWFueSB0aW1lcyB0aGUgc2VydmVyIHNob3VsZCBwdXNoIGFuIGltYWdlIGJlZm9yZVxuICogaXQgY2xvc2VzIHRoZSBjb25uZWN0aW9uXG4gKiBAcmV0dXJucyB7aHR0cC5TZXJ2ZXJ9XG4gKi9cbmZ1bmN0aW9uIGluaXRNSnBlZ1NlcnZlciAocG9ydCwgaW50TXMgPSAzMDAsIHRpbWVzID0gMjApIHtcbiAgY29uc3Qgc2VydmVyID0gaHR0cC5jcmVhdGVTZXJ2ZXIoYXN5bmMgZnVuY3Rpb24gKHJlcSwgcmVzKSB7XG4gICAgY29uc3QgbUpwZWdSZXFIYW5kbGVyID0gbUpwZWdTZXJ2ZXIuY3JlYXRlUmVxSGFuZGxlcihyZXEsIHJlcyk7XG4gICAgY29uc3QganBnID0gQnVmZmVyLmZyb20oVEVTVF9JTUdfSlBHLCAnYmFzZTY0Jyk7XG5cbiAgICAvLyBqdXN0IHNlbmQgdGhlIHNhbWUganBlZyBvdmVyIGFuZCBvdmVyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aW1lczsgaSsrKSB7XG4gICAgICBhd2FpdCBCLmRlbGF5KGludE1zKTtcbiAgICAgIG1KcGVnUmVxSGFuZGxlci5fd3JpdGUoanBnLCBudWxsLCBfLm5vb3ApO1xuICAgIH1cbiAgICBtSnBlZ1JlcUhhbmRsZXIuY2xvc2UoKTtcbiAgfSkubGlzdGVuKHBvcnQpO1xuXG4gIHJldHVybiBzZXJ2ZXI7XG59XG5cbmV4cG9ydCB7IE1KcGVnU3RyZWFtLCBpbml0TUpwZWdTZXJ2ZXIsIFRFU1RfSU1HX0pQRyB9O1xuIl0sImZpbGUiOiJsaWIvbWpwZWcuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
