"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.open = open;
exports.path = path;
exports.staticDir = staticDir;
exports.openDir = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _fs = _interopRequireDefault(require("./fs"));

var _os = _interopRequireDefault(require("os"));

var _path2 = _interopRequireDefault(require("path"));

var _constants = _interopRequireDefault(require("constants"));

var _logger = _interopRequireDefault(require("./logger"));

const RDWR_EXCL = _constants.default.O_CREAT | _constants.default.O_TRUNC | _constants.default.O_RDWR | _constants.default.O_EXCL;

function tempDir() {
  return _tempDir.apply(this, arguments);
}

function _tempDir() {
  _tempDir = (0, _asyncToGenerator2.default)(function* () {
    let now = new Date();

    let filePath = _path2.default.join(_os.default.tmpdir(), [now.getFullYear(), now.getMonth(), now.getDate(), '-', process.pid, '-', (Math.random() * 0x100000000 + 1).toString(36)].join(''));

    yield _fs.default.mkdir(filePath);
    return filePath;
  });
  return _tempDir.apply(this, arguments);
}

function path(_x, _x2) {
  return _path.apply(this, arguments);
}

function _path() {
  _path = (0, _asyncToGenerator2.default)(function* (rawAffixes, defaultPrefix) {
    let affixes = parseAffixes(rawAffixes, defaultPrefix);
    let name = [affixes.prefix, affixes.suffix].join('');
    let tempDirectory = yield tempDir();
    return _path2.default.join(tempDirectory, name);
  });
  return _path.apply(this, arguments);
}

function open(_x3) {
  return _open.apply(this, arguments);
}

function _open() {
  _open = (0, _asyncToGenerator2.default)(function* (affixes) {
    let filePath = yield path(affixes, 'f-');

    try {
      let fd = yield _fs.default.open(filePath, RDWR_EXCL, 0o600);
      return {
        path: filePath,
        fd
      };
    } catch (err) {
      _logger.default.errorAndThrow(err);
    }
  });
  return _open.apply(this, arguments);
}

function parseAffixes(rawAffixes, defaultPrefix) {
  let affixes = {
    prefix: null,
    suffix: null
  };

  if (rawAffixes) {
    switch (typeof rawAffixes) {
      case 'string':
        affixes.prefix = rawAffixes;
        break;

      case 'object':
        affixes = rawAffixes;
        break;

      default:
        throw new Error(`Unknown affix declaration: ${affixes}`);
    }
  } else {
    affixes.prefix = defaultPrefix;
  }

  return affixes;
}

const _static = tempDir();

const openDir = tempDir;
exports.openDir = openDir;

function staticDir() {
  return _staticDir.apply(this, arguments);
}

function _staticDir() {
  _staticDir = (0, _asyncToGenerator2.default)(function* () {
    return _static;
  });
  return _staticDir.apply(this, arguments);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi90ZW1wZGlyLmpzIl0sIm5hbWVzIjpbIlJEV1JfRVhDTCIsImNuc3QiLCJPX0NSRUFUIiwiT19UUlVOQyIsIk9fUkRXUiIsIk9fRVhDTCIsInRlbXBEaXIiLCJub3ciLCJEYXRlIiwiZmlsZVBhdGgiLCJub2RlUGF0aCIsImpvaW4iLCJvcyIsInRtcGRpciIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwicHJvY2VzcyIsInBpZCIsIk1hdGgiLCJyYW5kb20iLCJ0b1N0cmluZyIsImZzIiwibWtkaXIiLCJwYXRoIiwicmF3QWZmaXhlcyIsImRlZmF1bHRQcmVmaXgiLCJhZmZpeGVzIiwicGFyc2VBZmZpeGVzIiwibmFtZSIsInByZWZpeCIsInN1ZmZpeCIsInRlbXBEaXJlY3RvcnkiLCJvcGVuIiwiZmQiLCJlcnIiLCJsb2ciLCJlcnJvckFuZFRocm93IiwiRXJyb3IiLCJfc3RhdGljIiwib3BlbkRpciIsInN0YXRpY0RpciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxNQUFNQSxTQUFTLEdBQUdDLG1CQUFLQyxPQUFMLEdBQWVELG1CQUFLRSxPQUFwQixHQUE4QkYsbUJBQUtHLE1BQW5DLEdBQTRDSCxtQkFBS0ksTUFBbkU7O1NBRWVDLE87Ozs7OzZDQUFmLGFBQTBCO0FBQ3hCLFFBQUlDLEdBQUcsR0FBRyxJQUFJQyxJQUFKLEVBQVY7O0FBQ0EsUUFBSUMsUUFBUSxHQUFHQyxlQUFTQyxJQUFULENBQWNDLFlBQUdDLE1BQUgsRUFBZCxFQUNiLENBQ0VOLEdBQUcsQ0FBQ08sV0FBSixFQURGLEVBQ3FCUCxHQUFHLENBQUNRLFFBQUosRUFEckIsRUFDcUNSLEdBQUcsQ0FBQ1MsT0FBSixFQURyQyxFQUVFLEdBRkYsRUFHRUMsT0FBTyxDQUFDQyxHQUhWLEVBSUUsR0FKRixFQUtFLENBQUNDLElBQUksQ0FBQ0MsTUFBTCxLQUFnQixXQUFoQixHQUE4QixDQUEvQixFQUFrQ0MsUUFBbEMsQ0FBMkMsRUFBM0MsQ0FMRixFQU1FVixJQU5GLENBTU8sRUFOUCxDQURhLENBQWY7O0FBVUEsVUFBTVcsWUFBR0MsS0FBSCxDQUFTZCxRQUFULENBQU47QUFFQSxXQUFPQSxRQUFQO0FBQ0QsRzs7OztTQUVjZSxJOzs7OzswQ0FBZixXQUFxQkMsVUFBckIsRUFBaUNDLGFBQWpDLEVBQWdEO0FBQzlDLFFBQUlDLE9BQU8sR0FBR0MsWUFBWSxDQUFDSCxVQUFELEVBQWFDLGFBQWIsQ0FBMUI7QUFDQSxRQUFJRyxJQUFJLEdBQUcsQ0FBQ0YsT0FBTyxDQUFDRyxNQUFULEVBQWlCSCxPQUFPLENBQUNJLE1BQXpCLEVBQWlDcEIsSUFBakMsQ0FBc0MsRUFBdEMsQ0FBWDtBQUNBLFFBQUlxQixhQUFhLFNBQVMxQixPQUFPLEVBQWpDO0FBQ0EsV0FBT0ksZUFBU0MsSUFBVCxDQUFjcUIsYUFBZCxFQUE2QkgsSUFBN0IsQ0FBUDtBQUNELEc7Ozs7U0FFY0ksSTs7Ozs7MENBQWYsV0FBcUJOLE9BQXJCLEVBQThCO0FBQzVCLFFBQUlsQixRQUFRLFNBQVNlLElBQUksQ0FBQ0csT0FBRCxFQUFVLElBQVYsQ0FBekI7O0FBQ0EsUUFBSTtBQUNGLFVBQUlPLEVBQUUsU0FBU1osWUFBR1csSUFBSCxDQUFReEIsUUFBUixFQUFrQlQsU0FBbEIsRUFBNkIsS0FBN0IsQ0FBZjtBQUVBLGFBQU87QUFBQ3dCLFFBQUFBLElBQUksRUFBRWYsUUFBUDtBQUFpQnlCLFFBQUFBO0FBQWpCLE9BQVA7QUFDRCxLQUpELENBSUUsT0FBT0MsR0FBUCxFQUFZO0FBQ1pDLHNCQUFJQyxhQUFKLENBQWtCRixHQUFsQjtBQUNEO0FBRUYsRzs7OztBQUVELFNBQVNQLFlBQVQsQ0FBdUJILFVBQXZCLEVBQW1DQyxhQUFuQyxFQUFrRDtBQUNoRCxNQUFJQyxPQUFPLEdBQUc7QUFBQ0csSUFBQUEsTUFBTSxFQUFFLElBQVQ7QUFBZUMsSUFBQUEsTUFBTSxFQUFFO0FBQXZCLEdBQWQ7O0FBQ0EsTUFBSU4sVUFBSixFQUFnQjtBQUNkLFlBQVEsT0FBT0EsVUFBZjtBQUNFLFdBQUssUUFBTDtBQUNFRSxRQUFBQSxPQUFPLENBQUNHLE1BQVIsR0FBaUJMLFVBQWpCO0FBQ0E7O0FBQ0YsV0FBSyxRQUFMO0FBQ0VFLFFBQUFBLE9BQU8sR0FBR0YsVUFBVjtBQUNBOztBQUNGO0FBQ0UsY0FBTSxJQUFJYSxLQUFKLENBQVcsOEJBQTZCWCxPQUFRLEVBQWhELENBQU47QUFSSjtBQVVELEdBWEQsTUFXTztBQUNMQSxJQUFBQSxPQUFPLENBQUNHLE1BQVIsR0FBaUJKLGFBQWpCO0FBQ0Q7O0FBQ0QsU0FBT0MsT0FBUDtBQUNEOztBQUVELE1BQU1ZLE9BQU8sR0FBR2pDLE9BQU8sRUFBdkI7O0FBQ0EsTUFBTWtDLE9BQU8sR0FBR2xDLE9BQWhCOzs7U0FFZW1DLFM7Ozs7OytDQUFmLGFBQTRCO0FBQzFCLFdBQU9GLE9BQVA7QUFDRCxHIiwic291cmNlc0NvbnRlbnQiOlsiLyogVGhpcyBsaWJyYXJ5IGlzIG9yaWdpbmF0ZWQgZnJvbSB0ZW1wLmpzIGF0IGh0dHA6Ly9naXRodWIuY29tL2JydWNlL25vZGUtdGVtcCAqL1xuaW1wb3J0IGZzIGZyb20gJy4vZnMnO1xuaW1wb3J0IG9zIGZyb20gJ29zJztcbmltcG9ydCBub2RlUGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBjbnN0IGZyb20gJ2NvbnN0YW50cyc7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcblxuY29uc3QgUkRXUl9FWENMID0gY25zdC5PX0NSRUFUIHwgY25zdC5PX1RSVU5DIHwgY25zdC5PX1JEV1IgfCBjbnN0Lk9fRVhDTDtcblxuYXN5bmMgZnVuY3Rpb24gdGVtcERpciAoKSB7XG4gIGxldCBub3cgPSBuZXcgRGF0ZSgpO1xuICBsZXQgZmlsZVBhdGggPSBub2RlUGF0aC5qb2luKG9zLnRtcGRpcigpLFxuICAgIFtcbiAgICAgIG5vdy5nZXRGdWxsWWVhcigpLCBub3cuZ2V0TW9udGgoKSwgbm93LmdldERhdGUoKSxcbiAgICAgICctJyxcbiAgICAgIHByb2Nlc3MucGlkLFxuICAgICAgJy0nLFxuICAgICAgKE1hdGgucmFuZG9tKCkgKiAweDEwMDAwMDAwMCArIDEpLnRvU3RyaW5nKDM2KSxcbiAgICBdLmpvaW4oJycpKTtcbiAgLy8gY3JlYXRlcyBhIHRlbXAgZGlyZWN0b3J5IHVzaW5nIHRoZSBkYXRlIGFuZCBhIHJhbmRvbSBzdHJpbmdcblxuICBhd2FpdCBmcy5ta2RpcihmaWxlUGF0aCk7XG5cbiAgcmV0dXJuIGZpbGVQYXRoO1xufVxuXG5hc3luYyBmdW5jdGlvbiBwYXRoIChyYXdBZmZpeGVzLCBkZWZhdWx0UHJlZml4KSB7XG4gIGxldCBhZmZpeGVzID0gcGFyc2VBZmZpeGVzKHJhd0FmZml4ZXMsIGRlZmF1bHRQcmVmaXgpO1xuICBsZXQgbmFtZSA9IFthZmZpeGVzLnByZWZpeCwgYWZmaXhlcy5zdWZmaXhdLmpvaW4oJycpO1xuICBsZXQgdGVtcERpcmVjdG9yeSA9IGF3YWl0IHRlbXBEaXIoKTtcbiAgcmV0dXJuIG5vZGVQYXRoLmpvaW4odGVtcERpcmVjdG9yeSwgbmFtZSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIG9wZW4gKGFmZml4ZXMpIHtcbiAgbGV0IGZpbGVQYXRoID0gYXdhaXQgcGF0aChhZmZpeGVzLCAnZi0nKTtcbiAgdHJ5IHtcbiAgICBsZXQgZmQgPSBhd2FpdCBmcy5vcGVuKGZpbGVQYXRoLCBSRFdSX0VYQ0wsIDBvNjAwKTtcbiAgICAvLyBvcGVucyB0aGUgZmlsZSBpbiBtb2RlIDM4NFxuICAgIHJldHVybiB7cGF0aDogZmlsZVBhdGgsIGZkfTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coZXJyKTtcbiAgfVxuXG59XG5cbmZ1bmN0aW9uIHBhcnNlQWZmaXhlcyAocmF3QWZmaXhlcywgZGVmYXVsdFByZWZpeCkge1xuICBsZXQgYWZmaXhlcyA9IHtwcmVmaXg6IG51bGwsIHN1ZmZpeDogbnVsbH07XG4gIGlmIChyYXdBZmZpeGVzKSB7XG4gICAgc3dpdGNoICh0eXBlb2YgcmF3QWZmaXhlcykge1xuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgYWZmaXhlcy5wcmVmaXggPSByYXdBZmZpeGVzO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgIGFmZml4ZXMgPSByYXdBZmZpeGVzO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBhZmZpeCBkZWNsYXJhdGlvbjogJHthZmZpeGVzfWApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBhZmZpeGVzLnByZWZpeCA9IGRlZmF1bHRQcmVmaXg7XG4gIH1cbiAgcmV0dXJuIGFmZml4ZXM7XG59XG5cbmNvbnN0IF9zdGF0aWMgPSB0ZW1wRGlyKCk7XG5jb25zdCBvcGVuRGlyID0gdGVtcERpcjtcblxuYXN5bmMgZnVuY3Rpb24gc3RhdGljRGlyICgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWF3YWl0XG4gIHJldHVybiBfc3RhdGljO1xufVxuXG5leHBvcnQgeyBvcGVuLCBwYXRoLCBvcGVuRGlyLCBzdGF0aWNEaXIgfTtcbiJdLCJmaWxlIjoibGliL3RlbXBkaXIuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
