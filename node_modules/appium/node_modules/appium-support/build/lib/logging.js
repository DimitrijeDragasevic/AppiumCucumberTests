"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.patchLogger = patchLogger;
exports.getLogger = getLogger;
exports.default = exports.log = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _npmlog = _interopRequireDefault(require("npmlog"));

var _lodash = _interopRequireDefault(require("lodash"));

const NPM_LEVELS = ['silly', 'verbose', 'debug', 'info', 'http', 'warn', 'error'];
const MAX_LOG_RECORDS_COUNT = 3000;
let mockLog = {};

for (var _i = 0; _i < NPM_LEVELS.length; _i++) {
  let level = NPM_LEVELS[_i];

  mockLog[level] = () => {};
}

function patchLogger(logger) {
  if (!logger.debug) {
    logger.addLevel('debug', 1000, {
      fg: 'blue',
      bg: 'black'
    }, 'dbug');
  }
}

function _getLogger() {
  const testingMode = parseInt(process.env._TESTING, 10) === 1;
  const forceLogMode = parseInt(process.env._FORCE_LOGS, 10) === 1;
  const usingGlobalLog = !!global._global_npmlog;
  let logger;

  if (testingMode && !forceLogMode) {
    logger = mockLog;
  } else {
    logger = global._global_npmlog || _npmlog.default;
    logger.maxRecordSize = MAX_LOG_RECORDS_COUNT;
  }

  patchLogger(logger);
  return [logger, usingGlobalLog];
}

function getLogger(prefix = null) {
  let _getLogger2 = _getLogger(),
      _getLogger3 = (0, _slicedToArray2.default)(_getLogger2, 2),
      logger = _getLogger3[0],
      usingGlobalLog = _getLogger3[1];

  let wrappedLogger = {
    unwrap: () => logger
  };
  Object.defineProperty(wrappedLogger, 'level', {
    get: () => {
      return logger.level;
    },
    set: newValue => {
      logger.level = newValue;
    },
    enumerable: true,
    configurable: true
  });

  const unleakIfString = x => _lodash.default.isString(x) ? ` ${x}`.substr(1) : x;

  for (var _i2 = 0; _i2 < NPM_LEVELS.length; _i2++) {
    const level = NPM_LEVELS[_i2];

    wrappedLogger[level] = function (...args) {
      const actualPrefix = _lodash.default.isFunction(prefix) ? prefix() : prefix;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = args.map(unleakIfString)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          const arg = _step.value;
          let out = arg + '';

          if (_lodash.default.isError(arg) && arg.stack) {
            out = arg.stack;
          }

          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = out.split('\n')[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              const line = _step2.value;
              logger[level](actualPrefix, line);
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    };
  }

  wrappedLogger.errorAndThrow = function (err) {
    if (!(err instanceof Error)) {
      err = new Error(err);
    }

    this.error(unleakIfString(err));
    throw err;
  };

  if (!usingGlobalLog) {
    wrappedLogger.level = 'verbose';
  }

  wrappedLogger.levels = NPM_LEVELS;
  return wrappedLogger;
}

const log = getLogger();
exports.log = log;
var _default = log;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
