"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parsePlistFile = parsePlistFile;
exports.updatePlistFile = updatePlistFile;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _plist = _interopRequireDefault(require("plist"));

var _bplistCreator = _interopRequireDefault(require("bplist-creator"));

var _bplistParser = _interopRequireDefault(require("bplist-parser"));

var _fs = _interopRequireDefault(require("./fs"));

var _logger = _interopRequireDefault(require("./logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

let parseFile = _bluebird.default.promisify(_bplistParser.default.parseFile);

function parseXmlPlistFile(_x) {
  return _parseXmlPlistFile.apply(this, arguments);
}

function _parseXmlPlistFile() {
  _parseXmlPlistFile = (0, _asyncToGenerator2.default)(function* (plistFilename) {
    let xmlContent = yield _fs.default.readFile(plistFilename, 'utf8');
    return _plist.default.parse(xmlContent);
  });
  return _parseXmlPlistFile.apply(this, arguments);
}

function parsePlistFile(_x2) {
  return _parsePlistFile.apply(this, arguments);
}

function _parsePlistFile() {
  _parsePlistFile = (0, _asyncToGenerator2.default)(function* (plist, mustExist = true, quiet = true) {
    if (!(yield _fs.default.exists(plist))) {
      if (mustExist) {
        _logger.default.errorAndThrow(`Plist file doesn't exist: '${plist}'`);
      } else {
        _logger.default.debug(`Plist file '${plist}' does not exist. Returning an empty plist.`);

        return {};
      }
    }

    let obj = {};
    let type = 'binary';

    try {
      obj = yield parseFile(plist);

      if (obj.length) {
        obj = obj[0];
      } else {
        throw new Error(`Binary file '${plist}'' appears to be empty`);
      }
    } catch (ign) {
      try {
        obj = yield parseXmlPlistFile(plist);
        type = 'xml';
      } catch (err) {
        _logger.default.errorAndThrow(`Could not parse plist file '${plist}' as XML: ${err.message}`);
      }
    }

    if (!quiet) {
      _logger.default.debug(`Parsed plist file '${plist}' as ${type}`);
    }

    return obj;
  });
  return _parsePlistFile.apply(this, arguments);
}

function updatePlistFile(_x3, _x4) {
  return _updatePlistFile.apply(this, arguments);
}

function _updatePlistFile() {
  _updatePlistFile = (0, _asyncToGenerator2.default)(function* (plist, updatedFields, binary = true, mustExist = true, quiet = true) {
    let obj;

    try {
      obj = yield parsePlistFile(plist, mustExist);
    } catch (err) {
      _logger.default.errorAndThrow(`Could not update plist: ${err.message}`);
    }

    _lodash.default.extend(obj, updatedFields);

    let newPlist = binary ? (0, _bplistCreator.default)(obj) : _plist.default.build(obj);

    try {
      yield _fs.default.writeFile(plist, newPlist);
    } catch (err) {
      _logger.default.errorAndThrow(`Could not save plist: ${err.message}`);
    }

    if (!quiet) {
      _logger.default.debug(`Wrote plist file '${plist}'`);
    }
  });
  return _updatePlistFile.apply(this, arguments);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9wbGlzdC5qcyJdLCJuYW1lcyI6WyJwYXJzZUZpbGUiLCJCIiwicHJvbWlzaWZ5IiwiYnBsaXN0UGFyc2UiLCJwYXJzZVhtbFBsaXN0RmlsZSIsInBsaXN0RmlsZW5hbWUiLCJ4bWxDb250ZW50IiwiZnMiLCJyZWFkRmlsZSIsInhtbHBsaXN0IiwicGFyc2UiLCJwYXJzZVBsaXN0RmlsZSIsInBsaXN0IiwibXVzdEV4aXN0IiwicXVpZXQiLCJleGlzdHMiLCJsb2ciLCJlcnJvckFuZFRocm93IiwiZGVidWciLCJvYmoiLCJ0eXBlIiwibGVuZ3RoIiwiRXJyb3IiLCJpZ24iLCJlcnIiLCJtZXNzYWdlIiwidXBkYXRlUGxpc3RGaWxlIiwidXBkYXRlZEZpZWxkcyIsImJpbmFyeSIsIl8iLCJleHRlbmQiLCJuZXdQbGlzdCIsImJ1aWxkIiwid3JpdGVGaWxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQSxJQUFJQSxTQUFTLEdBQUdDLGtCQUFFQyxTQUFGLENBQVlDLHNCQUFZSCxTQUF4QixDQUFoQjs7U0FHZUksaUI7Ozs7O3VEQUFmLFdBQWtDQyxhQUFsQyxFQUFpRDtBQUMvQyxRQUFJQyxVQUFVLFNBQVNDLFlBQUdDLFFBQUgsQ0FBWUgsYUFBWixFQUEyQixNQUEzQixDQUF2QjtBQUNBLFdBQU9JLGVBQVNDLEtBQVQsQ0FBZUosVUFBZixDQUFQO0FBQ0QsRzs7OztTQUVjSyxjOzs7OztvREFBZixXQUErQkMsS0FBL0IsRUFBc0NDLFNBQVMsR0FBRyxJQUFsRCxFQUF3REMsS0FBSyxHQUFHLElBQWhFLEVBQXNFO0FBRXBFLFFBQUksUUFBT1AsWUFBR1EsTUFBSCxDQUFVSCxLQUFWLENBQVAsQ0FBSixFQUE2QjtBQUMzQixVQUFJQyxTQUFKLEVBQWU7QUFDYkcsd0JBQUlDLGFBQUosQ0FBbUIsOEJBQTZCTCxLQUFNLEdBQXREO0FBQ0QsT0FGRCxNQUVPO0FBQ0xJLHdCQUFJRSxLQUFKLENBQVcsZUFBY04sS0FBTSw2Q0FBL0I7O0FBQ0EsZUFBTyxFQUFQO0FBQ0Q7QUFDRjs7QUFFRCxRQUFJTyxHQUFHLEdBQUcsRUFBVjtBQUNBLFFBQUlDLElBQUksR0FBRyxRQUFYOztBQUNBLFFBQUk7QUFDRkQsTUFBQUEsR0FBRyxTQUFTbkIsU0FBUyxDQUFDWSxLQUFELENBQXJCOztBQUNBLFVBQUlPLEdBQUcsQ0FBQ0UsTUFBUixFQUFnQjtBQUNkRixRQUFBQSxHQUFHLEdBQUdBLEdBQUcsQ0FBQyxDQUFELENBQVQ7QUFDRCxPQUZELE1BRU87QUFDTCxjQUFNLElBQUlHLEtBQUosQ0FBVyxnQkFBZVYsS0FBTSx3QkFBaEMsQ0FBTjtBQUNEO0FBQ0YsS0FQRCxDQU9FLE9BQU9XLEdBQVAsRUFBWTtBQUNaLFVBQUk7QUFDRkosUUFBQUEsR0FBRyxTQUFTZixpQkFBaUIsQ0FBQ1EsS0FBRCxDQUE3QjtBQUNBUSxRQUFBQSxJQUFJLEdBQUcsS0FBUDtBQUNELE9BSEQsQ0FHRSxPQUFPSSxHQUFQLEVBQVk7QUFDWlIsd0JBQUlDLGFBQUosQ0FBbUIsK0JBQThCTCxLQUFNLGFBQVlZLEdBQUcsQ0FBQ0MsT0FBUSxFQUEvRTtBQUNEO0FBQ0Y7O0FBRUQsUUFBSSxDQUFDWCxLQUFMLEVBQVk7QUFDVkUsc0JBQUlFLEtBQUosQ0FBVyxzQkFBcUJOLEtBQU0sUUFBT1EsSUFBSyxFQUFsRDtBQUNEOztBQUNELFdBQU9ELEdBQVA7QUFDRCxHOzs7O1NBRWNPLGU7Ozs7O3FEQUFmLFdBQWdDZCxLQUFoQyxFQUF1Q2UsYUFBdkMsRUFBc0RDLE1BQU0sR0FBRyxJQUEvRCxFQUFxRWYsU0FBUyxHQUFHLElBQWpGLEVBQXVGQyxLQUFLLEdBQUcsSUFBL0YsRUFBcUc7QUFDbkcsUUFBSUssR0FBSjs7QUFDQSxRQUFJO0FBQ0ZBLE1BQUFBLEdBQUcsU0FBU1IsY0FBYyxDQUFDQyxLQUFELEVBQVFDLFNBQVIsQ0FBMUI7QUFDRCxLQUZELENBRUUsT0FBT1csR0FBUCxFQUFZO0FBQ1pSLHNCQUFJQyxhQUFKLENBQW1CLDJCQUEwQk8sR0FBRyxDQUFDQyxPQUFRLEVBQXpEO0FBQ0Q7O0FBQ0RJLG9CQUFFQyxNQUFGLENBQVNYLEdBQVQsRUFBY1EsYUFBZDs7QUFDQSxRQUFJSSxRQUFRLEdBQUdILE1BQU0sR0FBRyw0QkFBYVQsR0FBYixDQUFILEdBQXVCVixlQUFTdUIsS0FBVCxDQUFlYixHQUFmLENBQTVDOztBQUNBLFFBQUk7QUFDRixZQUFNWixZQUFHMEIsU0FBSCxDQUFhckIsS0FBYixFQUFvQm1CLFFBQXBCLENBQU47QUFDRCxLQUZELENBRUUsT0FBT1AsR0FBUCxFQUFZO0FBQ1pSLHNCQUFJQyxhQUFKLENBQW1CLHlCQUF3Qk8sR0FBRyxDQUFDQyxPQUFRLEVBQXZEO0FBQ0Q7O0FBQ0QsUUFBSSxDQUFDWCxLQUFMLEVBQVk7QUFDVkUsc0JBQUlFLEtBQUosQ0FBVyxxQkFBb0JOLEtBQU0sR0FBckM7QUFDRDtBQUNGLEciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeG1scGxpc3QgZnJvbSAncGxpc3QnO1xuaW1wb3J0IGJwbGlzdENyZWF0ZSBmcm9tICdicGxpc3QtY3JlYXRvcic7XG5pbXBvcnQgYnBsaXN0UGFyc2UgZnJvbSAnYnBsaXN0LXBhcnNlcic7XG5pbXBvcnQgZnMgZnJvbSAnLi9mcyc7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5cblxubGV0IHBhcnNlRmlsZSA9IEIucHJvbWlzaWZ5KGJwbGlzdFBhcnNlLnBhcnNlRmlsZSk7XG5cbi8vIFhNTCBQbGlzdCBsaWJyYXJ5IGhlbHBlclxuYXN5bmMgZnVuY3Rpb24gcGFyc2VYbWxQbGlzdEZpbGUgKHBsaXN0RmlsZW5hbWUpIHtcbiAgbGV0IHhtbENvbnRlbnQgPSBhd2FpdCBmcy5yZWFkRmlsZShwbGlzdEZpbGVuYW1lLCAndXRmOCcpO1xuICByZXR1cm4geG1scGxpc3QucGFyc2UoeG1sQ29udGVudCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHBhcnNlUGxpc3RGaWxlIChwbGlzdCwgbXVzdEV4aXN0ID0gdHJ1ZSwgcXVpZXQgPSB0cnVlKSB7XG4gIC8vIGhhbmRsZSBub25leGlzdGFudCBmaWxlXG4gIGlmICghYXdhaXQgZnMuZXhpc3RzKHBsaXN0KSkge1xuICAgIGlmIChtdXN0RXhpc3QpIHtcbiAgICAgIGxvZy5lcnJvckFuZFRocm93KGBQbGlzdCBmaWxlIGRvZXNuJ3QgZXhpc3Q6ICcke3BsaXN0fSdgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nLmRlYnVnKGBQbGlzdCBmaWxlICcke3BsaXN0fScgZG9lcyBub3QgZXhpc3QuIFJldHVybmluZyBhbiBlbXB0eSBwbGlzdC5gKTtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gIH1cblxuICBsZXQgb2JqID0ge307XG4gIGxldCB0eXBlID0gJ2JpbmFyeSc7XG4gIHRyeSB7XG4gICAgb2JqID0gYXdhaXQgcGFyc2VGaWxlKHBsaXN0KTtcbiAgICBpZiAob2JqLmxlbmd0aCkge1xuICAgICAgb2JqID0gb2JqWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEJpbmFyeSBmaWxlICcke3BsaXN0fScnIGFwcGVhcnMgdG8gYmUgZW1wdHlgKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGlnbikge1xuICAgIHRyeSB7XG4gICAgICBvYmogPSBhd2FpdCBwYXJzZVhtbFBsaXN0RmlsZShwbGlzdCk7XG4gICAgICB0eXBlID0gJ3htbCc7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBsb2cuZXJyb3JBbmRUaHJvdyhgQ291bGQgbm90IHBhcnNlIHBsaXN0IGZpbGUgJyR7cGxpc3R9JyBhcyBYTUw6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFxdWlldCkge1xuICAgIGxvZy5kZWJ1ZyhgUGFyc2VkIHBsaXN0IGZpbGUgJyR7cGxpc3R9JyBhcyAke3R5cGV9YCk7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuYXN5bmMgZnVuY3Rpb24gdXBkYXRlUGxpc3RGaWxlIChwbGlzdCwgdXBkYXRlZEZpZWxkcywgYmluYXJ5ID0gdHJ1ZSwgbXVzdEV4aXN0ID0gdHJ1ZSwgcXVpZXQgPSB0cnVlKSB7XG4gIGxldCBvYmo7XG4gIHRyeSB7XG4gICAgb2JqID0gYXdhaXQgcGFyc2VQbGlzdEZpbGUocGxpc3QsIG11c3RFeGlzdCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBDb3VsZCBub3QgdXBkYXRlIHBsaXN0OiAke2Vyci5tZXNzYWdlfWApO1xuICB9XG4gIF8uZXh0ZW5kKG9iaiwgdXBkYXRlZEZpZWxkcyk7XG4gIGxldCBuZXdQbGlzdCA9IGJpbmFyeSA/IGJwbGlzdENyZWF0ZShvYmopIDogeG1scGxpc3QuYnVpbGQob2JqKTtcbiAgdHJ5IHtcbiAgICBhd2FpdCBmcy53cml0ZUZpbGUocGxpc3QsIG5ld1BsaXN0KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coYENvdWxkIG5vdCBzYXZlIHBsaXN0OiAke2Vyci5tZXNzYWdlfWApO1xuICB9XG4gIGlmICghcXVpZXQpIHtcbiAgICBsb2cuZGVidWcoYFdyb3RlIHBsaXN0IGZpbGUgJyR7cGxpc3R9J2ApO1xuICB9XG59XG5cbmV4cG9ydCB7IHBhcnNlUGxpc3RGaWxlLCB1cGRhdGVQbGlzdEZpbGUgfTtcbiJdLCJmaWxlIjoibGliL3BsaXN0LmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
