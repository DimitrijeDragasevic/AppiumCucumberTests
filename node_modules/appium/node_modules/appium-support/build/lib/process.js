"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getProcessIds = getProcessIds;
exports.killProcess = killProcess;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _teen_process = require("teen_process");

function getProcessIds(_x) {
  return _getProcessIds.apply(this, arguments);
}

function _getProcessIds() {
  _getProcessIds = (0, _asyncToGenerator2.default)(function* (appName) {
    let pids;

    try {
      let _ref = yield (0, _teen_process.exec)('pgrep', ['-x', appName]),
          stdout = _ref.stdout;

      pids = stdout.trim().split('\n').map(pid => parseInt(pid, 10));
    } catch (err) {
      if (parseInt(err.code, 10) !== 1) {
        throw new Error(`Error getting process ids for app '${appName}': ${err.message}`);
      }

      pids = [];
    }

    return pids;
  });
  return _getProcessIds.apply(this, arguments);
}

function killProcess(_x2) {
  return _killProcess.apply(this, arguments);
}

function _killProcess() {
  _killProcess = (0, _asyncToGenerator2.default)(function* (appName, force = false) {
    let pids = yield getProcessIds(appName);

    if (pids.length === 0) {
      return;
    }

    try {
      let args = force ? ['-9'] : [];
      args.push('-x', appName);
      yield (0, _teen_process.exec)('pkill', args);
    } catch (err) {
      if (parseInt(err.code, 10) !== 1) {
        throw new Error(`Error killing app '${appName}' with pkill: ${err.message}`);
      }
    }
  });
  return _killProcess.apply(this, arguments);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9wcm9jZXNzLmpzIl0sIm5hbWVzIjpbImdldFByb2Nlc3NJZHMiLCJhcHBOYW1lIiwicGlkcyIsInN0ZG91dCIsInRyaW0iLCJzcGxpdCIsIm1hcCIsInBpZCIsInBhcnNlSW50IiwiZXJyIiwiY29kZSIsIkVycm9yIiwibWVzc2FnZSIsImtpbGxQcm9jZXNzIiwiZm9yY2UiLCJsZW5ndGgiLCJhcmdzIiwicHVzaCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7O1NBV2VBLGE7Ozs7O21EQUFmLFdBQThCQyxPQUE5QixFQUF1QztBQUNyQyxRQUFJQyxJQUFKOztBQUNBLFFBQUk7QUFBQSx1QkFDbUIsd0JBQUssT0FBTCxFQUFjLENBQUMsSUFBRCxFQUFPRCxPQUFQLENBQWQsQ0FEbkI7QUFBQSxVQUNHRSxNQURILFFBQ0dBLE1BREg7O0FBRUZELE1BQUFBLElBQUksR0FBR0MsTUFBTSxDQUFDQyxJQUFQLEdBQWNDLEtBQWQsQ0FBb0IsSUFBcEIsRUFBMEJDLEdBQTFCLENBQStCQyxHQUFELElBQVNDLFFBQVEsQ0FBQ0QsR0FBRCxFQUFNLEVBQU4sQ0FBL0MsQ0FBUDtBQUNELEtBSEQsQ0FHRSxPQUFPRSxHQUFQLEVBQVk7QUFDWixVQUFJRCxRQUFRLENBQUNDLEdBQUcsQ0FBQ0MsSUFBTCxFQUFXLEVBQVgsQ0FBUixLQUEyQixDQUEvQixFQUFrQztBQUNoQyxjQUFNLElBQUlDLEtBQUosQ0FBVyxzQ0FBcUNWLE9BQVEsTUFBS1EsR0FBRyxDQUFDRyxPQUFRLEVBQXpFLENBQU47QUFDRDs7QUFDRFYsTUFBQUEsSUFBSSxHQUFHLEVBQVA7QUFDRDs7QUFDRCxXQUFPQSxJQUFQO0FBQ0QsRzs7OztTQUVjVyxXOzs7OztpREFBZixXQUE0QlosT0FBNUIsRUFBcUNhLEtBQUssR0FBRyxLQUE3QyxFQUFvRDtBQUNsRCxRQUFJWixJQUFJLFNBQVNGLGFBQWEsQ0FBQ0MsT0FBRCxDQUE5Qjs7QUFDQSxRQUFJQyxJQUFJLENBQUNhLE1BQUwsS0FBZ0IsQ0FBcEIsRUFBdUI7QUFFckI7QUFDRDs7QUFFRCxRQUFJO0FBQ0YsVUFBSUMsSUFBSSxHQUFHRixLQUFLLEdBQUcsQ0FBQyxJQUFELENBQUgsR0FBWSxFQUE1QjtBQUNBRSxNQUFBQSxJQUFJLENBQUNDLElBQUwsQ0FBVSxJQUFWLEVBQWdCaEIsT0FBaEI7QUFDQSxZQUFNLHdCQUFLLE9BQUwsRUFBY2UsSUFBZCxDQUFOO0FBQ0QsS0FKRCxDQUlFLE9BQU9QLEdBQVAsRUFBWTtBQUNaLFVBQUlELFFBQVEsQ0FBQ0MsR0FBRyxDQUFDQyxJQUFMLEVBQVcsRUFBWCxDQUFSLEtBQTJCLENBQS9CLEVBQWtDO0FBQ2hDLGNBQU0sSUFBSUMsS0FBSixDQUFXLHNCQUFxQlYsT0FBUSxpQkFBZ0JRLEdBQUcsQ0FBQ0csT0FBUSxFQUFwRSxDQUFOO0FBQ0Q7QUFDRjtBQUNGLEciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleGVjIH0gZnJvbSAndGVlbl9wcm9jZXNzJztcblxuXG4vKlxuICogRXhpdCBTdGF0dXMgZm9yIHBncmVwIGFuZCBwa2lsbCAoYG1hbiBwa2lsbGApXG4gKiAgMC4gT25lIG9yIG1vcmUgcHJvY2Vzc2VzIG1hdGNoZWQgdGhlIGNyaXRlcmlhLlxuICogIDEuIE5vIHByb2Nlc3NlcyBtYXRjaGVkLlxuICogIDIuIFN5bnRheCBlcnJvciBpbiB0aGUgY29tbWFuZCBsaW5lLlxuICogIDMuIEZhdGFsIGVycm9yOiBvdXQgb2YgbWVtb3J5IGV0Yy5cbiAqL1xuXG5hc3luYyBmdW5jdGlvbiBnZXRQcm9jZXNzSWRzIChhcHBOYW1lKSB7XG4gIGxldCBwaWRzO1xuICB0cnkge1xuICAgIGxldCB7c3Rkb3V0fSA9IGF3YWl0IGV4ZWMoJ3BncmVwJywgWycteCcsIGFwcE5hbWVdKTtcbiAgICBwaWRzID0gc3Rkb3V0LnRyaW0oKS5zcGxpdCgnXFxuJykubWFwKChwaWQpID0+IHBhcnNlSW50KHBpZCwgMTApKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKHBhcnNlSW50KGVyci5jb2RlLCAxMCkgIT09IDEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IgZ2V0dGluZyBwcm9jZXNzIGlkcyBmb3IgYXBwICcke2FwcE5hbWV9JzogJHtlcnIubWVzc2FnZX1gKTtcbiAgICB9XG4gICAgcGlkcyA9IFtdO1xuICB9XG4gIHJldHVybiBwaWRzO1xufVxuXG5hc3luYyBmdW5jdGlvbiBraWxsUHJvY2VzcyAoYXBwTmFtZSwgZm9yY2UgPSBmYWxzZSkge1xuICBsZXQgcGlkcyA9IGF3YWl0IGdldFByb2Nlc3NJZHMoYXBwTmFtZSk7XG4gIGlmIChwaWRzLmxlbmd0aCA9PT0gMCkge1xuICAgIC8vIHRoZSBwcm9jZXNzIGlzIG5vdCBydW5uaW5nXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsZXQgYXJncyA9IGZvcmNlID8gWyctOSddIDogW107XG4gICAgYXJncy5wdXNoKCcteCcsIGFwcE5hbWUpO1xuICAgIGF3YWl0IGV4ZWMoJ3BraWxsJywgYXJncyk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChwYXJzZUludChlcnIuY29kZSwgMTApICE9PSAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yIGtpbGxpbmcgYXBwICcke2FwcE5hbWV9JyB3aXRoIHBraWxsOiAke2Vyci5tZXNzYWdlfWApO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgeyBnZXRQcm9jZXNzSWRzLCBraWxsUHJvY2VzcyB9O1xuIl0sImZpbGUiOiJsaWIvcHJvY2Vzcy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
