"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.fs = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _fs2 = _interopRequireDefault(require("fs"));

var _rimraf = _interopRequireDefault(require("rimraf"));

var _md5File = _interopRequireDefault(require("md5-file"));

var _ncp = _interopRequireDefault(require("ncp"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _mv = _interopRequireDefault(require("mv"));

var _which = _interopRequireDefault(require("which"));

var _glob = _interopRequireDefault(require("glob"));

var _crypto = _interopRequireDefault(require("crypto"));

const md5 = _bluebird.default.promisify(_md5File.default);

let fs = {
  hasAccess(path) {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      try {
        yield _this.access(path, _fs2.default.R_OK);
      } catch (err) {
        return false;
      }

      return true;
    })();
  },

  exists(path) {
    return this.hasAccess(path);
  },

  rimraf: _bluebird.default.promisify(_rimraf.default),

  mkdir(dirName) {
    return (0, _asyncToGenerator2.default)(function* () {
      let _mkdir = _bluebird.default.promisify(_fs2.default.mkdir);

      try {
        yield _mkdir(dirName);
      } catch (err) {
        if (err && err.code !== 'EEXIST') {
          throw err;
        }
      }
    })();
  },

  copyFile(source, destination, ...otherArgs) {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (!(yield _this2.hasAccess(source))) {
        throw new Error(`The file at '${source}' does not exist or is not accessible`);
      }

      return yield _bluebird.default.promisify(_ncp.default)(source, destination, ...otherArgs);
    })();
  },

  md5(filePath) {
    return (0, _asyncToGenerator2.default)(function* () {
      return yield md5(filePath);
    })();
  },

  mv: _bluebird.default.promisify(_mv.default),
  which: _bluebird.default.promisify(_which.default),
  glob: _bluebird.default.promisify(_glob.default),

  hash(filePath, algorithm = 'sha1') {
    return (0, _asyncToGenerator2.default)(function* () {
      return yield new _bluebird.default((resolve, reject) => {
        const fileHash = _crypto.default.createHash(algorithm);

        const readStream = _fs2.default.createReadStream(filePath);

        readStream.on('error', e => reject(new Error(`Cannot calculate ${algorithm} hash for '${filePath}'. Original error: ${e.message}`)));
        readStream.on('data', chunk => fileHash.update(chunk));
        readStream.on('end', () => resolve(fileHash.digest('hex')));
      });
    })();
  }

};
exports.fs = fs;
const simples = ['open', 'close', 'access', 'readFile', 'writeFile', 'write', 'read', 'readlink', 'chmod', 'unlink', 'readdir', 'stat', 'rename', 'lstat'];

for (var _i = 0; _i < simples.length; _i++) {
  const s = simples[_i];
  fs[s] = _bluebird.default.promisify(_fs2.default[s]);
}

const constants = ['F_OK', 'R_OK', 'W_OK', 'X_OK', 'constants'];

for (var _i2 = 0; _i2 < constants.length; _i2++) {
  const c = constants[_i2];
  fs[c] = _fs2.default[c];
}

var _default = fs;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9mcy5qcyJdLCJuYW1lcyI6WyJtZDUiLCJCIiwicHJvbWlzaWZ5IiwibWQ1ZmlsZSIsImZzIiwiaGFzQWNjZXNzIiwicGF0aCIsImFjY2VzcyIsIl9mcyIsIlJfT0siLCJlcnIiLCJleGlzdHMiLCJyaW1yYWYiLCJta2RpciIsImRpck5hbWUiLCJfbWtkaXIiLCJjb2RlIiwiY29weUZpbGUiLCJzb3VyY2UiLCJkZXN0aW5hdGlvbiIsIm90aGVyQXJncyIsIkVycm9yIiwibmNwIiwiZmlsZVBhdGgiLCJtdiIsIndoaWNoIiwiZ2xvYiIsImhhc2giLCJhbGdvcml0aG0iLCJyZXNvbHZlIiwicmVqZWN0IiwiZmlsZUhhc2giLCJjcnlwdG8iLCJjcmVhdGVIYXNoIiwicmVhZFN0cmVhbSIsImNyZWF0ZVJlYWRTdHJlYW0iLCJvbiIsImUiLCJtZXNzYWdlIiwiY2h1bmsiLCJ1cGRhdGUiLCJkaWdlc3QiLCJzaW1wbGVzIiwicyIsImNvbnN0YW50cyIsImMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0EsTUFBTUEsR0FBRyxHQUFHQyxrQkFBRUMsU0FBRixDQUFZQyxnQkFBWixDQUFaOztBQUVBLElBQUlDLEVBQUUsR0FBRztBQUNEQyxFQUFBQSxTQUFOLENBQWlCQyxJQUFqQixFQUF1QjtBQUFBOztBQUFBO0FBQ3JCLFVBQUk7QUFDRixjQUFNLEtBQUksQ0FBQ0MsTUFBTCxDQUFZRCxJQUFaLEVBQWtCRSxhQUFJQyxJQUF0QixDQUFOO0FBQ0QsT0FGRCxDQUVFLE9BQU9DLEdBQVAsRUFBWTtBQUNaLGVBQU8sS0FBUDtBQUNEOztBQUNELGFBQU8sSUFBUDtBQU5xQjtBQU90QixHQVJNOztBQVNQQyxFQUFBQSxNQUFNLENBQUVMLElBQUYsRUFBUTtBQUFFLFdBQU8sS0FBS0QsU0FBTCxDQUFlQyxJQUFmLENBQVA7QUFBOEIsR0FUdkM7O0FBVVBNLEVBQUFB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SW1DLENBQUosQ0FBWixDQUFSO0FBQ0Q7O0FBR0QsTUFBTUMsU0FBUyxHQUFHLENBQ2hCLE1BRGdCLEVBQ1IsTUFEUSxFQUNBLE1BREEsRUFDUSxNQURSLEVBQ2dCLFdBRGhCLENBQWxCOztBQUdBLHdCQUFnQkEsU0FBaEIsZ0JBQTJCO0FBQXRCLFFBQU1DLENBQUMsR0FBSUQsU0FBSixLQUFQO0FBQ0h4QyxFQUFBQSxFQUFFLENBQUN5QyxDQUFELENBQUYsR0FBUXJDLGFBQUlxQyxDQUFKLENBQVI7QUFDRDs7ZUFHY3pDLEUiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBqc2hpbnQgaWdub3JlOiBzdGFydFxuaW1wb3J0IF9mcyBmcm9tICdmcyc7XG5pbXBvcnQgcmltcmFmIGZyb20gJ3JpbXJhZic7XG5pbXBvcnQgbWQ1ZmlsZSBmcm9tICdtZDUtZmlsZSc7XG5pbXBvcnQgbmNwIGZyb20gJ25jcCc7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgbXYgZnJvbSAnbXYnO1xuaW1wb3J0IHdoaWNoIGZyb20gJ3doaWNoJztcbmltcG9ydCBnbG9iIGZyb20gJ2dsb2InO1xuaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8nO1xuXG5cbmNvbnN0IG1kNSA9IEIucHJvbWlzaWZ5KG1kNWZpbGUpO1xuXG5sZXQgZnMgPSB7XG4gIGFzeW5jIGhhc0FjY2VzcyAocGF0aCkge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLmFjY2VzcyhwYXRoLCBfZnMuUl9PSyk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBleGlzdHMgKHBhdGgpIHsgcmV0dXJuIHRoaXMuaGFzQWNjZXNzKHBhdGgpOyB9LFxuICByaW1yYWY6IEIucHJvbWlzaWZ5KHJpbXJhZiksXG4gIGFzeW5jIG1rZGlyIChkaXJOYW1lKSB7XG4gICAgbGV0IF9ta2RpciA9IEIucHJvbWlzaWZ5KF9mcy5ta2Rpcik7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IF9ta2RpcihkaXJOYW1lKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGlmIChlcnIgJiYgZXJyLmNvZGUgIT09ICdFRVhJU1QnKSB7XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGFzeW5jIGNvcHlGaWxlIChzb3VyY2UsIGRlc3RpbmF0aW9uLCAuLi5vdGhlckFyZ3MpIHtcbiAgICBpZiAoIWF3YWl0IHRoaXMuaGFzQWNjZXNzKHNvdXJjZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIGZpbGUgYXQgJyR7c291cmNlfScgZG9lcyBub3QgZXhpc3Qgb3IgaXMgbm90IGFjY2Vzc2libGVgKTtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IChCLnByb21pc2lmeShuY3ApKShzb3VyY2UsIGRlc3RpbmF0aW9uLCAuLi5vdGhlckFyZ3MpO1xuICB9LFxuICBhc3luYyBtZDUgKGZpbGVQYXRoKSB7XG4gICAgcmV0dXJuIGF3YWl0IG1kNShmaWxlUGF0aCk7XG4gIH0sXG4gIG12OiBCLnByb21pc2lmeShtdiksXG4gIHdoaWNoOiBCLnByb21pc2lmeSh3aGljaCksXG4gIGdsb2I6IEIucHJvbWlzaWZ5KGdsb2IpLFxuICBhc3luYyBoYXNoIChmaWxlUGF0aCwgYWxnb3JpdGhtID0gJ3NoYTEnKSB7XG4gICAgcmV0dXJuIGF3YWl0IG5ldyBCKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IGZpbGVIYXNoID0gY3J5cHRvLmNyZWF0ZUhhc2goYWxnb3JpdGhtKTtcbiAgICAgIGNvbnN0IHJlYWRTdHJlYW0gPSBfZnMuY3JlYXRlUmVhZFN0cmVhbShmaWxlUGF0aCk7XG4gICAgICByZWFkU3RyZWFtLm9uKCdlcnJvcicsIChlKSA9PiByZWplY3QoXG4gICAgICAgIG5ldyBFcnJvcihgQ2Fubm90IGNhbGN1bGF0ZSAke2FsZ29yaXRobX0gaGFzaCBmb3IgJyR7ZmlsZVBhdGh9Jy4gT3JpZ2luYWwgZXJyb3I6ICR7ZS5tZXNzYWdlfWApKSk7XG4gICAgICByZWFkU3RyZWFtLm9uKCdkYXRhJywgKGNodW5rKSA9PiBmaWxlSGFzaC51cGRhdGUoY2h1bmspKTtcbiAgICAgIHJlYWRTdHJlYW0ub24oJ2VuZCcsICgpID0+IHJlc29sdmUoZmlsZUhhc2guZGlnZXN0KCdoZXgnKSkpO1xuICAgIH0pO1xuICB9LFxufTtcblxuLy8gYWRkIHRoZSBzdXBwb3J0ZWQgYGZzYCBmdW5jdGlvbnNcbmNvbnN0IHNpbXBsZXMgPSBbXG4gICdvcGVuJywgJ2Nsb3NlJywgJ2FjY2VzcycsICdyZWFkRmlsZScsICd3cml0ZUZpbGUnLCAnd3JpdGUnLCAncmVhZCcsXG4gICdyZWFkbGluaycsICdjaG1vZCcsICd1bmxpbmsnLCAncmVhZGRpcicsICdzdGF0JywgJ3JlbmFtZScsICdsc3RhdCcsXG5dO1xuZm9yIChjb25zdCBzIG9mIHNpbXBsZXMpIHtcbiAgZnNbc10gPSBCLnByb21pc2lmeShfZnNbc10pO1xufVxuXG4vLyBhZGQgdGhlIGNvbnN0YW50cyBmcm9tIGBmc2BcbmNvbnN0IGNvbnN0YW50cyA9IFtcbiAgJ0ZfT0snLCAnUl9PSycsICdXX09LJywgJ1hfT0snLCAnY29uc3RhbnRzJyxcbl07XG5mb3IgKGNvbnN0IGMgb2YgY29uc3RhbnRzKSB7XG4gIGZzW2NdID0gX2ZzW2NdO1xufVxuXG5leHBvcnQgeyBmcyB9O1xuZXhwb3J0IGRlZmF1bHQgZnM7XG4iXSwiZmlsZSI6ImxpYi9mcy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
