"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.routeConfiguringFunction = routeConfiguringFunction;
exports.isSessionCommand = isSessionCommand;
exports.driverShouldDoJwpProxy = driverShouldDoJwpProxy;
exports.IMAGE_ELEMENT_PREFIX = exports.W3C_ELEMENT_KEY = exports.MJSONWP_ELEMENT_KEY = exports.Protocol = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _validators = require("./validators");

var _errors = require("./errors");

var _routes = require("./routes");

var _helpers = require("../basedriver/helpers");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _driver = _interopRequireDefault(require("../basedriver/driver"));

var _lruCache = _interopRequireDefault(require("lru-cache"));

const GENERIC_PROTOCOL = 'GENERIC';

const mjsonwpLog = _appiumSupport.logger.getLogger('MJSONWP');

const w3cLog = _appiumSupport.logger.getLogger('W3C');

const genericProtocolLog = _appiumSupport.logger.getLogger(GENERIC_PROTOCOL);

const JSONWP_SUCCESS_STATUS_CODE = 0;
const LOG_OBJ_LENGTH = 1024;
const MJSONWP_ELEMENT_KEY = 'ELEMENT';
exports.MJSONWP_ELEMENT_KEY = MJSONWP_ELEMENT_KEY;
const W3C_ELEMENT_KEY = 'element-6066-11e4-a52e-4f735466cecf';
exports.W3C_ELEMENT_KEY = W3C_ELEMENT_KEY;
const IMAGE_ELEMENT_PREFIX = 'appium-image-element-';
exports.IMAGE_ELEMENT_PREFIX = IMAGE_ELEMENT_PREFIX;
const CREATE_SESSION_COMMAND = 'createSession';
const DELETE_SESSION_COMMAND = 'deleteSession';
const IMG_EL_BODY_RE = new RegExp(`"(${W3C_ELEMENT_KEY}|${MJSONWP_ELEMENT_KEY})":\s*` + `"${IMAGE_ELEMENT_PREFIX}[^"]+"`);
const IMG_EL_URL_RE = new RegExp(`/(element|screenshot)` + `/${IMAGE_ELEMENT_PREFIX}[^/]+`);

class Protocol {}

exports.Protocol = Protocol;

class SessionsCache {
  constructor(max) {
    this._cache = new _lruCache.default({
      max
    });
  }

  getLogger(sessionId, protocol) {
    if (sessionId) {
      if (this._cache.has(sessionId)) {
        const value = this._cache.get(sessionId);

        if (value.logger) {
          return value.logger;
        }

        protocol = protocol || value.protocol;
      }

      return _appiumSupport.logger.getLogger(`${protocol || GENERIC_PROTOCOL} ` + `(${sessionId.substring(0, Math.min(sessionId.length, 8))})`);
    }

    switch (protocol) {
      case _driver.default.DRIVER_PROTOCOL.W3C:
        return w3cLog;

      case _driver.default.DRIVER_PROTOCOL.MJSONWP:
        return mjsonwpLog;

      default:
        return genericProtocolLog;
    }
  }

  getProtocol(sessionId) {
    return (this._cache.get(sessionId) || {}).protocol;
  }

  putSession(sessionId, value) {
    if (sessionId && value) {
      this._cache.set(sessionId, {
        protocol: value,
        logger: this.getLogger(sessionId, value)
      });
    }

    return value;
  }

  resetLogger(sessionId) {
    if (this._cache.has(sessionId)) {
      this._cache.get(sessionId).logger = null;
    }
  }

}

const SESSIONS_CACHE = new SessionsCache(100);

function extractProtocol(driver, sessionId = null) {
  const dstDriver = _lodash.default.isFunction(driver.driverForSession) ? driver.driverForSession(sessionId) : driver;

  if (dstDriver === driver) {
    return driver.protocol;
  }

  return dstDriver ? dstDriver.protocol : SESSIONS_CACHE.getProtocol(sessionId);
}

function isSessionCommand(command) {
  return !_lodash.default.includes(_routes.NO_SESSION_ID_COMMANDS, command);
}

function wrapParams(paramSets, jsonObj) {
  let res = jsonObj;

  if (_lodash.default.isArray(jsonObj) || !_lodash.default.isObject(jsonObj)) {
    res = {};
    res[paramSets.wrap] = jsonObj;
  }

  return res;
}

function unwrapParams(paramSets, jsonObj) {
  let res = jsonObj;

  if (_lodash.default.isObject(jsonObj)) {
    if (jsonObj[paramSets.unwrap]) {
      res = jsonObj[paramSets.unwrap];
    }
  }

  return res;
}

function checkParams(paramSets, jsonObj, protocol) {
  let requiredParams = [];
  let optionalParams = [];

  let receivedParams = _lodash.default.keys(jsonObj);

  if (paramSets) {
    if (paramSets.required) {
      if (!_lodash.default.isArray(_lodash.default.first(paramSets.required))) {
        requiredParams = [paramSets.required];
      } else {
        requiredParams = paramSets.required;
      }
    }

    if (paramSets.optional) {
      optionalParams = paramSets.optional;
    }

    if (paramSets.validate) {
      let message = paramSets.validate(jsonObj, protocol);

      if (message) {
        throw new _errors.errors.BadParametersError(message, jsonObj);
      }
    }
  }

  if (requiredParams.length === 0) {
    return;
  }

  if (optionalParams.indexOf('sessionId') === -1) {
    optionalParams.push('sessionId');
  }

  if (optionalParams.indexOf('id') === -1) {
    optionalParams.push('id');
  }

  for (let params of requiredParams) {
    if (_lodash.default.difference(receivedParams, params, optionalParams).length === 0 && _lodash.default.difference(params, receivedParams).length === 0) {
      return;
    }
  }

  throw new _errors.errors.BadParametersError(paramSets, receivedParams);
}

function makeArgs(requestParams, jsonObj, payloadParams, protocol) {
  let urlParams = _lodash.default.keys(requestParams).reverse();

  let requiredParams = payloadParams.required;

  if (_lodash.default.isArray(_lodash.default.first(payloadParams.required))) {
    let keys = _lodash.default.keys(jsonObj);

    for (let params of payloadParams.required) {
      if (_lodash.default.without(params, ...keys).length === 0) {
        requiredParams = params;
        break;
      }
    }
  }

  let args;

  if (_lodash.default.isFunction(payloadParams.makeArgs)) {
    args = payloadParams.makeArgs(jsonObj, protocol);
  } else {
    args = _lodash.default.flatten(requiredParams).map(p => jsonObj[p]);

    if (payloadParams.optional) {
      args = args.concat(_lodash.default.flatten(payloadParams.optional).map(p => jsonObj[p]));
    }
  }

  args = args.concat(urlParams.map(u => requestParams[u]));
  return args;
}

function routeConfiguringFunction(driver) {
  if (!driver.sessionExists) {
    throw new Error('Drivers used with MJSONWP must implement `sessionExists`');
  }

  if (!(driver.executeCommand || driver.execute)) {
    throw new Error('Drivers used with MJSONWP must implement `executeCommand` or `execute`');
  }

  return function addRoutes(app) {
    for (const [path, methods] of _lodash.default.toPairs(_routes.METHOD_MAP)) {
      for (const [method, spec] of _lodash.default.toPairs(methods)) {
        buildHandler(app, method, path, spec, driver, isSessionCommand(spec.command));
      }
    }
  };
}

function buildHandler(app, method, path, spec, driver, isSessCmd) {
  let asyncHandler = async (req, res) => {
    let jsonObj = req.body;
    let httpResBody = {};
    let httpStatus = 200;
    let newSessionId;
    let currentProtocol = extractProtocol(driver, req.params.sessionId);

    try {
      if (isSessCmd && !driver.sessionExists(req.params.sessionId)) {
        throw new _errors.errors.NoSuchDriverError();
      }

      if (isSessCmd && driverShouldDoJwpProxy(driver, req, spec.command)) {
        await doJwpProxy(driver, req, res);
        return;
      }

      if (!spec.command) {
        throw new _errors.errors.NotImplementedError();
      }

      if (spec.payloadParams && spec.payloadParams.wrap) {
        jsonObj = wrapParams(spec.payloadParams, jsonObj);
      }

      if (spec.payloadParams && spec.payloadParams.unwrap) {
        jsonObj = unwrapParams(spec.payloadParams, jsonObj);
      }

      if (spec.command === CREATE_SESSION_COMMAND) {
        currentProtocol = _driver.default.determineProtocol(...makeArgs(req.params, jsonObj, spec.payloadParams || {}));
      }

      checkParams(spec.payloadParams, jsonObj, currentProtocol);
      let args = makeArgs(req.params, jsonObj, spec.payloadParams || {}, currentProtocol);
      let driverRes;

      if (_validators.validators[spec.command]) {
        _validators.validators[spec.command](...args);
      }

      SESSIONS_CACHE.getLogger(req.params.sessionId, currentProtocol).debug(`Calling ` + `${driver.constructor.name}.${spec.command}() with args: ` + _lodash.default.truncate(JSON.stringify(args), {
        length: LOG_OBJ_LENGTH
      }));

      if (driver.executeCommand) {
        driverRes = await driver.executeCommand(spec.command, ...args);
      } else {
        driverRes = await driver.execute(spec.command, ...args);
      }

      currentProtocol = extractProtocol(driver, req.params.sessionId) || currentProtocol;

      if (_lodash.default.isPlainObject(driverRes) && _lodash.default.has(driverRes, 'protocol')) {
        currentProtocol = driverRes.protocol || currentProtocol;

        if (driverRes.error) {
          throw driverRes.error;
        }

        driverRes = driverRes.value;
      }

      if (spec.command === CREATE_SESSION_COMMAND) {
        newSessionId = driverRes[0];
        SESSIONS_CACHE.putSession(newSessionId, currentProtocol);
        SESSIONS_CACHE.getLogger(newSessionId, currentProtocol).debug(`Cached the protocol value '${currentProtocol}' for the new session ${newSessionId}`);

        if (currentProtocol === _driver.default.DRIVER_PROTOCOL.MJSONWP) {
          driverRes = driverRes[1];
        } else if (currentProtocol === _driver.default.DRIVER_PROTOCOL.W3C) {
          driverRes = {
            capabilities: driverRes[1]
          };
        }
      }

      if (driverRes) {
        driverRes = (0, _helpers.duplicateKeys)(driverRes, MJSONWP_ELEMENT_KEY, W3C_ELEMENT_KEY);
      }

      if (_lodash.default.isUndefined(driverRes)) {
        driverRes = null;
      }

      if (spec.command === DELETE_SESSION_COMMAND) {
        SESSIONS_CACHE.getLogger(req.params.sessionId, currentProtocol).debug(`Received response: ${_lodash.default.truncate(JSON.stringify(driverRes), {
          length: LOG_OBJ_LENGTH
        })}`);
        SESSIONS_CACHE.getLogger(req.params.sessionId, currentProtocol).debug('But deleting session, so not returning');
        driverRes = null;
      }

      if (_appiumSupport.util.hasValue(driverRes)) {
        if (_appiumSupport.util.hasValue(driverRes.status) && !isNaN(driverRes.status) && parseInt(driverRes.status, 10) !== 0) {
          throw (0, _errors.errorFromMJSONWPStatusCode)(driverRes.status, driverRes.value);
        } else if (_lodash.default.isPlainObject(driverRes.value) && driverRes.value.error) {
          throw (0, _errors.errorFromW3CJsonCode)(driverRes.value.error, driverRes.value.message, driverRes.value.stacktrace);
        }
      }

      if (currentProtocol !== _driver.default.DRIVER_PROTOCOL.W3C) {
        httpResBody.status = _lodash.default.isNil(driverRes) || _lodash.default.isUndefined(driverRes.status) ? JSONWP_SUCCESS_STATUS_CODE : driverRes.status;
      }

      httpResBody.value = driverRes;
      SESSIONS_CACHE.getLogger(req.params.sessionId || newSessionId, currentProtocol).debug(`Responding ` + `to client with driver.${spec.command}() result: ${_lodash.default.truncate(JSON.stringify(driverRes), {
        length: LOG_OBJ_LENGTH
      })}`);

      if (spec.command === DELETE_SESSION_COMMAND) {
        SESSIONS_CACHE.resetLogger(req.params.sessionId);
      }
    } catch (err) {
      let actualErr = err;
      currentProtocol = currentProtocol || extractProtocol(driver, req.params.sessionId || newSessionId);
      let errMsg = err.stacktrace || err.stack;

      if (!_lodash.default.includes(errMsg, err.message)) {
        errMsg = `${err.message}${errMsg ? '\n' + errMsg : ''}`;
      }

      SESSIONS_CACHE.getLogger(req.params.sessionId || newSessionId, currentProtocol).debug(`Encountered ` + `internal error running command: ${errMsg}`);

      if ((0, _errors.isErrorType)(err, _errors.errors.ProxyRequestError)) {
        actualErr = err.getActualError();
      }

      if (currentProtocol === _driver.default.DRIVER_PROTOCOL.W3C) {
        [httpStatus, httpResBody] = (0, _errors.getResponseForW3CError)(actualErr);
      } else if (currentProtocol === _driver.default.DRIVER_PROTOCOL.MJSONWP) {
        [httpStatus, httpResBody] = (0, _errors.getResponseForJsonwpError)(actualErr);
      } else {
        let jsonwpRes = (0, _errors.getResponseForJsonwpError)(actualErr);
        let w3cRes = (0, _errors.getResponseForW3CError)(actualErr);
        httpResBody = (0, _objectSpread2.default)({}, jsonwpRes[1], w3cRes[1]);
        httpStatus = jsonwpRes[0];
      }
    }

    if (_lodash.default.isString(httpResBody)) {
      res.status(httpStatus).send(httpResBody);
    } else {
      if (newSessionId) {
        if (currentProtocol === _driver.default.DRIVER_PROTOCOL.W3C) {
          httpResBody.value.sessionId = newSessionId;
        } else {
          httpResBody.sessionId = newSessionId;
        }
      } else {
        httpResBody.sessionId = req.params.sessionId || null;
      }

      if (currentProtocol === _driver.default.DRIVER_PROTOCOL.W3C) {
        delete httpResBody.sessionId;
      }

      res.status(httpStatus).json(httpResBody);
    }
  };

  app[method.toLowerCase()](path, (req, res) => {
    _bluebird.default.resolve(asyncHandler(req, res)).done();
  });
}

function driverShouldDoJwpProxy(driver, req, command) {
  if (!driver.proxyActive(req.params.sessionId)) {
    return false;
  }

  if (command === 'deleteSession') {
    return false;
  }

  if (driver.proxyRouteIsAvoided(req.params.sessionId, req.method, req.originalUrl)) {
    return false;
  }

  if (IMG_EL_URL_RE.test(req.originalUrl)) {
    return false;
  }

  const stringBody = JSON.stringify(req.body);

  if (stringBody && IMG_EL_BODY_RE.test(stringBody)) {
    return false;
  }

  return true;
}

async function doJwpProxy(driver, req, res) {
  SESSIONS_CACHE.getLogger(req.params.sessionId, extractProtocol(driver, req.params.sessionId)).info('Driver proxy active, passing request on via HTTP proxy');

  if (!driver.canProxy(req.params.sessionId)) {
    throw new Error('Trying to proxy to a JSONWP server but driver is unable to proxy');
  }

  try {
    const proxiedRes = await driver.executeCommand('proxyReqRes', req, res, req.params.sessionId);
    if (proxiedRes && proxiedRes.error) throw proxiedRes.error;
  } catch (err) {
    if ((0, _errors.isErrorType)(err, _errors.errors.ProxyRequestError)) {
      throw err;
    } else {
      throw new Error(`Could not proxy. Proxy error: ${err.message}`);
    }
  }
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9wcm90b2NvbC9wcm90b2NvbC5qcyJdLCJuYW1lcyI6WyJHRU5FUklDX1BST1RPQ09MIiwibWpzb253cExvZyIsImxvZ2dlciIsImdldExvZ2dlciIsInczY0xvZyIsImdlbmVyaWNQcm90b2NvbExvZyIsIkpTT05XUF9TVUNDRVNTX1NUQVRVU19DT0RFIiwiTE9HX09CSl9MRU5HVEgiLCJNSlNPTldQX0VMRU1FTlRfS0VZIiwiVzNDX0VMRU1FTlRfS0VZIiwiSU1BR0VfRUxFTUVOVF9QUkVGSVgiLCJDUkVBVEVfU0VTU0lPTl9DT01NQU5EIiwiREVMRVRFX1NFU1NJT05fQ09NTUFORCIsIklNR19FTF9CT0RZX1JFIiwiUmVnRXhwIiwiSU1HX0VMX1VSTF9SRSIsIlByb3RvY29sIiwiU2Vzc2lvbnNDYWNoZSIsImNvbnN0cnVjdG9yIiwibWF4IiwiX2NhY2hlIiwiTFJVIiwic2Vzc2lvbklkIiwicHJvdG9jb2wiLCJoYXMiLCJ2YWx1ZSIsImdldCIsInN1YnN0cmluZyIsIk1hdGgiLCJtaW4iLCJsZW5ndGgiLCJCYXNlRHJpdmVyIiwiRFJJVkVSX1BST1RPQ09MIiwiVzNDIiwiTUpTT05XUCIsImdldFByb3RvY29sIiwicHV0U2Vzc2lvbiIsInNldCIsInJlc2V0TG9nZ2VyIiwiU0VTU0lPTlNfQ0FDSEUiLCJleHRyYWN0UHJvdG9jb2wiLCJkcml2ZXIiLCJkc3REcml2ZXIiLCJfIiwiaXNGdW5jdGlvbiIsImRyaXZlckZvclNlc3Npb24iLCJpc1Nlc3Npb25Db21tYW5kIiwiY29tbWFuZCIsImluY2x1ZGVzIiwiTk9fU0VTU0lPTl9JRF9DT01NQU5EUyIsIndyYXBQYXJhbXMiLCJwYXJhbVNldHMiLCJqc29uT2JqIiwicmVzIiwiaXNBcnJheSIsImlzT2JqZWN0Iiwid3JhcCIsInVud3JhcFBhcmFtcyIsInVud3JhcCIsImNoZWNrUGFyYW1zIiwicmVxdWlyZWRQYXJhbXMiLCJvcHRpb25hbFBhcmFtcyIsInJlY2VpdmVkUGFyYW1zIiwia2V5cyIsInJlcXVpcmVkIiwiZmlyc3QiLCJvcHRpb25hbCIsInZhbGlkYXRlIiwibWVzc2FnZSIsImVycm9ycyIsIkJhZFBhcmFtZXRlcnNFcnJvciIsImluZGV4T2YiLCJwdXNoIiwicGFyYW1zIiwiZGlmZmVyZW5jZSIsIm1ha2VBcmdzIiwicmVxdWVzdFBhcmFtcyIsInBheWxvYWRQYXJhbXMiLCJ1cmxQYXJhbXMiLCJyZXZlcnNlIiwid2l0aG91dCIsImFyZ3MiLCJmbGF0dGVuIiwibWFwIiwicCIsImNvbmNhdCIsInUiLCJyb3V0ZUNvbmZpZ3VyaW5nRnVuY3Rpb24iLCJzZXNzaW9uRXhpc3RzIiwiRXJyb3IiLCJleGVjdXRlQ29tbWFuZCIsImV4ZWN1dGUiLCJhZGRSb3V0ZXMiLCJhcHAiLCJwYXRoIiwibWV0aG9kcyIsInRvUGFpcnMiLCJNRVRIT0RfTUFQIiwibWV0aG9kIiwic3BlYyIsImJ1aWxkSGFuZGxlciIsImlzU2Vzc0NtZCIsImFzeW5jSGFuZGxlciIsInJlcSIsImJvZHkiLCJodHRwUmVzQm9keSIsImh0dHBTdGF0dXMiLCJuZXdTZXNzaW9uSWQiLCJjdXJyZW50UHJvdG9jb2wiLCJOb1N1Y2hEcml2ZXJFcnJvciIsImRyaXZlclNob3VsZERvSndwUHJveHkiLCJkb0p3cFByb3h5IiwiTm90SW1wbGVtZW50ZWRFcnJvciIsImRldGVybWluZVByb3RvY29sIiwiZHJpdmVyUmVzIiwidmFsaWRhdG9ycyIsImRlYnVnIiwibmFtZSIsInRydW5jYXRlIiwiSlNPTiIsInN0cmluZ2lmeSIsImlzUGxhaW5PYmplY3QiLCJlcnJvciIsImNhcGFiaWxpdGllcyIsImlzVW5kZWZpbmVkIiwidXRpbCIsImhhc1ZhbHVlIiwic3RhdHVzIiwiaXNOYU4iLCJwYXJzZUludCIsInN0YWNrdHJhY2UiLCJpc05pbCIsImVyciIsImFjdHVhbEVyciIsImVyck1zZyIsInN0YWNrIiwiUHJveHlSZXF1ZXN0RXJyb3IiLCJnZXRBY3R1YWxFcnJvciIsImpzb253cFJlcyIsInczY1JlcyIsImlzU3RyaW5nIiwic2VuZCIsImpzb24iLCJ0b0xvd2VyQ2FzZSIsIkIiLCJyZXNvbHZlIiwiZG9uZSIsInByb3h5QWN0aXZlIiwicHJveHlSb3V0ZUlzQXZvaWRlZCIsIm9yaWdpbmFsVXJsIiwidGVzdCIsInN0cmluZ0JvZHkiLCJpbmZvIiwiY2FuUHJveHkiLCJwcm94aWVkUmVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUEsTUFBTUEsZ0JBQWdCLEdBQUcsU0FBekI7O0FBQ0EsTUFBTUMsVUFBVSxHQUFHQyxzQkFBT0MsU0FBUCxDQUFpQixTQUFqQixDQUFuQjs7QUFDQSxNQUFNQyxNQUFNLEdBQUdGLHNCQUFPQyxTQUFQLENBQWlCLEtBQWpCLENBQWY7O0FBQ0EsTUFBTUUsa0JBQWtCLEdBQUdILHNCQUFPQyxTQUFQLENBQWlCSCxnQkFBakIsQ0FBM0I7O0FBRUEsTUFBTU0sMEJBQTBCLEdBQUcsQ0FBbkM7QUFFQSxNQUFNQyxjQUFjLEdBQUcsSUFBdkI7QUFFQSxNQUFNQyxtQkFBbUIsR0FBRyxTQUE1Qjs7QUFDQSxNQUFNQyxlQUFlLEdBQUcscUNBQXhCOztBQUNBLE1BQU1DLG9CQUFvQixHQUFHLHVCQUE3Qjs7QUFFQSxNQUFNQyxzQkFBc0IsR0FBRyxlQUEvQjtBQUNBLE1BQU1DLHNCQUFzQixHQUFHLGVBQS9CO0FBRUEsTUFBTUMsY0FBYyxHQUFHLElBQUlDLE1BQUosQ0FDcEIsS0FBSUwsZUFBZ0IsSUFBR0QsbUJBQW9CLFFBQTVDLEdBQ0MsSUFBR0Usb0JBQXFCLFFBRkosQ0FBdkI7QUFJQSxNQUFNSyxhQUFhLEdBQUcsSUFBSUQsTUFBSixDQUNuQix1QkFBRCxHQUNDLElBQUdKLG9CQUFxQixPQUZMLENBQXRCOztBQUtBLE1BQU1NLFFBQU4sQ0FBZTs7OztBQUVmLE1BQU1DLGFBQU4sQ0FBb0I7QUFDbEJDLEVBQUFBLFdBQVcsQ0FBRUMsR0FBRixFQUFPO0FBQ2hCLFNBQUtDLE1BQUwsR0FBYyxJQUFJQyxpQkFBSixDQUFRO0FBQUVGLE1BQUFBO0FBQUYsS0FBUixDQUFkO0FBQ0Q7O0FBRURoQixFQUFBQSxTQUFTLENBQUVtQixTQUFGLEVBQWFDLFFBQWIsRUFBdUI7QUFDOUIsUUFBSUQsU0FBSixFQUFlO0FBQ2IsVUFBSSxLQUFLRixNQUFMLENBQVlJLEdBQVosQ0FBZ0JGLFNBQWhCLENBQUosRUFBZ0M7QUFDOUIsY0FBTUcsS0FBSyxHQUFHLEtBQUtMLE1BQUwsQ0FBWU0sR0FBWixDQUFnQkosU0FBaEIsQ0FBZDs7QUFDQSxZQUFJRyxLQUFLLENBQUN2QixNQUFWLEVBQWtCO0FBQ2hCLGlCQUFPdUIsS0FBSyxDQUFDdkIsTUFBYjtBQUNEOztBQUNEcUIsUUFBQUEsUUFBUSxHQUFHQSxRQUFRLElBQUlFLEtBQUssQ0FBQ0YsUUFBN0I7QUFDRDs7QUFJRCxhQUFPckIsc0JBQU9DLFNBQVAsQ0FBa0IsR0FBRW9CLFFBQVEsSUFBSXZCLGdCQUFpQixHQUFoQyxHQUNyQixJQUFHc0IsU0FBUyxDQUFDSyxTQUFWLENBQW9CLENBQXBCLEVBQXVCQyxJQUFJLENBQUNDLEdBQUwsQ0FBU1AsU0FBUyxDQUFDUSxNQUFuQixFQUEyQixDQUEzQixDQUF2QixDQUFzRCxHQURyRCxDQUFQO0FBRUQ7O0FBR0QsWUFBUVAsUUFBUjtBQUNFLFdBQUtRLGdCQUFXQyxlQUFYLENBQTJCQyxHQUFoQztBQUNFLGVBQU83QixNQUFQOztBQUNGLFdBQUsyQixnQkFBV0MsZUFBWCxDQUEyQkUsT0FBaEM7QUFDRSxlQUFPakMsVUFBUDs7QUFDRjtBQUNFLGVBQU9JLGtCQUFQO0FBTko7QUFRRDs7QUFFRDhCLEVBQUFBLFdBQVcsQ0FBRWIsU0FBRixFQUFhO0FBQ3RCLFdBQU8sQ0FBQyxLQUFLRixNQUFMLENBQVlNLEdBQVosQ0FBZ0JKLFNBQWhCLEtBQThCLEVBQS9CLEVBQW1DQyxRQUExQztBQUNEOztBQUVEYSxFQUFBQSxVQUFVLENBQUVkLFNBQUYsRUFBYUcsS0FBYixFQUFvQjtBQUM1QixRQUFJSCxTQUFTLElBQUlHLEtBQWpCLEVBQXdCO0FBQ3RCLFdBQUtMLE1BQUwsQ0FBWWlCLEdBQVosQ0FBZ0JmLFNBQWhCLEVBQTJCO0FBQ3pCQyxRQUFBQSxRQUFRLEVBQUVFLEtBRGU7QUFLekJ2QixRQUFBQSxNQUFNLEVBQUUsS0FBS0MsU0FBTCxDQUFlbUIsU0FBZixFQUEwQkcsS0FBMUI7QUFMaUIsT0FBM0I7QUFPRDs7QUFDRCxXQUFPQSxLQUFQO0FBQ0Q7O0FBRURhLEVBQUFBLFdBQVcsQ0FBRWhCLFNBQUYsRUFBYTtBQUN0QixRQUFJLEtBQUtGLE1BQUwsQ0FBWUksR0FBWixDQUFnQkYsU0FBaEIsQ0FBSixFQUFnQztBQUM5QixXQUFLRixNQUFMLENBQVlNLEdBQVosQ0FBZ0JKLFNBQWhCLEVBQTJCcEIsTUFBM0IsR0FBb0MsSUFBcEM7QUFDRDtBQUNGOztBQXJEaUI7O0FBNERwQixNQUFNcUMsY0FBYyxHQUFHLElBQUl0QixhQUFKLENBQWtCLEdBQWxCLENBQXZCOztBQUdBLFNBQVN1QixlQUFULENBQTBCQyxNQUExQixFQUFrQ25CLFNBQVMsR0FBRyxJQUE5QyxFQUFvRDtBQUNsRCxRQUFNb0IsU0FBUyxHQUFHQyxnQkFBRUMsVUFBRixDQUFhSCxNQUFNLENBQUNJLGdCQUFwQixJQUNkSixNQUFNLENBQUNJLGdCQUFQLENBQXdCdkIsU0FBeEIsQ0FEYyxHQUVkbUIsTUFGSjs7QUFHQSxNQUFJQyxTQUFTLEtBQUtELE1BQWxCLEVBQTBCO0FBSXhCLFdBQU9BLE1BQU0sQ0FBQ2xCLFFBQWQ7QUFDRDs7QUFHRCxTQUFPbUIsU0FBUyxHQUFHQSxTQUFTLENBQUNuQixRQUFiLEdBQXdCZ0IsY0FBYyxDQUFDSixXQUFmLENBQTJCYixTQUEzQixDQUF4QztBQUNEOztBQUVELFNBQVN3QixnQkFBVCxDQUEyQkMsT0FBM0IsRUFBb0M7QUFDbEMsU0FBTyxDQUFDSixnQkFBRUssUUFBRixDQUFXQyw4QkFBWCxFQUFtQ0YsT0FBbkMsQ0FBUjtBQUNEOztBQUVELFNBQVNHLFVBQVQsQ0FBcUJDLFNBQXJCLEVBQWdDQyxPQUFoQyxFQUF5QztBQU92QyxNQUFJQyxHQUFHLEdBQUdELE9BQVY7O0FBQ0EsTUFBSVQsZ0JBQUVXLE9BQUYsQ0FBVUYsT0FBVixLQUFzQixDQUFDVCxnQkFBRVksUUFBRixDQUFXSCxPQUFYLENBQTNCLEVBQWdEO0FBQzlDQyxJQUFBQSxHQUFHLEdBQUcsRUFBTjtBQUNBQSxJQUFBQSxHQUFHLENBQUNGLFNBQVMsQ0FBQ0ssSUFBWCxDQUFILEdBQXNCSixPQUF0QjtBQUNEOztBQUNELFNBQU9DLEdBQVA7QUFDRDs7QUFFRCxTQUFTSSxZQUFULENBQXVCTixTQUF2QixFQUFrQ0MsT0FBbEMsRUFBMkM7QUFJekMsTUFBSUMsR0FBRyxHQUFHRCxPQUFWOztBQUNBLE1BQUlULGdCQUFFWSxRQUFGLENBQVdILE9BQVgsQ0FBSixFQUF5QjtBQUV2QixRQUFJQSxPQUFPLENBQUNELFNBQVMsQ0FBQ08sTUFBWCxDQUFYLEVBQStCO0FBQzdCTCxNQUFBQSxHQUFHLEdBQUdELE9BQU8sQ0FBQ0QsU0FBUyxDQUFDTyxNQUFYLENBQWI7QUFDRDtBQUNGOztBQUNELFNBQU9MLEdBQVA7QUFDRDs7QUFFRCxTQUFTTSxXQUFULENBQXNCUixTQUF0QixFQUFpQ0MsT0FBakMsRUFBMEM3QixRQUExQyxFQUFvRDtBQUNsRCxNQUFJcUMsY0FBYyxHQUFHLEVBQXJCO0FBQ0EsTUFBSUMsY0FBYyxHQUFHLEVBQXJCOztBQUNBLE1BQUlDLGNBQWMsR0FBR25CLGdCQUFFb0IsSUFBRixDQUFPWCxPQUFQLENBQXJCOztBQUVBLE1BQUlELFNBQUosRUFBZTtBQUNiLFFBQUlBLFNBQVMsQ0FBQ2EsUUFBZCxFQUF3QjtBQUd0QixVQUFJLENBQUNyQixnQkFBRVcsT0FBRixDQUFVWCxnQkFBRXNCLEtBQUYsQ0FBUWQsU0FBUyxDQUFDYSxRQUFsQixDQUFWLENBQUwsRUFBNkM7QUFDM0NKLFFBQUFBLGNBQWMsR0FBRyxDQUFDVCxTQUFTLENBQUNhLFFBQVgsQ0FBakI7QUFDRCxPQUZELE1BRU87QUFDTEosUUFBQUEsY0FBYyxHQUFHVCxTQUFTLENBQUNhLFFBQTNCO0FBQ0Q7QUFDRjs7QUFFRCxRQUFJYixTQUFTLENBQUNlLFFBQWQsRUFBd0I7QUFDdEJMLE1BQUFBLGNBQWMsR0FBR1YsU0FBUyxDQUFDZSxRQUEzQjtBQUNEOztBQU1ELFFBQUlmLFNBQVMsQ0FBQ2dCLFFBQWQsRUFBd0I7QUFDdEIsVUFBSUMsT0FBTyxHQUFHakIsU0FBUyxDQUFDZ0IsUUFBVixDQUFtQmYsT0FBbkIsRUFBNEI3QixRQUE1QixDQUFkOztBQUNBLFVBQUk2QyxPQUFKLEVBQWE7QUFDWCxjQUFNLElBQUlDLGVBQU9DLGtCQUFYLENBQThCRixPQUE5QixFQUF1Q2hCLE9BQXZDLENBQU47QUFDRDtBQUNGO0FBQ0Y7O0FBR0QsTUFBSVEsY0FBYyxDQUFDOUIsTUFBZixLQUEwQixDQUE5QixFQUFpQztBQUMvQjtBQUNEOztBQUdELE1BQUkrQixjQUFjLENBQUNVLE9BQWYsQ0FBdUIsV0FBdkIsTUFBd0MsQ0FBQyxDQUE3QyxFQUFnRDtBQUM5Q1YsSUFBQUEsY0FBYyxDQUFDVyxJQUFmLENBQW9CLFdBQXBCO0FBQ0Q7O0FBR0QsTUFBSVgsY0FBYyxDQUFDVSxPQUFmLENBQXVCLElBQXZCLE1BQWlDLENBQUMsQ0FBdEMsRUFBeUM7QUFDdkNWLElBQUFBLGNBQWMsQ0FBQ1csSUFBZixDQUFvQixJQUFwQjtBQUNEOztBQUdELE9BQUssSUFBSUMsTUFBVCxJQUFtQmIsY0FBbkIsRUFBbUM7QUFDakMsUUFBSWpCLGdCQUFFK0IsVUFBRixDQUFhWixjQUFiLEVBQTZCVyxNQUE3QixFQUFxQ1osY0FBckMsRUFBcUQvQixNQUFyRCxLQUFnRSxDQUFoRSxJQUNBYSxnQkFBRStCLFVBQUYsQ0FBYUQsTUFBYixFQUFxQlgsY0FBckIsRUFBcUNoQyxNQUFyQyxLQUFnRCxDQURwRCxFQUN1RDtBQUdyRDtBQUNEO0FBQ0Y7O0FBQ0QsUUFBTSxJQUFJdUMsZUFBT0Msa0JBQVgsQ0FBOEJuQixTQUE5QixFQUF5Q1csY0FBekMsQ0FBTjtBQUNEOztBQVNELFNBQVNhLFFBQVQsQ0FBbUJDLGFBQW5CLEVBQWtDeEIsT0FBbEMsRUFBMkN5QixhQUEzQyxFQUEwRHRELFFBQTFELEVBQW9FO0FBS2xFLE1BQUl1RCxTQUFTLEdBQUduQyxnQkFBRW9CLElBQUYsQ0FBT2EsYUFBUCxFQUFzQkcsT0FBdEIsRUFBaEI7O0FBTUEsTUFBSW5CLGNBQWMsR0FBR2lCLGFBQWEsQ0FBQ2IsUUFBbkM7O0FBQ0EsTUFBSXJCLGdCQUFFVyxPQUFGLENBQVVYLGdCQUFFc0IsS0FBRixDQUFRWSxhQUFhLENBQUNiLFFBQXRCLENBQVYsQ0FBSixFQUFnRDtBQUs5QyxRQUFJRCxJQUFJLEdBQUdwQixnQkFBRW9CLElBQUYsQ0FBT1gsT0FBUCxDQUFYOztBQUNBLFNBQUssSUFBSXFCLE1BQVQsSUFBbUJJLGFBQWEsQ0FBQ2IsUUFBakMsRUFBMkM7QUFDekMsVUFBSXJCLGdCQUFFcUMsT0FBRixDQUFVUCxNQUFWLEVBQWtCLEdBQUdWLElBQXJCLEVBQTJCakMsTUFBM0IsS0FBc0MsQ0FBMUMsRUFBNkM7QUFDM0M4QixRQUFBQSxjQUFjLEdBQUdhLE1BQWpCO0FBQ0E7QUFDRDtBQUNGO0FBQ0Y7O0FBR0QsTUFBSVEsSUFBSjs7QUFDQSxNQUFJdEMsZ0JBQUVDLFVBQUYsQ0FBYWlDLGFBQWEsQ0FBQ0YsUUFBM0IsQ0FBSixFQUEwQztBQU94Q00sSUFBQUEsSUFBSSxHQUFHSixhQUFhLENBQUNGLFFBQWQsQ0FBdUJ2QixPQUF2QixFQUFnQzdCLFFBQWhDLENBQVA7QUFDRCxHQVJELE1BUU87QUFHTDBELElBQUFBLElBQUksR0FBR3RDLGdCQUFFdUMsT0FBRixDQUFVdEIsY0FBVixFQUEwQnVCLEdBQTFCLENBQStCQyxDQUFELElBQU9oQyxPQUFPLENBQUNnQyxDQUFELENBQTVDLENBQVA7O0FBQ0EsUUFBSVAsYUFBYSxDQUFDWCxRQUFsQixFQUE0QjtBQUMxQmUsTUFBQUEsSUFBSSxHQUFHQSxJQUFJLENBQUNJLE1BQUwsQ0FBWTFDLGdCQUFFdUMsT0FBRixDQUFVTCxhQUFhLENBQUNYLFFBQXhCLEVBQWtDaUIsR0FBbEMsQ0FBdUNDLENBQUQsSUFBT2hDLE9BQU8sQ0FBQ2dDLENBQUQsQ0FBcEQsQ0FBWixDQUFQO0FBQ0Q7QUFDRjs7QUFHREgsRUFBQUEsSUFBSSxHQUFHQSxJQUFJLENBQUNJLE1BQUwsQ0FBWVAsU0FBUyxDQUFDSyxHQUFWLENBQWVHLENBQUQsSUFBT1YsYUFBYSxDQUFDVSxDQUFELENBQWxDLENBQVosQ0FBUDtBQUNBLFNBQU9MLElBQVA7QUFDRDs7QUFFRCxTQUFTTSx3QkFBVCxDQUFtQzlDLE1BQW5DLEVBQTJDO0FBQ3pDLE1BQUksQ0FBQ0EsTUFBTSxDQUFDK0MsYUFBWixFQUEyQjtBQUN6QixVQUFNLElBQUlDLEtBQUosQ0FBVSwwREFBVixDQUFOO0FBQ0Q7O0FBRUQsTUFBSSxFQUFFaEQsTUFBTSxDQUFDaUQsY0FBUCxJQUF5QmpELE1BQU0sQ0FBQ2tELE9BQWxDLENBQUosRUFBZ0Q7QUFDOUMsVUFBTSxJQUFJRixLQUFKLENBQVUsd0VBQVYsQ0FBTjtBQUNEOztBQUdELFNBQU8sU0FBU0csU0FBVCxDQUFvQkMsR0FBcEIsRUFBeUI7QUFDOUIsU0FBSyxNQUFNLENBQUNDLElBQUQsRUFBT0MsT0FBUCxDQUFYLElBQThCcEQsZ0JBQUVxRCxPQUFGLENBQVVDLGtCQUFWLENBQTlCLEVBQXFEO0FBQ25ELFdBQUssTUFBTSxDQUFDQyxNQUFELEVBQVNDLElBQVQsQ0FBWCxJQUE2QnhELGdCQUFFcUQsT0FBRixDQUFVRCxPQUFWLENBQTdCLEVBQWlEO0FBRS9DSyxRQUFBQSxZQUFZLENBQUNQLEdBQUQsRUFBTUssTUFBTixFQUFjSixJQUFkLEVBQW9CSyxJQUFwQixFQUEwQjFELE1BQTFCLEVBQWtDSyxnQkFBZ0IsQ0FBQ3FELElBQUksQ0FBQ3BELE9BQU4sQ0FBbEQsQ0FBWjtBQUNEO0FBQ0Y7QUFDRixHQVBEO0FBUUQ7O0FBRUQsU0FBU3FELFlBQVQsQ0FBdUJQLEdBQXZCLEVBQTRCSyxNQUE1QixFQUFvQ0osSUFBcEMsRUFBMENLLElBQTFDLEVBQWdEMUQsTUFBaEQsRUFBd0Q0RCxTQUF4RCxFQUFtRTtBQUNqRSxNQUFJQyxZQUFZLEdBQUcsT0FBT0MsR0FBUCxFQUFZbEQsR0FBWixLQUFvQjtBQUNyQyxRQUFJRCxPQUFPLEdBQUdtRCxHQUFHLENBQUNDLElBQWxCO0FBQ0EsUUFBSUMsV0FBVyxHQUFHLEVBQWxCO0FBQ0EsUUFBSUMsVUFBVSxHQUFHLEdBQWpCO0FBQ0EsUUFBSUMsWUFBSjtBQUNBLFFBQUlDLGVBQWUsR0FBR3BFLGVBQWUsQ0FBQ0MsTUFBRCxFQUFTOEQsR0FBRyxDQUFDOUIsTUFBSixDQUFXbkQsU0FBcEIsQ0FBckM7O0FBRUEsUUFBSTtBQUdGLFVBQUkrRSxTQUFTLElBQUksQ0FBQzVELE1BQU0sQ0FBQytDLGFBQVAsQ0FBcUJlLEdBQUcsQ0FBQzlCLE1BQUosQ0FBV25ELFNBQWhDLENBQWxCLEVBQThEO0FBQzVELGNBQU0sSUFBSStDLGVBQU93QyxpQkFBWCxFQUFOO0FBQ0Q7O0FBUUQsVUFBSVIsU0FBUyxJQUFJUyxzQkFBc0IsQ0FBQ3JFLE1BQUQsRUFBUzhELEdBQVQsRUFBY0osSUFBSSxDQUFDcEQsT0FBbkIsQ0FBdkMsRUFBb0U7QUFDbEUsY0FBTWdFLFVBQVUsQ0FBQ3RFLE1BQUQsRUFBUzhELEdBQVQsRUFBY2xELEdBQWQsQ0FBaEI7QUFDQTtBQUNEOztBQUlELFVBQUksQ0FBQzhDLElBQUksQ0FBQ3BELE9BQVYsRUFBbUI7QUFDakIsY0FBTSxJQUFJc0IsZUFBTzJDLG1CQUFYLEVBQU47QUFDRDs7QUFHRCxVQUFJYixJQUFJLENBQUN0QixhQUFMLElBQXNCc0IsSUFBSSxDQUFDdEIsYUFBTCxDQUFtQnJCLElBQTdDLEVBQW1EO0FBQ2pESixRQUFBQSxPQUFPLEdBQUdGLFVBQVUsQ0FBQ2lELElBQUksQ0FBQ3RCLGFBQU4sRUFBcUJ6QixPQUFyQixDQUFwQjtBQUNEOztBQUdELFVBQUkrQyxJQUFJLENBQUN0QixhQUFMLElBQXNCc0IsSUFBSSxDQUFDdEIsYUFBTCxDQUFtQm5CLE1BQTdDLEVBQXFEO0FBQ25ETixRQUFBQSxPQUFPLEdBQUdLLFlBQVksQ0FBQzBDLElBQUksQ0FBQ3RCLGFBQU4sRUFBcUJ6QixPQUFyQixDQUF0QjtBQUNEOztBQUVELFVBQUkrQyxJQUFJLENBQUNwRCxPQUFMLEtBQWlCcEMsc0JBQXJCLEVBQTZDO0FBRzNDaUcsUUFBQUEsZUFBZSxHQUFHN0UsZ0JBQVdrRixpQkFBWCxDQUE2QixHQUFHdEMsUUFBUSxDQUFDNEIsR0FBRyxDQUFDOUIsTUFBTCxFQUFhckIsT0FBYixFQUFzQitDLElBQUksQ0FBQ3RCLGFBQUwsSUFBc0IsRUFBNUMsQ0FBeEMsQ0FBbEI7QUFDRDs7QUFHRGxCLE1BQUFBLFdBQVcsQ0FBQ3dDLElBQUksQ0FBQ3RCLGFBQU4sRUFBcUJ6QixPQUFyQixFQUE4QndELGVBQTlCLENBQVg7QUFJQSxVQUFJM0IsSUFBSSxHQUFHTixRQUFRLENBQUM0QixHQUFHLENBQUM5QixNQUFMLEVBQWFyQixPQUFiLEVBQXNCK0MsSUFBSSxDQUFDdEIsYUFBTCxJQUFzQixFQUE1QyxFQUFnRCtCLGVBQWhELENBQW5CO0FBQ0EsVUFBSU0sU0FBSjs7QUFFQSxVQUFJQyx1QkFBV2hCLElBQUksQ0FBQ3BELE9BQWhCLENBQUosRUFBOEI7QUFDNUJvRSwrQkFBV2hCLElBQUksQ0FBQ3BELE9BQWhCLEVBQXlCLEdBQUdrQyxJQUE1QjtBQUNEOztBQUdEMUMsTUFBQUEsY0FBYyxDQUFDcEMsU0FBZixDQUF5Qm9HLEdBQUcsQ0FBQzlCLE1BQUosQ0FBV25ELFNBQXBDLEVBQStDc0YsZUFBL0MsRUFBZ0VRLEtBQWhFLENBQXVFLFVBQUQsR0FDbkUsR0FBRTNFLE1BQU0sQ0FBQ3ZCLFdBQVAsQ0FBbUJtRyxJQUFLLElBQUdsQixJQUFJLENBQUNwRCxPQUFRLGdCQUR5QixHQUVwRUosZ0JBQUUyRSxRQUFGLENBQVdDLElBQUksQ0FBQ0MsU0FBTCxDQUFldkMsSUFBZixDQUFYLEVBQWlDO0FBQUNuRCxRQUFBQSxNQUFNLEVBQUV2QjtBQUFULE9BQWpDLENBRkY7O0FBSUEsVUFBSWtDLE1BQU0sQ0FBQ2lELGNBQVgsRUFBMkI7QUFDekJ3QixRQUFBQSxTQUFTLEdBQUcsTUFBTXpFLE1BQU0sQ0FBQ2lELGNBQVAsQ0FBc0JTLElBQUksQ0FBQ3BELE9BQTNCLEVBQW9DLEdBQUdrQyxJQUF2QyxDQUFsQjtBQUNELE9BRkQsTUFFTztBQUNMaUMsUUFBQUEsU0FBUyxHQUFHLE1BQU16RSxNQUFNLENBQUNrRCxPQUFQLENBQWVRLElBQUksQ0FBQ3BELE9BQXBCLEVBQTZCLEdBQUdrQyxJQUFoQyxDQUFsQjtBQUNEOztBQUdEMkIsTUFBQUEsZUFBZSxHQUFHcEUsZUFBZSxDQUFDQyxNQUFELEVBQVM4RCxHQUFHLENBQUM5QixNQUFKLENBQVduRCxTQUFwQixDQUFmLElBQWlEc0YsZUFBbkU7O0FBSUEsVUFBSWpFLGdCQUFFOEUsYUFBRixDQUFnQlAsU0FBaEIsS0FBOEJ2RSxnQkFBRW5CLEdBQUYsQ0FBTTBGLFNBQU4sRUFBaUIsVUFBakIsQ0FBbEMsRUFBZ0U7QUFDOUROLFFBQUFBLGVBQWUsR0FBR00sU0FBUyxDQUFDM0YsUUFBVixJQUFzQnFGLGVBQXhDOztBQUNBLFlBQUlNLFNBQVMsQ0FBQ1EsS0FBZCxFQUFxQjtBQUNuQixnQkFBTVIsU0FBUyxDQUFDUSxLQUFoQjtBQUNEOztBQUNEUixRQUFBQSxTQUFTLEdBQUdBLFNBQVMsQ0FBQ3pGLEtBQXRCO0FBQ0Q7O0FBR0QsVUFBSTBFLElBQUksQ0FBQ3BELE9BQUwsS0FBaUJwQyxzQkFBckIsRUFBNkM7QUFDM0NnRyxRQUFBQSxZQUFZLEdBQUdPLFNBQVMsQ0FBQyxDQUFELENBQXhCO0FBQ0EzRSxRQUFBQSxjQUFjLENBQUNILFVBQWYsQ0FBMEJ1RSxZQUExQixFQUF3Q0MsZUFBeEM7QUFDQXJFLFFBQUFBLGNBQWMsQ0FBQ3BDLFNBQWYsQ0FBeUJ3RyxZQUF6QixFQUF1Q0MsZUFBdkMsRUFDR1EsS0FESCxDQUNVLDhCQUE2QlIsZUFBZ0IseUJBQXdCRCxZQUFhLEVBRDVGOztBQUVBLFlBQUlDLGVBQWUsS0FBSzdFLGdCQUFXQyxlQUFYLENBQTJCRSxPQUFuRCxFQUE0RDtBQUMxRGdGLFVBQUFBLFNBQVMsR0FBR0EsU0FBUyxDQUFDLENBQUQsQ0FBckI7QUFDRCxTQUZELE1BRU8sSUFBSU4sZUFBZSxLQUFLN0UsZ0JBQVdDLGVBQVgsQ0FBMkJDLEdBQW5ELEVBQXdEO0FBQzdEaUYsVUFBQUEsU0FBUyxHQUFHO0FBQ1ZTLFlBQUFBLFlBQVksRUFBRVQsU0FBUyxDQUFDLENBQUQ7QUFEYixXQUFaO0FBR0Q7QUFDRjs7QUFJRCxVQUFJQSxTQUFKLEVBQWU7QUFDYkEsUUFBQUEsU0FBUyxHQUFHLDRCQUFjQSxTQUFkLEVBQXlCMUcsbUJBQXpCLEVBQThDQyxlQUE5QyxDQUFaO0FBQ0Q7O0FBR0QsVUFBSWtDLGdCQUFFaUYsV0FBRixDQUFjVixTQUFkLENBQUosRUFBOEI7QUFDNUJBLFFBQUFBLFNBQVMsR0FBRyxJQUFaO0FBQ0Q7O0FBR0QsVUFBSWYsSUFBSSxDQUFDcEQsT0FBTCxLQUFpQm5DLHNCQUFyQixFQUE2QztBQUMzQzJCLFFBQUFBLGNBQWMsQ0FBQ3BDLFNBQWYsQ0FBeUJvRyxHQUFHLENBQUM5QixNQUFKLENBQVduRCxTQUFwQyxFQUErQ3NGLGVBQS9DLEVBQ0dRLEtBREgsQ0FDVSxzQkFBcUJ6RSxnQkFBRTJFLFFBQUYsQ0FBV0MsSUFBSSxDQUFDQyxTQUFMLENBQWVOLFNBQWYsQ0FBWCxFQUFzQztBQUFDcEYsVUFBQUEsTUFBTSxFQUFFdkI7QUFBVCxTQUF0QyxDQUFnRSxFQUQvRjtBQUVBZ0MsUUFBQUEsY0FBYyxDQUFDcEMsU0FBZixDQUF5Qm9HLEdBQUcsQ0FBQzlCLE1BQUosQ0FBV25ELFNBQXBDLEVBQStDc0YsZUFBL0MsRUFBZ0VRLEtBQWhFLENBQXNFLHdDQUF0RTtBQUNBRixRQUFBQSxTQUFTLEdBQUcsSUFBWjtBQUNEOztBQUdELFVBQUlXLG9CQUFLQyxRQUFMLENBQWNaLFNBQWQsQ0FBSixFQUE4QjtBQUM1QixZQUFJVyxvQkFBS0MsUUFBTCxDQUFjWixTQUFTLENBQUNhLE1BQXhCLEtBQW1DLENBQUNDLEtBQUssQ0FBQ2QsU0FBUyxDQUFDYSxNQUFYLENBQXpDLElBQStERSxRQUFRLENBQUNmLFNBQVMsQ0FBQ2EsTUFBWCxFQUFtQixFQUFuQixDQUFSLEtBQW1DLENBQXRHLEVBQXlHO0FBQ3ZHLGdCQUFNLHdDQUEyQmIsU0FBUyxDQUFDYSxNQUFyQyxFQUE2Q2IsU0FBUyxDQUFDekYsS0FBdkQsQ0FBTjtBQUNELFNBRkQsTUFFTyxJQUFJa0IsZ0JBQUU4RSxhQUFGLENBQWdCUCxTQUFTLENBQUN6RixLQUExQixLQUFvQ3lGLFNBQVMsQ0FBQ3pGLEtBQVYsQ0FBZ0JpRyxLQUF4RCxFQUErRDtBQUNwRSxnQkFBTSxrQ0FBcUJSLFNBQVMsQ0FBQ3pGLEtBQVYsQ0FBZ0JpRyxLQUFyQyxFQUE0Q1IsU0FBUyxDQUFDekYsS0FBVixDQUFnQjJDLE9BQTVELEVBQXFFOEMsU0FBUyxDQUFDekYsS0FBVixDQUFnQnlHLFVBQXJGLENBQU47QUFDRDtBQUNGOztBQUdELFVBQUl0QixlQUFlLEtBQUs3RSxnQkFBV0MsZUFBWCxDQUEyQkMsR0FBbkQsRUFBd0Q7QUFDdER3RSxRQUFBQSxXQUFXLENBQUNzQixNQUFaLEdBQXNCcEYsZ0JBQUV3RixLQUFGLENBQVFqQixTQUFSLEtBQXNCdkUsZ0JBQUVpRixXQUFGLENBQWNWLFNBQVMsQ0FBQ2EsTUFBeEIsQ0FBdkIsR0FBMER6SCwwQkFBMUQsR0FBdUY0RyxTQUFTLENBQUNhLE1BQXRIO0FBQ0Q7O0FBQ0R0QixNQUFBQSxXQUFXLENBQUNoRixLQUFaLEdBQW9CeUYsU0FBcEI7QUFDQTNFLE1BQUFBLGNBQWMsQ0FBQ3BDLFNBQWYsQ0FBeUJvRyxHQUFHLENBQUM5QixNQUFKLENBQVduRCxTQUFYLElBQXdCcUYsWUFBakQsRUFBK0RDLGVBQS9ELEVBQWdGUSxLQUFoRixDQUF1RixhQUFELEdBQ25GLHlCQUF3QmpCLElBQUksQ0FBQ3BELE9BQVEsY0FBYUosZ0JBQUUyRSxRQUFGLENBQVdDLElBQUksQ0FBQ0MsU0FBTCxDQUFlTixTQUFmLENBQVgsRUFBc0M7QUFBQ3BGLFFBQUFBLE1BQU0sRUFBRXZCO0FBQVQsT0FBdEMsQ0FBZ0UsRUFEckg7O0FBR0EsVUFBSTRGLElBQUksQ0FBQ3BELE9BQUwsS0FBaUJuQyxzQkFBckIsRUFBNkM7QUFJM0MyQixRQUFBQSxjQUFjLENBQUNELFdBQWYsQ0FBMkJpRSxHQUFHLENBQUM5QixNQUFKLENBQVduRCxTQUF0QztBQUNEO0FBQ0YsS0FySUQsQ0FxSUUsT0FBTzhHLEdBQVAsRUFBWTtBQUdaLFVBQUlDLFNBQVMsR0FBR0QsR0FBaEI7QUFFQXhCLE1BQUFBLGVBQWUsR0FBR0EsZUFBZSxJQUFJcEUsZUFBZSxDQUFDQyxNQUFELEVBQVM4RCxHQUFHLENBQUM5QixNQUFKLENBQVduRCxTQUFYLElBQXdCcUYsWUFBakMsQ0FBcEQ7QUFFQSxVQUFJMkIsTUFBTSxHQUFHRixHQUFHLENBQUNGLFVBQUosSUFBa0JFLEdBQUcsQ0FBQ0csS0FBbkM7O0FBQ0EsVUFBSSxDQUFDNUYsZ0JBQUVLLFFBQUYsQ0FBV3NGLE1BQVgsRUFBbUJGLEdBQUcsQ0FBQ2hFLE9BQXZCLENBQUwsRUFBc0M7QUFHcENrRSxRQUFBQSxNQUFNLEdBQUksR0FBRUYsR0FBRyxDQUFDaEUsT0FBUSxHQUFFa0UsTUFBTSxHQUFJLE9BQU9BLE1BQVgsR0FBcUIsRUFBRyxFQUF4RDtBQUNEOztBQUNEL0YsTUFBQUEsY0FBYyxDQUFDcEMsU0FBZixDQUF5Qm9HLEdBQUcsQ0FBQzlCLE1BQUosQ0FBV25ELFNBQVgsSUFBd0JxRixZQUFqRCxFQUErREMsZUFBL0QsRUFBZ0ZRLEtBQWhGLENBQXVGLGNBQUQsR0FDbkYsbUNBQWtDa0IsTUFBTyxFQUQ1Qzs7QUFFQSxVQUFJLHlCQUFZRixHQUFaLEVBQWlCL0QsZUFBT21FLGlCQUF4QixDQUFKLEVBQWdEO0FBQzlDSCxRQUFBQSxTQUFTLEdBQUdELEdBQUcsQ0FBQ0ssY0FBSixFQUFaO0FBQ0Q7O0FBRUQsVUFBSTdCLGVBQWUsS0FBSzdFLGdCQUFXQyxlQUFYLENBQTJCQyxHQUFuRCxFQUF3RDtBQUN0RCxTQUFDeUUsVUFBRCxFQUFhRCxXQUFiLElBQTRCLG9DQUF1QjRCLFNBQXZCLENBQTVCO0FBQ0QsT0FGRCxNQUVPLElBQUl6QixlQUFlLEtBQUs3RSxnQkFBV0MsZUFBWCxDQUEyQkUsT0FBbkQsRUFBNEQ7QUFDakUsU0FBQ3dFLFVBQUQsRUFBYUQsV0FBYixJQUE0Qix1Q0FBMEI0QixTQUExQixDQUE1QjtBQUNELE9BRk0sTUFFQTtBQUdMLFlBQUlLLFNBQVMsR0FBRyx1Q0FBMEJMLFNBQTFCLENBQWhCO0FBQ0EsWUFBSU0sTUFBTSxHQUFHLG9DQUF1Qk4sU0FBdkIsQ0FBYjtBQUVBNUIsUUFBQUEsV0FBVyxtQ0FDTmlDLFNBQVMsQ0FBQyxDQUFELENBREgsRUFFTkMsTUFBTSxDQUFDLENBQUQsQ0FGQSxDQUFYO0FBTUFqQyxRQUFBQSxVQUFVLEdBQUdnQyxTQUFTLENBQUMsQ0FBRCxDQUF0QjtBQUNEO0FBQ0Y7O0FBR0QsUUFBSS9GLGdCQUFFaUcsUUFBRixDQUFXbkMsV0FBWCxDQUFKLEVBQTZCO0FBQzNCcEQsTUFBQUEsR0FBRyxDQUFDMEUsTUFBSixDQUFXckIsVUFBWCxFQUF1Qm1DLElBQXZCLENBQTRCcEMsV0FBNUI7QUFDRCxLQUZELE1BRU87QUFDTCxVQUFJRSxZQUFKLEVBQWtCO0FBQ2hCLFlBQUlDLGVBQWUsS0FBSzdFLGdCQUFXQyxlQUFYLENBQTJCQyxHQUFuRCxFQUF3RDtBQUN0RHdFLFVBQUFBLFdBQVcsQ0FBQ2hGLEtBQVosQ0FBa0JILFNBQWxCLEdBQThCcUYsWUFBOUI7QUFDRCxTQUZELE1BRU87QUFDTEYsVUFBQUEsV0FBVyxDQUFDbkYsU0FBWixHQUF3QnFGLFlBQXhCO0FBQ0Q7QUFDRixPQU5ELE1BTU87QUFDTEYsUUFBQUEsV0FBVyxDQUFDbkYsU0FBWixHQUF3QmlGLEdBQUcsQ0FBQzlCLE1BQUosQ0FBV25ELFNBQVgsSUFBd0IsSUFBaEQ7QUFDRDs7QUFHRCxVQUFJc0YsZUFBZSxLQUFLN0UsZ0JBQVdDLGVBQVgsQ0FBMkJDLEdBQW5ELEVBQXdEO0FBQ3RELGVBQU93RSxXQUFXLENBQUNuRixTQUFuQjtBQUNEOztBQUNEK0IsTUFBQUEsR0FBRyxDQUFDMEUsTUFBSixDQUFXckIsVUFBWCxFQUF1Qm9DLElBQXZCLENBQTRCckMsV0FBNUI7QUFDRDtBQUNGLEdBdk1EOztBQXlNQVosRUFBQUEsR0FBRyxDQUFDSyxNQUFNLENBQUM2QyxXQUFQLEVBQUQsQ0FBSCxDQUEwQmpELElBQTFCLEVBQWdDLENBQUNTLEdBQUQsRUFBTWxELEdBQU4sS0FBYztBQUM1QzJGLHNCQUFFQyxPQUFGLENBQVUzQyxZQUFZLENBQUNDLEdBQUQsRUFBTWxELEdBQU4sQ0FBdEIsRUFBa0M2RixJQUFsQztBQUNELEdBRkQ7QUFHRDs7QUFFRCxTQUFTcEMsc0JBQVQsQ0FBaUNyRSxNQUFqQyxFQUF5QzhELEdBQXpDLEVBQThDeEQsT0FBOUMsRUFBdUQ7QUFFckQsTUFBSSxDQUFDTixNQUFNLENBQUMwRyxXQUFQLENBQW1CNUMsR0FBRyxDQUFDOUIsTUFBSixDQUFXbkQsU0FBOUIsQ0FBTCxFQUErQztBQUM3QyxXQUFPLEtBQVA7QUFDRDs7QUFJRCxNQUFJeUIsT0FBTyxLQUFLLGVBQWhCLEVBQWlDO0FBQy9CLFdBQU8sS0FBUDtBQUNEOztBQUlELE1BQUlOLE1BQU0sQ0FBQzJHLG1CQUFQLENBQTJCN0MsR0FBRyxDQUFDOUIsTUFBSixDQUFXbkQsU0FBdEMsRUFBaURpRixHQUFHLENBQUNMLE1BQXJELEVBQTZESyxHQUFHLENBQUM4QyxXQUFqRSxDQUFKLEVBQW1GO0FBQ2pGLFdBQU8sS0FBUDtBQUNEOztBQU1ELE1BQUl0SSxhQUFhLENBQUN1SSxJQUFkLENBQW1CL0MsR0FBRyxDQUFDOEMsV0FBdkIsQ0FBSixFQUF5QztBQUN2QyxXQUFPLEtBQVA7QUFDRDs7QUFPRCxRQUFNRSxVQUFVLEdBQUdoQyxJQUFJLENBQUNDLFNBQUwsQ0FBZWpCLEdBQUcsQ0FBQ0MsSUFBbkIsQ0FBbkI7O0FBQ0EsTUFBSStDLFVBQVUsSUFBSTFJLGNBQWMsQ0FBQ3lJLElBQWYsQ0FBb0JDLFVBQXBCLENBQWxCLEVBQW1EO0FBQ2pELFdBQU8sS0FBUDtBQUNEOztBQUVELFNBQU8sSUFBUDtBQUNEOztBQUVELGVBQWV4QyxVQUFmLENBQTJCdEUsTUFBM0IsRUFBbUM4RCxHQUFuQyxFQUF3Q2xELEdBQXhDLEVBQTZDO0FBQzNDZCxFQUFBQSxjQUFjLENBQUNwQyxTQUFmLENBQXlCb0csR0FBRyxDQUFDOUIsTUFBSixDQUFXbkQsU0FBcEMsRUFBK0NrQixlQUFlLENBQUNDLE1BQUQsRUFBUzhELEdBQUcsQ0FBQzlCLE1BQUosQ0FBV25ELFNBQXBCLENBQTlELEVBQ0drSSxJQURILENBQ1Esd0RBRFI7O0FBSUEsTUFBSSxDQUFDL0csTUFBTSxDQUFDZ0gsUUFBUCxDQUFnQmxELEdBQUcsQ0FBQzlCLE1BQUosQ0FBV25ELFNBQTNCLENBQUwsRUFBNEM7QUFDMUMsVUFBTSxJQUFJbUUsS0FBSixDQUFVLGtFQUFWLENBQU47QUFDRDs7QUFDRCxNQUFJO0FBQ0YsVUFBTWlFLFVBQVUsR0FBRyxNQUFNakgsTUFBTSxDQUFDaUQsY0FBUCxDQUFzQixhQUF0QixFQUFxQ2EsR0FBckMsRUFBMENsRCxHQUExQyxFQUErQ2tELEdBQUcsQ0FBQzlCLE1BQUosQ0FBV25ELFNBQTFELENBQXpCO0FBQ0EsUUFBSW9JLFVBQVUsSUFBSUEsVUFBVSxDQUFDaEMsS0FBN0IsRUFBb0MsTUFBTWdDLFVBQVUsQ0FBQ2hDLEtBQWpCO0FBQ3JDLEdBSEQsQ0FHRSxPQUFPVSxHQUFQLEVBQVk7QUFDWixRQUFJLHlCQUFZQSxHQUFaLEVBQWlCL0QsZUFBT21FLGlCQUF4QixDQUFKLEVBQWdEO0FBQzlDLFlBQU1KLEdBQU47QUFDRCxLQUZELE1BRU87QUFDTCxZQUFNLElBQUkzQyxLQUFKLENBQVcsaUNBQWdDMkMsR0FBRyxDQUFDaEUsT0FBUSxFQUF2RCxDQUFOO0FBQ0Q7QUFDRjtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGxvZ2dlciwgdXRpbCB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCB7IHZhbGlkYXRvcnMgfSBmcm9tICcuL3ZhbGlkYXRvcnMnO1xuaW1wb3J0IHsgZXJyb3JzLCBpc0Vycm9yVHlwZSwgZXJyb3JGcm9tTUpTT05XUFN0YXR1c0NvZGUsIGVycm9yRnJvbVczQ0pzb25Db2RlLFxuICAgICAgICAgZ2V0UmVzcG9uc2VGb3JXM0NFcnJvciwgZ2V0UmVzcG9uc2VGb3JKc29ud3BFcnJvciB9IGZyb20gJy4vZXJyb3JzJztcbmltcG9ydCB7IE1FVEhPRF9NQVAsIE5PX1NFU1NJT05fSURfQ09NTUFORFMgfSBmcm9tICcuL3JvdXRlcyc7XG5pbXBvcnQgeyBkdXBsaWNhdGVLZXlzIH0gZnJvbSAnLi4vYmFzZWRyaXZlci9oZWxwZXJzJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCBCYXNlRHJpdmVyIGZyb20gJy4uL2Jhc2Vkcml2ZXIvZHJpdmVyJztcbmltcG9ydCBMUlUgZnJvbSAnbHJ1LWNhY2hlJztcblxuY29uc3QgR0VORVJJQ19QUk9UT0NPTCA9ICdHRU5FUklDJztcbmNvbnN0IG1qc29ud3BMb2cgPSBsb2dnZXIuZ2V0TG9nZ2VyKCdNSlNPTldQJyk7XG5jb25zdCB3M2NMb2cgPSBsb2dnZXIuZ2V0TG9nZ2VyKCdXM0MnKTtcbmNvbnN0IGdlbmVyaWNQcm90b2NvbExvZyA9IGxvZ2dlci5nZXRMb2dnZXIoR0VORVJJQ19QUk9UT0NPTCk7XG5cbmNvbnN0IEpTT05XUF9TVUNDRVNTX1NUQVRVU19DT0RFID0gMDtcbi8vIFRPRE86IE1ha2UgdGhpcyB2YWx1ZSBjb25maWd1cmFibGUgYXMgYSBzZXJ2ZXIgc2lkZSBjYXBhYmlsaXR5XG5jb25zdCBMT0dfT0JKX0xFTkdUSCA9IDEwMjQ7IC8vIE1BWCBMRU5HVEggTG9nZ2VkIHRvIGZpbGUgLyBjb25zb2xlXG5cbmNvbnN0IE1KU09OV1BfRUxFTUVOVF9LRVkgPSAnRUxFTUVOVCc7XG5jb25zdCBXM0NfRUxFTUVOVF9LRVkgPSAnZWxlbWVudC02MDY2LTExZTQtYTUyZS00ZjczNTQ2NmNlY2YnO1xuY29uc3QgSU1BR0VfRUxFTUVOVF9QUkVGSVggPSAnYXBwaXVtLWltYWdlLWVsZW1lbnQtJztcblxuY29uc3QgQ1JFQVRFX1NFU1NJT05fQ09NTUFORCA9ICdjcmVhdGVTZXNzaW9uJztcbmNvbnN0IERFTEVURV9TRVNTSU9OX0NPTU1BTkQgPSAnZGVsZXRlU2Vzc2lvbic7XG5cbmNvbnN0IElNR19FTF9CT0RZX1JFID0gbmV3IFJlZ0V4cChcbiAgYFwiKCR7VzNDX0VMRU1FTlRfS0VZfXwke01KU09OV1BfRUxFTUVOVF9LRVl9KVwiOlxccypgICsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11c2VsZXNzLWVzY2FwZVxuICBgXCIke0lNQUdFX0VMRU1FTlRfUFJFRklYfVteXCJdK1wiYFxuKTtcbmNvbnN0IElNR19FTF9VUkxfUkUgPSBuZXcgUmVnRXhwKFxuICBgLyhlbGVtZW50fHNjcmVlbnNob3QpYCArXG4gIGAvJHtJTUFHRV9FTEVNRU5UX1BSRUZJWH1bXi9dK2Bcbik7XG5cbmNsYXNzIFByb3RvY29sIHt9XG5cbmNsYXNzIFNlc3Npb25zQ2FjaGUge1xuICBjb25zdHJ1Y3RvciAobWF4KSB7XG4gICAgdGhpcy5fY2FjaGUgPSBuZXcgTFJVKHsgbWF4IH0pO1xuICB9XG5cbiAgZ2V0TG9nZ2VyIChzZXNzaW9uSWQsIHByb3RvY29sKSB7XG4gICAgaWYgKHNlc3Npb25JZCkge1xuICAgICAgaWYgKHRoaXMuX2NhY2hlLmhhcyhzZXNzaW9uSWQpKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5fY2FjaGUuZ2V0KHNlc3Npb25JZCk7XG4gICAgICAgIGlmICh2YWx1ZS5sb2dnZXIpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWUubG9nZ2VyO1xuICAgICAgICB9XG4gICAgICAgIHByb3RvY29sID0gcHJvdG9jb2wgfHwgdmFsdWUucHJvdG9jb2w7XG4gICAgICB9XG4gICAgICAvLyBBbHdheXMgY3JlYXRlIGEgbmV3IGxvZ2dlciBpbnN0YW5jZSBmb3IgaWRzXG4gICAgICAvLyB0aGF0IGFyZSBub3QgaW4gdGhlIGN1cnJlbnQgc2Vzc2lvbnMgbGlzdCxcbiAgICAgIC8vIHNvIHdlIGNhbiBzdGlsbCBzZWUgc3VjaCBpZHMgYXMgcHJlZml4ZXNcbiAgICAgIHJldHVybiBsb2dnZXIuZ2V0TG9nZ2VyKGAke3Byb3RvY29sIHx8IEdFTkVSSUNfUFJPVE9DT0x9IGAgK1xuICAgICAgICBgKCR7c2Vzc2lvbklkLnN1YnN0cmluZygwLCBNYXRoLm1pbihzZXNzaW9uSWQubGVuZ3RoLCA4KSl9KWApO1xuICAgIH1cblxuICAgIC8vIEZhbGwgYmFjayB0byBwcm90b2NvbCBuYW1lLW9ubHkgbG9nZ2VyIGlmIHNlc3Npb24gaWQgaXMgdW5rbm93blxuICAgIHN3aXRjaCAocHJvdG9jb2wpIHtcbiAgICAgIGNhc2UgQmFzZURyaXZlci5EUklWRVJfUFJPVE9DT0wuVzNDOlxuICAgICAgICByZXR1cm4gdzNjTG9nO1xuICAgICAgY2FzZSBCYXNlRHJpdmVyLkRSSVZFUl9QUk9UT0NPTC5NSlNPTldQOlxuICAgICAgICByZXR1cm4gbWpzb253cExvZztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBnZW5lcmljUHJvdG9jb2xMb2c7XG4gICAgfVxuICB9XG5cbiAgZ2V0UHJvdG9jb2wgKHNlc3Npb25JZCkge1xuICAgIHJldHVybiAodGhpcy5fY2FjaGUuZ2V0KHNlc3Npb25JZCkgfHwge30pLnByb3RvY29sO1xuICB9XG5cbiAgcHV0U2Vzc2lvbiAoc2Vzc2lvbklkLCB2YWx1ZSkge1xuICAgIGlmIChzZXNzaW9uSWQgJiYgdmFsdWUpIHtcbiAgICAgIHRoaXMuX2NhY2hlLnNldChzZXNzaW9uSWQsIHtcbiAgICAgICAgcHJvdG9jb2w6IHZhbHVlLFxuICAgICAgICAvLyBXZSBkb24ndCB3YW50IHRvIGNhY2hlIHRoZSBsb2dnZXIgaW5zdGFuY2UgZm9yIGVhY2ggcmFuZG9tIHNlc3Npb24gaWQgaW4gdGhlIGNhY2hlXG4gICAgICAgIC8vIGluIG9yZGVyIHRvIHNhdmUgbWVtb3J5LiBJbnN0ZWFkIHdlIG9ubHkgY2FjaGUgbG9nZ2VycyBmb3IgdmFsaWQgaWRzIHRoYXRcbiAgICAgICAgLy8gYXJlIHJldHVybmVkIGJ5IGBjcmVhdGVTZXNzaW9uYCBjYWxsIGFuZCByZXNldCB0aGVtIGFmdGVyIGBkZWxldGVTZXNzaW9uYCBpcyBjYWxsZWRcbiAgICAgICAgbG9nZ2VyOiB0aGlzLmdldExvZ2dlcihzZXNzaW9uSWQsIHZhbHVlKSxcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICByZXNldExvZ2dlciAoc2Vzc2lvbklkKSB7XG4gICAgaWYgKHRoaXMuX2NhY2hlLmhhcyhzZXNzaW9uSWQpKSB7XG4gICAgICB0aGlzLl9jYWNoZS5nZXQoc2Vzc2lvbklkKS5sb2dnZXIgPSBudWxsO1xuICAgIH1cbiAgfVxufVxuXG4vLyBUaGlzIGNhY2hlIGlzIHVzZWZ1bCB3aGVuIGEgc2Vzc2lvbiBnZXRzIHRlcm1pbmF0ZWRcbi8vIGFuZCByZW1vdmVkIGZyb20gdGhlIHNlc3Npb25zIGxpc3QgaW4gdGhlIHVtYnJlbGxhIGRyaXZlcixcbi8vIGJ1dCB0aGUgY2xpZW50IHN0aWxsIHRyaWVzIHRvIHNlbmQgYSBjb21tYW5kIHRvIHRoaXMgc2Vzc2lvbiBpZC5cbi8vIFNvIHdlIGtub3cgaG93IHRvIHByb3Blcmx5IHdyYXAgdGhlIGVycm9yIG1lc3NhZ2UgZm9yIGl0XG5jb25zdCBTRVNTSU9OU19DQUNIRSA9IG5ldyBTZXNzaW9uc0NhY2hlKDEwMCk7XG5cblxuZnVuY3Rpb24gZXh0cmFjdFByb3RvY29sIChkcml2ZXIsIHNlc3Npb25JZCA9IG51bGwpIHtcbiAgY29uc3QgZHN0RHJpdmVyID0gXy5pc0Z1bmN0aW9uKGRyaXZlci5kcml2ZXJGb3JTZXNzaW9uKVxuICAgID8gZHJpdmVyLmRyaXZlckZvclNlc3Npb24oc2Vzc2lvbklkKVxuICAgIDogZHJpdmVyO1xuICBpZiAoZHN0RHJpdmVyID09PSBkcml2ZXIpIHtcbiAgICAvLyBTaG9ydGNpcmN1aXQgaWYgdGhlIGRyaXZlciBpbnN0YW5jZSBpcyBub3QgYW4gdW1icmVsbGEgZHJpdmVyXG4gICAgLy8gb3IgaXQgaXMgRmFrZSBkcml2ZXIgaW5zdGFuY2UsIHdoZXJlIGBkcml2ZXIuZHJpdmVyRm9yU2Vzc2lvbmBcbiAgICAvLyBhbHdheXMgcmV0dXJucyBzZWxmIGluc3RhbmNlXG4gICAgcmV0dXJuIGRyaXZlci5wcm90b2NvbDtcbiAgfVxuXG4gIC8vIEV4dHJhY3QgdGhlIHByb3RvY29sIGZvciB0aGUgY3VycmVudCBzZXNzaW9uIGlmIHRoZSBnaXZlbiBkcml2ZXIgaXMgdGhlIHVtYnJlbGxhIG9uZVxuICByZXR1cm4gZHN0RHJpdmVyID8gZHN0RHJpdmVyLnByb3RvY29sIDogU0VTU0lPTlNfQ0FDSEUuZ2V0UHJvdG9jb2woc2Vzc2lvbklkKTtcbn1cblxuZnVuY3Rpb24gaXNTZXNzaW9uQ29tbWFuZCAoY29tbWFuZCkge1xuICByZXR1cm4gIV8uaW5jbHVkZXMoTk9fU0VTU0lPTl9JRF9DT01NQU5EUywgY29tbWFuZCk7XG59XG5cbmZ1bmN0aW9uIHdyYXBQYXJhbXMgKHBhcmFtU2V0cywganNvbk9iaikge1xuICAvKiBUaGVyZSBhcmUgY29tbWFuZHMgbGlrZSBwZXJmb3JtVG91Y2ggd2hpY2ggdGFrZSBhIHNpbmdsZSBwYXJhbWV0ZXIgKHByaW1pdGl2ZSB0eXBlIG9yIGFycmF5KS5cbiAgICogU29tZSBkcml2ZXJzIGNob29zZSB0byBwYXNzIHRoaXMgcGFyYW1ldGVyIGFzIGEgdmFsdWUgKGVnLiBbYWN0aW9uMSwgYWN0aW9uMi4uLl0pIHdoaWxlIG90aGVycyB0b1xuICAgKiB3cmFwIGl0IHdpdGhpbiBhbiBvYmplY3QoZWcnIHtnZXN0dXJlOiAgW2FjdGlvbjEsIGFjdGlvbjIuLi5dfSksIHdoaWNoIG1ha2VzIGl0IGhhcmQgdG8gdmFsaWRhdGUuXG4gICAqIFRoZSB3cmFwIG9wdGlvbiBpbiB0aGUgc3BlYyBlbmZvcmNlIHdyYXBwaW5nIGJlZm9yZSB2YWxpZGF0aW9uLCBzbyB0aGF0IGFsbCBwYXJhbXMgYXJlIHdyYXBwZWQgYXRcbiAgICogdGhlIHRpbWUgdGhleSBhcmUgdmFsaWRhdGVkIGFuZCBsYXRlciBwYXNzZWQgdG8gdGhlIGNvbW1hbmRzLlxuICAgKi9cbiAgbGV0IHJlcyA9IGpzb25PYmo7XG4gIGlmIChfLmlzQXJyYXkoanNvbk9iaikgfHwgIV8uaXNPYmplY3QoanNvbk9iaikpIHtcbiAgICByZXMgPSB7fTtcbiAgICByZXNbcGFyYW1TZXRzLndyYXBdID0ganNvbk9iajtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiB1bndyYXBQYXJhbXMgKHBhcmFtU2V0cywganNvbk9iaikge1xuICAvKiBUaGVyZSBhcmUgY29tbWFuZHMgbGlrZSBzZXROZXR3b3JrQ29ubmVjdGlvbiB3aGljaCBzZW5kIHBhcmFtZXRlcnMgd3JhcHBlZCBpbnNpZGUgYSBrZXkgc3VjaCBhc1xuICAgKiBcInBhcmFtZXRlcnNcIi4gVGhpcyBmdW5jdGlvbiB1bndyYXBzIHRoZW0gKGVnLiB7XCJwYXJhbWV0ZXJzXCI6IHtcInR5cGVcIjogMX19IGJlY29tZXMge1widHlwZVwiOiAxfSkuXG4gICAqL1xuICBsZXQgcmVzID0ganNvbk9iajtcbiAgaWYgKF8uaXNPYmplY3QoanNvbk9iaikpIHtcbiAgICAvLyBzb21lIGNsaWVudHMsIGxpa2UgcnVieSwgZG9uJ3Qgd3JhcFxuICAgIGlmIChqc29uT2JqW3BhcmFtU2V0cy51bndyYXBdKSB7XG4gICAgICByZXMgPSBqc29uT2JqW3BhcmFtU2V0cy51bndyYXBdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiBjaGVja1BhcmFtcyAocGFyYW1TZXRzLCBqc29uT2JqLCBwcm90b2NvbCkge1xuICBsZXQgcmVxdWlyZWRQYXJhbXMgPSBbXTtcbiAgbGV0IG9wdGlvbmFsUGFyYW1zID0gW107XG4gIGxldCByZWNlaXZlZFBhcmFtcyA9IF8ua2V5cyhqc29uT2JqKTtcblxuICBpZiAocGFyYW1TZXRzKSB7XG4gICAgaWYgKHBhcmFtU2V0cy5yZXF1aXJlZCkge1xuICAgICAgLy8gd2UgbWlnaHQgaGF2ZSBhbiBhcnJheSBvZiBwYXJhbWV0ZXJzLFxuICAgICAgLy8gb3IgYW4gYXJyYXkgb2YgYXJyYXlzIG9mIHBhcmFtZXRlcnMsIHNvIHN0YW5kYXJkaXplXG4gICAgICBpZiAoIV8uaXNBcnJheShfLmZpcnN0KHBhcmFtU2V0cy5yZXF1aXJlZCkpKSB7XG4gICAgICAgIHJlcXVpcmVkUGFyYW1zID0gW3BhcmFtU2V0cy5yZXF1aXJlZF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXF1aXJlZFBhcmFtcyA9IHBhcmFtU2V0cy5yZXF1aXJlZDtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gb3B0aW9uYWwgcGFyYW1ldGVycyBhcmUganVzdCBhbiBhcnJheVxuICAgIGlmIChwYXJhbVNldHMub3B0aW9uYWwpIHtcbiAgICAgIG9wdGlvbmFsUGFyYW1zID0gcGFyYW1TZXRzLm9wdGlvbmFsO1xuICAgIH1cblxuICAgIC8vIElmIGEgZnVuY3Rpb24gd2FzIHByb3ZpZGVkIGFzIHRoZSAndmFsaWRhdGUnIGtleSwgaXQgd2lsbCBoZXJlIGJlIGNhbGxlZCB3aXRoXG4gICAgLy8ganNvbk9iaiBhcyB0aGUgcGFyYW0uIElmIGl0IHJldHVybnMgc29tZXRoaW5nIGZhbHN5LCB2ZXJpZmljYXRpb24gd2lsbCBiZVxuICAgIC8vIGNvbnNpZGVyZWQgdG8gaGF2ZSBwYXNzZWQuIElmIGl0IHJldHVybnMgc29tZXRoaW5nIGVsc2UsIHRoYXQgd2lsbCBiZSB0aGVcbiAgICAvLyBhcmd1bWVudCB0byBhbiBlcnJvciB3aGljaCBpcyB0aHJvd24gdG8gdGhlIHVzZXJcbiAgICBpZiAocGFyYW1TZXRzLnZhbGlkYXRlKSB7XG4gICAgICBsZXQgbWVzc2FnZSA9IHBhcmFtU2V0cy52YWxpZGF0ZShqc29uT2JqLCBwcm90b2NvbCk7XG4gICAgICBpZiAobWVzc2FnZSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzLkJhZFBhcmFtZXRlcnNFcnJvcihtZXNzYWdlLCBqc29uT2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBpZiB3ZSBoYXZlIG5vIHJlcXVpcmVkIHBhcmFtZXRlcnMsIGFsbCBpcyB3ZWxsXG4gIGlmIChyZXF1aXJlZFBhcmFtcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBzb21lIGNsaWVudHMgcGFzcyBpbiB0aGUgc2Vzc2lvbiBpZCBpbiB0aGUgcGFyYW1zXG4gIGlmIChvcHRpb25hbFBhcmFtcy5pbmRleE9mKCdzZXNzaW9uSWQnKSA9PT0gLTEpIHtcbiAgICBvcHRpb25hbFBhcmFtcy5wdXNoKCdzZXNzaW9uSWQnKTtcbiAgfVxuXG4gIC8vIHNvbWUgY2xpZW50cyBwYXNzIGluIGFuIGVsZW1lbnQgaWQgaW4gdGhlIHBhcmFtc1xuICBpZiAob3B0aW9uYWxQYXJhbXMuaW5kZXhPZignaWQnKSA9PT0gLTEpIHtcbiAgICBvcHRpb25hbFBhcmFtcy5wdXNoKCdpZCcpO1xuICB9XG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgcmVxdWlyZWQgcGFyYW1ldGVycyBhbmQgY2hlY2sgYWdhaW5zdCBvdXIgYXJndW1lbnRzXG4gIGZvciAobGV0IHBhcmFtcyBvZiByZXF1aXJlZFBhcmFtcykge1xuICAgIGlmIChfLmRpZmZlcmVuY2UocmVjZWl2ZWRQYXJhbXMsIHBhcmFtcywgb3B0aW9uYWxQYXJhbXMpLmxlbmd0aCA9PT0gMCAmJlxuICAgICAgICBfLmRpZmZlcmVuY2UocGFyYW1zLCByZWNlaXZlZFBhcmFtcykubGVuZ3RoID09PSAwKSB7XG4gICAgICAvLyB3ZSBoYXZlIGEgc2V0IG9mIHBhcmFtZXRlcnMgdGhhdCBpcyBjb3JyZWN0XG4gICAgICAvLyBzbyBzaG9ydC1jaXJjdWl0XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIHRocm93IG5ldyBlcnJvcnMuQmFkUGFyYW1ldGVyc0Vycm9yKHBhcmFtU2V0cywgcmVjZWl2ZWRQYXJhbXMpO1xufVxuXG4vKlxuICogVGhpcyBtZXRob2QgdGFrZXMgMyBwaWVjZXMgb2YgZGF0YTogcmVxdWVzdCBwYXJhbWV0ZXJzICgncmVxdWVzdFBhcmFtcycpLFxuICogYSByZXF1ZXN0IEpTT04gYm9keSAoJ2pzb25PYmonKSwgYW5kICdwYXlsb2FkUGFyYW1zJywgd2hpY2ggaXMgdGhlIHNlY3Rpb25cbiAqIGZyb20gdGhlIHJvdXRlIGRlZmluaXRpb24gZm9yIGEgcGFydGljdWxhciBlbmRwb2ludCB3aGljaCBoYXMgaW5zdHJ1Y3Rpb25zXG4gKiBvbiBoYW5kbGluZyBwYXJhbWV0ZXJzLiBUaGlzIG1ldGhvZCByZXR1cm5zIGFuIGFycmF5IG9mIGFyZ3VtZW50cyB3aGljaCB3aWxsXG4gKiBiZSBhcHBsaWVkIHRvIGEgY29tbWFuZC5cbiAqL1xuZnVuY3Rpb24gbWFrZUFyZ3MgKHJlcXVlc3RQYXJhbXMsIGpzb25PYmosIHBheWxvYWRQYXJhbXMsIHByb3RvY29sKSB7XG4gIC8vIFdlIHdhbnQgdG8gcGFzcyB0aGUgXCJ1cmxcIiBwYXJhbWV0ZXJzIHRvIHRoZSBjb21tYW5kcyBpbiByZXZlcnNlIG9yZGVyXG4gIC8vIHNpbmNlIHRoZSBjb21tYW5kIHdpbGwgc29tZXRpbWVzIHdhbnQgdG8gaWdub3JlLCBzYXksIHRoZSBzZXNzaW9uSWQuXG4gIC8vIFRoaXMgaGFzIHRoZSBlZmZlY3Qgb2YgcHV0dGluZyBzZXNzaW9uSWQgbGFzdCwgd2hpY2ggbWVhbnMgaW4gSlMgd2UgY2FuXG4gIC8vIG9taXQgaXQgZnJvbSB0aGUgZnVuY3Rpb24gc2lnbmF0dXJlIGlmIHdlJ3JlIG5vdCBnb2luZyB0byB1c2UgaXQuXG4gIGxldCB1cmxQYXJhbXMgPSBfLmtleXMocmVxdWVzdFBhcmFtcykucmV2ZXJzZSgpO1xuXG4gIC8vIEluIHRoZSBzaW1wbGUgY2FzZSwgdGhlIHJlcXVpcmVkIHBhcmFtZXRlcnMgYXJlIGEgYmFzaWMgYXJyYXkgaW5cbiAgLy8gcGF5bG9hZFBhcmFtcy5yZXF1aXJlZCwgc28gc3RhcnQgdGhlcmUuIEl0J3MgcG9zc2libGUgdGhhdCB0aGVyZSBhcmVcbiAgLy8gbXVsdGlwbGUgb3B0aW9uYWwgc2V0cyBvZiByZXF1aXJlZCBwYXJhbXMsIHRob3VnaCwgc28gaGFuZGxlIHRoYXQgY2FzZVxuICAvLyB0b28uXG4gIGxldCByZXF1aXJlZFBhcmFtcyA9IHBheWxvYWRQYXJhbXMucmVxdWlyZWQ7XG4gIGlmIChfLmlzQXJyYXkoXy5maXJzdChwYXlsb2FkUGFyYW1zLnJlcXVpcmVkKSkpIHtcbiAgICAvLyBJZiB0aGVyZSBhcmUgb3B0aW9uYWwgc2V0cyBvZiByZXF1aXJlZCBwYXJhbXMsIHRoZW4gd2Ugd2lsbCBoYXZlIGFuXG4gICAgLy8gYXJyYXkgb2YgYXJyYXlzIGluIHBheWxvYWRQYXJhbXMucmVxdWlyZWQsIHNvIGxvb3AgdGhyb3VnaCBlYWNoIHNldCBhbmRcbiAgICAvLyBwaWNrIHRoZSBvbmUgdGhhdCBtYXRjaGVzIHdoaWNoIEpTT04gcGFyYW1zIHdlcmUgYWN0dWFsbHkgc2VudC4gV2UndmVcbiAgICAvLyBhbHJlYWR5IGJlZW4gdGhyb3VnaCB2YWxpZGF0aW9uIHNvIHdlJ3JlIGd1YXJhbnRlZWQgdG8gZmluZCBhIG1hdGNoLlxuICAgIGxldCBrZXlzID0gXy5rZXlzKGpzb25PYmopO1xuICAgIGZvciAobGV0IHBhcmFtcyBvZiBwYXlsb2FkUGFyYW1zLnJlcXVpcmVkKSB7XG4gICAgICBpZiAoXy53aXRob3V0KHBhcmFtcywgLi4ua2V5cykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJlcXVpcmVkUGFyYW1zID0gcGFyYW1zO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBOb3cgd2UgY29uc3RydWN0IG91ciBsaXN0IG9mIGFyZ3VtZW50cyB3aGljaCB3aWxsIGJlIHBhc3NlZCB0byB0aGUgY29tbWFuZFxuICBsZXQgYXJncztcbiAgaWYgKF8uaXNGdW5jdGlvbihwYXlsb2FkUGFyYW1zLm1ha2VBcmdzKSkge1xuICAgIC8vIEluIHRoZSByb3V0ZSBzcGVjLCBhIHBhcnRpY3VsYXIgcm91dGUgbWlnaHQgZGVmaW5lIGEgJ21ha2VBcmdzJyBmdW5jdGlvblxuICAgIC8vIGlmIGl0IHdhbnRzIGZ1bGwgY29udHJvbCBvdmVyIGhvdyB0byB0dXJuIEpTT04gcGFyYW1ldGVycyBpbnRvIGNvbW1hbmRcbiAgICAvLyBhcmd1bWVudHMuIFNvIHdlIHBhc3MgaXQgdGhlIEpTT04gcGFyYW1ldGVycyBhbmQgaXQgcmV0dXJucyBhbiBhcnJheVxuICAgIC8vIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgaGFuZGxpbmcgY29tbWFuZC4gRm9yIGV4YW1wbGUgaWYgaXQgcmV0dXJuc1xuICAgIC8vIFsxLCAyLCAzXSwgd2Ugd2lsbCBjYWxsIGBjb21tYW5kKDEsIDIsIDMsIC4uLilgICh1cmwgcGFyYW1zIGFyZSBzZXBhcmF0ZVxuICAgIC8vIGZyb20gSlNPTiBwYXJhbXMgYW5kIGdldCBjb25jYXRlbmF0ZWQgYmVsb3cpLlxuICAgIGFyZ3MgPSBwYXlsb2FkUGFyYW1zLm1ha2VBcmdzKGpzb25PYmosIHByb3RvY29sKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPdGhlcndpc2UsIGNvbGxlY3QgYWxsIHRoZSByZXF1aXJlZCBhbmQgb3B0aW9uYWwgcGFyYW1zIGFuZCBmbGF0dGVuIHRoZW1cbiAgICAvLyBpbnRvIGFuIGFyZ3VtZW50IGFycmF5XG4gICAgYXJncyA9IF8uZmxhdHRlbihyZXF1aXJlZFBhcmFtcykubWFwKChwKSA9PiBqc29uT2JqW3BdKTtcbiAgICBpZiAocGF5bG9hZFBhcmFtcy5vcHRpb25hbCkge1xuICAgICAgYXJncyA9IGFyZ3MuY29uY2F0KF8uZmxhdHRlbihwYXlsb2FkUGFyYW1zLm9wdGlvbmFsKS5tYXAoKHApID0+IGpzb25PYmpbcF0pKTtcbiAgICB9XG4gIH1cbiAgLy8gRmluYWxseSwgZ2V0IG91ciB1cmwgcGFyYW1zIChzZXNzaW9uIGlkLCBlbGVtZW50IGlkLCBldGMuLi4pIG9uIHRoZSBlbmQgb2ZcbiAgLy8gdGhlIGxpc3RcbiAgYXJncyA9IGFyZ3MuY29uY2F0KHVybFBhcmFtcy5tYXAoKHUpID0+IHJlcXVlc3RQYXJhbXNbdV0pKTtcbiAgcmV0dXJuIGFyZ3M7XG59XG5cbmZ1bmN0aW9uIHJvdXRlQ29uZmlndXJpbmdGdW5jdGlvbiAoZHJpdmVyKSB7XG4gIGlmICghZHJpdmVyLnNlc3Npb25FeGlzdHMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0RyaXZlcnMgdXNlZCB3aXRoIE1KU09OV1AgbXVzdCBpbXBsZW1lbnQgYHNlc3Npb25FeGlzdHNgJyk7XG4gIH1cblxuICBpZiAoIShkcml2ZXIuZXhlY3V0ZUNvbW1hbmQgfHwgZHJpdmVyLmV4ZWN1dGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdEcml2ZXJzIHVzZWQgd2l0aCBNSlNPTldQIG11c3QgaW1wbGVtZW50IGBleGVjdXRlQ29tbWFuZGAgb3IgYGV4ZWN1dGVgJyk7XG4gIH1cblxuICAvLyByZXR1cm4gYSBmdW5jdGlvbiB3aGljaCB3aWxsIGFkZCBhbGwgdGhlIHJvdXRlcyB0byB0aGUgZHJpdmVyXG4gIHJldHVybiBmdW5jdGlvbiBhZGRSb3V0ZXMgKGFwcCkge1xuICAgIGZvciAoY29uc3QgW3BhdGgsIG1ldGhvZHNdIG9mIF8udG9QYWlycyhNRVRIT0RfTUFQKSkge1xuICAgICAgZm9yIChjb25zdCBbbWV0aG9kLCBzcGVjXSBvZiBfLnRvUGFpcnMobWV0aG9kcykpIHtcbiAgICAgICAgLy8gc2V0IHVwIHRoZSBleHByZXNzIHJvdXRlIGhhbmRsZXJcbiAgICAgICAgYnVpbGRIYW5kbGVyKGFwcCwgbWV0aG9kLCBwYXRoLCBzcGVjLCBkcml2ZXIsIGlzU2Vzc2lvbkNvbW1hbmQoc3BlYy5jb21tYW5kKSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBidWlsZEhhbmRsZXIgKGFwcCwgbWV0aG9kLCBwYXRoLCBzcGVjLCBkcml2ZXIsIGlzU2Vzc0NtZCkge1xuICBsZXQgYXN5bmNIYW5kbGVyID0gYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gICAgbGV0IGpzb25PYmogPSByZXEuYm9keTtcbiAgICBsZXQgaHR0cFJlc0JvZHkgPSB7fTtcbiAgICBsZXQgaHR0cFN0YXR1cyA9IDIwMDtcbiAgICBsZXQgbmV3U2Vzc2lvbklkO1xuICAgIGxldCBjdXJyZW50UHJvdG9jb2wgPSBleHRyYWN0UHJvdG9jb2woZHJpdmVyLCByZXEucGFyYW1zLnNlc3Npb25JZCk7XG5cbiAgICB0cnkge1xuICAgICAgLy8gaWYgdGhpcyBpcyBhIHNlc3Npb24gY29tbWFuZCBidXQgd2UgZG9uJ3QgaGF2ZSBhIHNlc3Npb24sXG4gICAgICAvLyBlcnJvciBvdXQgZWFybHkgKGVzcGVjaWFsbHkgYmVmb3JlIHByb3h5aW5nKVxuICAgICAgaWYgKGlzU2Vzc0NtZCAmJiAhZHJpdmVyLnNlc3Npb25FeGlzdHMocmVxLnBhcmFtcy5zZXNzaW9uSWQpKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnMuTm9TdWNoRHJpdmVyRXJyb3IoKTtcbiAgICAgIH1cblxuICAgICAgLy8gaWYgdGhlIGRyaXZlciBpcyBjdXJyZW50bHkgcHJveHlpbmcgY29tbWFuZHMgdG8gYW5vdGhlciBKU09OV1BcbiAgICAgIC8vIHNlcnZlciwgYnlwYXNzIGFsbCBvdXIgY2hlY2tzIGFuZCBhc3N1bWUgdGhlIHVwc3RyZWFtIHNlcnZlciBrbm93c1xuICAgICAgLy8gd2hhdCBpdCdzIGRvaW5nLiBCdXQga2VlcCB0aGlzIGluIHRoZSB0cnkvY2F0Y2ggYmxvY2sgc28gaWYgcHJveHlpbmdcbiAgICAgIC8vIGl0c2VsZiBmYWlscywgd2UgZ2l2ZSBhIG1lc3NhZ2UgdG8gdGhlIGNsaWVudC4gT2YgY291cnNlIHdlIG9ubHlcbiAgICAgIC8vIHdhbnQgdG8gZG8gdGhlc2Ugd2hlbiB3ZSBoYXZlIGEgc2Vzc2lvbiBjb21tYW5kOyB0aGUgQXBwaXVtIGRyaXZlclxuICAgICAgLy8gbXVzdCBiZSByZXNwb25zaWJsZSBmb3Igc3RhcnQvc3RvcCBzZXNzaW9uLCBldGMuLi5cbiAgICAgIGlmIChpc1Nlc3NDbWQgJiYgZHJpdmVyU2hvdWxkRG9Kd3BQcm94eShkcml2ZXIsIHJlcSwgc3BlYy5jb21tYW5kKSkge1xuICAgICAgICBhd2FpdCBkb0p3cFByb3h5KGRyaXZlciwgcmVxLCByZXMpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIGlmIGEgY29tbWFuZCBpcyBub3QgaW4gb3VyIG1ldGhvZCBtYXAsIGl0J3MgYmVjYXVzZSB3ZVxuICAgICAgLy8gaGF2ZSBubyBwbGFucyB0byBldmVyIGltcGxlbWVudCBpdFxuICAgICAgaWYgKCFzcGVjLmNvbW1hbmQpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9ycy5Ob3RJbXBsZW1lbnRlZEVycm9yKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIHdyYXAgcGFyYW1zIGlmIG5lY2Vzc2FyeVxuICAgICAgaWYgKHNwZWMucGF5bG9hZFBhcmFtcyAmJiBzcGVjLnBheWxvYWRQYXJhbXMud3JhcCkge1xuICAgICAgICBqc29uT2JqID0gd3JhcFBhcmFtcyhzcGVjLnBheWxvYWRQYXJhbXMsIGpzb25PYmopO1xuICAgICAgfVxuXG4gICAgICAvLyB1bndyYXAgcGFyYW1zIGlmIG5lY2Vzc2FyeVxuICAgICAgaWYgKHNwZWMucGF5bG9hZFBhcmFtcyAmJiBzcGVjLnBheWxvYWRQYXJhbXMudW53cmFwKSB7XG4gICAgICAgIGpzb25PYmogPSB1bndyYXBQYXJhbXMoc3BlYy5wYXlsb2FkUGFyYW1zLCBqc29uT2JqKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNwZWMuY29tbWFuZCA9PT0gQ1JFQVRFX1NFU1NJT05fQ09NTUFORCkge1xuICAgICAgICAvLyB0cnkgdG8gZGV0ZXJtaW5lIHByb3RvY29sIGJ5IHNlc3Npb24gY3JlYXRpb24gYXJncywgc28gd2UgY2FuIHRocm93IGFcbiAgICAgICAgLy8gcHJvcGVybHkgZm9ybWF0dGVkIGVycm9yIGlmIGFyZ3VtZW50cyB2YWxpZGF0aW9uIGZhaWxzXG4gICAgICAgIGN1cnJlbnRQcm90b2NvbCA9IEJhc2VEcml2ZXIuZGV0ZXJtaW5lUHJvdG9jb2woLi4ubWFrZUFyZ3MocmVxLnBhcmFtcywganNvbk9iaiwgc3BlYy5wYXlsb2FkUGFyYW1zIHx8IHt9KSk7XG4gICAgICB9XG5cbiAgICAgIC8vIGVuc3VyZSB0aGF0IHRoZSBqc29uIHBheWxvYWQgY29uZm9ybXMgdG8gdGhlIHNwZWNcbiAgICAgIGNoZWNrUGFyYW1zKHNwZWMucGF5bG9hZFBhcmFtcywganNvbk9iaiwgY3VycmVudFByb3RvY29sKTtcblxuICAgICAgLy8gdHVybiB0aGUgY29tbWFuZCBhbmQganNvbiBwYXlsb2FkIGludG8gYW4gYXJndW1lbnQgbGlzdCBmb3JcbiAgICAgIC8vIHRoZSBkcml2ZXIgbWV0aG9kc1xuICAgICAgbGV0IGFyZ3MgPSBtYWtlQXJncyhyZXEucGFyYW1zLCBqc29uT2JqLCBzcGVjLnBheWxvYWRQYXJhbXMgfHwge30sIGN1cnJlbnRQcm90b2NvbCk7XG4gICAgICBsZXQgZHJpdmVyUmVzO1xuICAgICAgLy8gdmFsaWRhdGUgY29tbWFuZCBhcmdzIGFjY29yZGluZyB0byBNSlNPTldQXG4gICAgICBpZiAodmFsaWRhdG9yc1tzcGVjLmNvbW1hbmRdKSB7XG4gICAgICAgIHZhbGlkYXRvcnNbc3BlYy5jb21tYW5kXSguLi5hcmdzKTtcbiAgICAgIH1cblxuICAgICAgLy8gcnVuIHRoZSBkcml2ZXIgY29tbWFuZCB3cmFwcGVkIGluc2lkZSB0aGUgYXJndW1lbnQgdmFsaWRhdG9yc1xuICAgICAgU0VTU0lPTlNfQ0FDSEUuZ2V0TG9nZ2VyKHJlcS5wYXJhbXMuc2Vzc2lvbklkLCBjdXJyZW50UHJvdG9jb2wpLmRlYnVnKGBDYWxsaW5nIGAgK1xuICAgICAgICBgJHtkcml2ZXIuY29uc3RydWN0b3IubmFtZX0uJHtzcGVjLmNvbW1hbmR9KCkgd2l0aCBhcmdzOiBgICtcbiAgICAgICAgXy50cnVuY2F0ZShKU09OLnN0cmluZ2lmeShhcmdzKSwge2xlbmd0aDogTE9HX09CSl9MRU5HVEh9KSk7XG5cbiAgICAgIGlmIChkcml2ZXIuZXhlY3V0ZUNvbW1hbmQpIHtcbiAgICAgICAgZHJpdmVyUmVzID0gYXdhaXQgZHJpdmVyLmV4ZWN1dGVDb21tYW5kKHNwZWMuY29tbWFuZCwgLi4uYXJncyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkcml2ZXJSZXMgPSBhd2FpdCBkcml2ZXIuZXhlY3V0ZShzcGVjLmNvbW1hbmQsIC4uLmFyZ3MpO1xuICAgICAgfVxuXG4gICAgICAvLyBHZXQgdGhlIHByb3RvY29sIGFmdGVyIGV4ZWN1dGVDb21tYW5kXG4gICAgICBjdXJyZW50UHJvdG9jb2wgPSBleHRyYWN0UHJvdG9jb2woZHJpdmVyLCByZXEucGFyYW1zLnNlc3Npb25JZCkgfHwgY3VycmVudFByb3RvY29sO1xuXG4gICAgICAvLyBJZiBgZXhlY3V0ZUNvbW1hbmRgIHdhcyBvdmVycmlkZGVuIGFuZCB0aGUgbWV0aG9kIHJldHVybnMgYW4gb2JqZWN0XG4gICAgICAvLyB3aXRoIGEgcHJvdG9jb2wgYW5kIHZhbHVlL2Vycm9yIHByb3BlcnR5LCByZS1hc3NpZ24gdGhlIHByb3RvY29sXG4gICAgICBpZiAoXy5pc1BsYWluT2JqZWN0KGRyaXZlclJlcykgJiYgXy5oYXMoZHJpdmVyUmVzLCAncHJvdG9jb2wnKSkge1xuICAgICAgICBjdXJyZW50UHJvdG9jb2wgPSBkcml2ZXJSZXMucHJvdG9jb2wgfHwgY3VycmVudFByb3RvY29sO1xuICAgICAgICBpZiAoZHJpdmVyUmVzLmVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgZHJpdmVyUmVzLmVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGRyaXZlclJlcyA9IGRyaXZlclJlcy52YWx1ZTtcbiAgICAgIH1cblxuICAgICAgLy8gdW5wYWNrIGNyZWF0ZVNlc3Npb24gcmVzcG9uc2VcbiAgICAgIGlmIChzcGVjLmNvbW1hbmQgPT09IENSRUFURV9TRVNTSU9OX0NPTU1BTkQpIHtcbiAgICAgICAgbmV3U2Vzc2lvbklkID0gZHJpdmVyUmVzWzBdO1xuICAgICAgICBTRVNTSU9OU19DQUNIRS5wdXRTZXNzaW9uKG5ld1Nlc3Npb25JZCwgY3VycmVudFByb3RvY29sKTtcbiAgICAgICAgU0VTU0lPTlNfQ0FDSEUuZ2V0TG9nZ2VyKG5ld1Nlc3Npb25JZCwgY3VycmVudFByb3RvY29sKVxuICAgICAgICAgIC5kZWJ1ZyhgQ2FjaGVkIHRoZSBwcm90b2NvbCB2YWx1ZSAnJHtjdXJyZW50UHJvdG9jb2x9JyBmb3IgdGhlIG5ldyBzZXNzaW9uICR7bmV3U2Vzc2lvbklkfWApO1xuICAgICAgICBpZiAoY3VycmVudFByb3RvY29sID09PSBCYXNlRHJpdmVyLkRSSVZFUl9QUk9UT0NPTC5NSlNPTldQKSB7XG4gICAgICAgICAgZHJpdmVyUmVzID0gZHJpdmVyUmVzWzFdO1xuICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRQcm90b2NvbCA9PT0gQmFzZURyaXZlci5EUklWRVJfUFJPVE9DT0wuVzNDKSB7XG4gICAgICAgICAgZHJpdmVyUmVzID0ge1xuICAgICAgICAgICAgY2FwYWJpbGl0aWVzOiBkcml2ZXJSZXNbMV0sXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBJZiB0aGUgTUpTT05XUCBlbGVtZW50IGtleSBmb3JtYXQgKEVMRU1FTlQpIHdhcyBwcm92aWRlZCwgYWRkIGEgZHVwbGljYXRlIGtleSAoZWxlbWVudC02MDY2LTExZTQtYTUyZS00ZjczNTQ2NmNlY2YpXG4gICAgICAvLyBJZiB0aGUgVzNDIGVsZW1lbnQga2V5IGZvcm1hdCAoZWxlbWVudC02MDY2LTExZTQtYTUyZS00ZjczNTQ2NmNlY2YpIHdhcyBwcm92aWRlZCwgYWRkIGEgZHVwbGljYXRlIGtleSAoRUxFTUVOVClcbiAgICAgIGlmIChkcml2ZXJSZXMpIHtcbiAgICAgICAgZHJpdmVyUmVzID0gZHVwbGljYXRlS2V5cyhkcml2ZXJSZXMsIE1KU09OV1BfRUxFTUVOVF9LRVksIFczQ19FTEVNRU5UX0tFWSk7XG4gICAgICB9XG5cbiAgICAgIC8vIGNvbnZlcnQgdW5kZWZpbmVkIHRvIG51bGwsIGJ1dCBsZWF2ZSBhbGwgb3RoZXIgdmFsdWVzIHRoZSBzYW1lXG4gICAgICBpZiAoXy5pc1VuZGVmaW5lZChkcml2ZXJSZXMpKSB7XG4gICAgICAgIGRyaXZlclJlcyA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIC8vIGRlbGV0ZSBzaG91bGQgbm90IHJldHVybiBhbnl0aGluZyBldmVuIGlmIHN1Y2Nlc3NmdWxcbiAgICAgIGlmIChzcGVjLmNvbW1hbmQgPT09IERFTEVURV9TRVNTSU9OX0NPTU1BTkQpIHtcbiAgICAgICAgU0VTU0lPTlNfQ0FDSEUuZ2V0TG9nZ2VyKHJlcS5wYXJhbXMuc2Vzc2lvbklkLCBjdXJyZW50UHJvdG9jb2wpXG4gICAgICAgICAgLmRlYnVnKGBSZWNlaXZlZCByZXNwb25zZTogJHtfLnRydW5jYXRlKEpTT04uc3RyaW5naWZ5KGRyaXZlclJlcyksIHtsZW5ndGg6IExPR19PQkpfTEVOR1RIfSl9YCk7XG4gICAgICAgIFNFU1NJT05TX0NBQ0hFLmdldExvZ2dlcihyZXEucGFyYW1zLnNlc3Npb25JZCwgY3VycmVudFByb3RvY29sKS5kZWJ1ZygnQnV0IGRlbGV0aW5nIHNlc3Npb24sIHNvIG5vdCByZXR1cm5pbmcnKTtcbiAgICAgICAgZHJpdmVyUmVzID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgLy8gaWYgdGhlIHN0YXR1cyBpcyBub3QgMCwgIHRocm93IHRoZSBhcHByb3ByaWF0ZSBlcnJvciBmb3Igc3RhdHVzIGNvZGUuXG4gICAgICBpZiAodXRpbC5oYXNWYWx1ZShkcml2ZXJSZXMpKSB7XG4gICAgICAgIGlmICh1dGlsLmhhc1ZhbHVlKGRyaXZlclJlcy5zdGF0dXMpICYmICFpc05hTihkcml2ZXJSZXMuc3RhdHVzKSAmJiBwYXJzZUludChkcml2ZXJSZXMuc3RhdHVzLCAxMCkgIT09IDApIHtcbiAgICAgICAgICB0aHJvdyBlcnJvckZyb21NSlNPTldQU3RhdHVzQ29kZShkcml2ZXJSZXMuc3RhdHVzLCBkcml2ZXJSZXMudmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKF8uaXNQbGFpbk9iamVjdChkcml2ZXJSZXMudmFsdWUpICYmIGRyaXZlclJlcy52YWx1ZS5lcnJvcikge1xuICAgICAgICAgIHRocm93IGVycm9yRnJvbVczQ0pzb25Db2RlKGRyaXZlclJlcy52YWx1ZS5lcnJvciwgZHJpdmVyUmVzLnZhbHVlLm1lc3NhZ2UsIGRyaXZlclJlcy52YWx1ZS5zdGFja3RyYWNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBSZXNwb25zZSBzdGF0dXMgc2hvdWxkIGJlIHRoZSBzdGF0dXMgc2V0IGJ5IHRoZSBkcml2ZXIgcmVzcG9uc2UuXG4gICAgICBpZiAoY3VycmVudFByb3RvY29sICE9PSBCYXNlRHJpdmVyLkRSSVZFUl9QUk9UT0NPTC5XM0MpIHtcbiAgICAgICAgaHR0cFJlc0JvZHkuc3RhdHVzID0gKF8uaXNOaWwoZHJpdmVyUmVzKSB8fCBfLmlzVW5kZWZpbmVkKGRyaXZlclJlcy5zdGF0dXMpKSA/IEpTT05XUF9TVUNDRVNTX1NUQVRVU19DT0RFIDogZHJpdmVyUmVzLnN0YXR1cztcbiAgICAgIH1cbiAgICAgIGh0dHBSZXNCb2R5LnZhbHVlID0gZHJpdmVyUmVzO1xuICAgICAgU0VTU0lPTlNfQ0FDSEUuZ2V0TG9nZ2VyKHJlcS5wYXJhbXMuc2Vzc2lvbklkIHx8IG5ld1Nlc3Npb25JZCwgY3VycmVudFByb3RvY29sKS5kZWJ1ZyhgUmVzcG9uZGluZyBgICtcbiAgICAgICAgYHRvIGNsaWVudCB3aXRoIGRyaXZlci4ke3NwZWMuY29tbWFuZH0oKSByZXN1bHQ6ICR7Xy50cnVuY2F0ZShKU09OLnN0cmluZ2lmeShkcml2ZXJSZXMpLCB7bGVuZ3RoOiBMT0dfT0JKX0xFTkdUSH0pfWApO1xuXG4gICAgICBpZiAoc3BlYy5jb21tYW5kID09PSBERUxFVEVfU0VTU0lPTl9DT01NQU5EKSB7XG4gICAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8ga2VlcCB0aGUgbG9nZ2VyIGluc3RhbmNlIGluIHRoZSBjYWNoZVxuICAgICAgICAvLyBhZnRlciB0aGUgc2Vzc2lvbiBpcyBkZWxldGVkLCBiZWNhdXNlIGl0IGNvbnRhaW5zIHRoZSBsb2dnaW5nIGhpc3RvcnlcbiAgICAgICAgLy8gYW5kIGNvbnN1bWVzIHRoZSBtZW1vcnlcbiAgICAgICAgU0VTU0lPTlNfQ0FDSEUucmVzZXRMb2dnZXIocmVxLnBhcmFtcy5zZXNzaW9uSWQpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgLy8gaWYgYW55dGhpbmcgZ29lcyB3cm9uZywgZmlndXJlIG91dCB3aGF0IG91ciByZXNwb25zZSBzaG91bGQgYmVcbiAgICAgIC8vIGJhc2VkIG9uIHRoZSB0eXBlIG9mIGVycm9yIHRoYXQgd2UgZW5jb3VudGVyZWRcbiAgICAgIGxldCBhY3R1YWxFcnIgPSBlcnI7XG5cbiAgICAgIGN1cnJlbnRQcm90b2NvbCA9IGN1cnJlbnRQcm90b2NvbCB8fCBleHRyYWN0UHJvdG9jb2woZHJpdmVyLCByZXEucGFyYW1zLnNlc3Npb25JZCB8fCBuZXdTZXNzaW9uSWQpO1xuXG4gICAgICBsZXQgZXJyTXNnID0gZXJyLnN0YWNrdHJhY2UgfHwgZXJyLnN0YWNrO1xuICAgICAgaWYgKCFfLmluY2x1ZGVzKGVyck1zZywgZXJyLm1lc3NhZ2UpKSB7XG4gICAgICAgIC8vIGlmIHRoZSBtZXNzYWdlIGhhcyBtb3JlIGluZm9ybWF0aW9uLCBhZGQgaXQuIGJ1dCBvZnRlbiB0aGUgbWVzc2FnZVxuICAgICAgICAvLyBpcyB0aGUgZmlyc3QgcGFydCBvZiB0aGUgc3RhY2sgdHJhY2VcbiAgICAgICAgZXJyTXNnID0gYCR7ZXJyLm1lc3NhZ2V9JHtlcnJNc2cgPyAoJ1xcbicgKyBlcnJNc2cpIDogJyd9YDtcbiAgICAgIH1cbiAgICAgIFNFU1NJT05TX0NBQ0hFLmdldExvZ2dlcihyZXEucGFyYW1zLnNlc3Npb25JZCB8fCBuZXdTZXNzaW9uSWQsIGN1cnJlbnRQcm90b2NvbCkuZGVidWcoYEVuY291bnRlcmVkIGAgK1xuICAgICAgICBgaW50ZXJuYWwgZXJyb3IgcnVubmluZyBjb21tYW5kOiAke2Vyck1zZ31gKTtcbiAgICAgIGlmIChpc0Vycm9yVHlwZShlcnIsIGVycm9ycy5Qcm94eVJlcXVlc3RFcnJvcikpIHtcbiAgICAgICAgYWN0dWFsRXJyID0gZXJyLmdldEFjdHVhbEVycm9yKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjdXJyZW50UHJvdG9jb2wgPT09IEJhc2VEcml2ZXIuRFJJVkVSX1BST1RPQ09MLlczQykge1xuICAgICAgICBbaHR0cFN0YXR1cywgaHR0cFJlc0JvZHldID0gZ2V0UmVzcG9uc2VGb3JXM0NFcnJvcihhY3R1YWxFcnIpO1xuICAgICAgfSBlbHNlIGlmIChjdXJyZW50UHJvdG9jb2wgPT09IEJhc2VEcml2ZXIuRFJJVkVSX1BST1RPQ09MLk1KU09OV1ApIHtcbiAgICAgICAgW2h0dHBTdGF0dXMsIGh0dHBSZXNCb2R5XSA9IGdldFJlc3BvbnNlRm9ySnNvbndwRXJyb3IoYWN0dWFsRXJyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIElmIGl0J3MgdW5rbm93biB3aGF0IHRoZSBwcm90b2NvbCBpcyAobGlrZSBpZiBpdCdzIGBnZXRTdGF0dXNgIHByaW9yIHRvIGBjcmVhdGVTZXNzaW9uYCksIG1lcmdlIHRoZSByZXNwb25zZXNcbiAgICAgICAgLy8gdG9nZXRoZXIgdG8gYmUgcHJvdG9jb2wtYWdub3N0aWNcbiAgICAgICAgbGV0IGpzb253cFJlcyA9IGdldFJlc3BvbnNlRm9ySnNvbndwRXJyb3IoYWN0dWFsRXJyKTtcbiAgICAgICAgbGV0IHczY1JlcyA9IGdldFJlc3BvbnNlRm9yVzNDRXJyb3IoYWN0dWFsRXJyKTtcblxuICAgICAgICBodHRwUmVzQm9keSA9IHtcbiAgICAgICAgICAuLi5qc29ud3BSZXNbMV0sXG4gICAgICAgICAgLi4udzNjUmVzWzFdLFxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFVzZSB0aGUgSlNPTldQIHN0YXR1cyBjb2RlICh3aGljaCBpcyB1c3VhbGx5IDUwMClcbiAgICAgICAgaHR0cFN0YXR1cyA9IGpzb253cFJlc1swXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBkZWNvZGUgdGhlIHJlc3BvbnNlLCB3aGljaCBpcyBlaXRoZXIgYSBzdHJpbmcgb3IganNvblxuICAgIGlmIChfLmlzU3RyaW5nKGh0dHBSZXNCb2R5KSkge1xuICAgICAgcmVzLnN0YXR1cyhodHRwU3RhdHVzKS5zZW5kKGh0dHBSZXNCb2R5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG5ld1Nlc3Npb25JZCkge1xuICAgICAgICBpZiAoY3VycmVudFByb3RvY29sID09PSBCYXNlRHJpdmVyLkRSSVZFUl9QUk9UT0NPTC5XM0MpIHtcbiAgICAgICAgICBodHRwUmVzQm9keS52YWx1ZS5zZXNzaW9uSWQgPSBuZXdTZXNzaW9uSWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaHR0cFJlc0JvZHkuc2Vzc2lvbklkID0gbmV3U2Vzc2lvbklkO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBodHRwUmVzQm9keS5zZXNzaW9uSWQgPSByZXEucGFyYW1zLnNlc3Npb25JZCB8fCBudWxsO1xuICAgICAgfVxuXG4gICAgICAvLyBEb24ndCBpbmNsdWRlIHNlc3Npb25JZCBpbiBXM0MgcmVzcG9uc2VzXG4gICAgICBpZiAoY3VycmVudFByb3RvY29sID09PSBCYXNlRHJpdmVyLkRSSVZFUl9QUk9UT0NPTC5XM0MpIHtcbiAgICAgICAgZGVsZXRlIGh0dHBSZXNCb2R5LnNlc3Npb25JZDtcbiAgICAgIH1cbiAgICAgIHJlcy5zdGF0dXMoaHR0cFN0YXR1cykuanNvbihodHRwUmVzQm9keSk7XG4gICAgfVxuICB9O1xuICAvLyBhZGQgdGhlIG1ldGhvZCB0byB0aGUgYXBwXG4gIGFwcFttZXRob2QudG9Mb3dlckNhc2UoKV0ocGF0aCwgKHJlcSwgcmVzKSA9PiB7XG4gICAgQi5yZXNvbHZlKGFzeW5jSGFuZGxlcihyZXEsIHJlcykpLmRvbmUoKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGRyaXZlclNob3VsZERvSndwUHJveHkgKGRyaXZlciwgcmVxLCBjb21tYW5kKSB7XG4gIC8vIGRyaXZlcnMgbmVlZCB0byBleHBsaWNpdGx5IHNheSB3aGVuIHRoZSBwcm94eSBpcyBhY3RpdmVcbiAgaWYgKCFkcml2ZXIucHJveHlBY3RpdmUocmVxLnBhcmFtcy5zZXNzaW9uSWQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gd2Ugc2hvdWxkIG5ldmVyIHByb3h5IGRlbGV0ZVNlc3Npb24gYmVjYXVzZSB3ZSBuZWVkIHRvIGdpdmUgdGhlIGNvbnRhaW5pbmdcbiAgLy8gZHJpdmVyIGFuIG9wcG9ydHVuaXR5IHRvIGNsZWFuIGl0c2VsZiB1cFxuICBpZiAoY29tbWFuZCA9PT0gJ2RlbGV0ZVNlc3Npb24nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gdmFsaWRhdGUgYXZvaWRhbmNlIHNjaGVtYSwgYW5kIHNheSB3ZSBzaG91bGRuJ3QgcHJveHkgaWYgYW55dGhpbmcgaW4gdGhlXG4gIC8vIGF2b2lkIGxpc3QgbWF0Y2hlcyBvdXIgcmVxXG4gIGlmIChkcml2ZXIucHJveHlSb3V0ZUlzQXZvaWRlZChyZXEucGFyYW1zLnNlc3Npb25JZCwgcmVxLm1ldGhvZCwgcmVxLm9yaWdpbmFsVXJsKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIGlmIGl0IGxvb2tzIGxpa2Ugd2UgaGF2ZSBhbiBpbWFnZSBlbGVtZW50IGluIHRoZSB1cmwgKGFzIGEgcm91dGVcbiAgLy8gcGFyYW1ldGVyKSwgbmV2ZXIgcHJveHkuIEp1c3QgbG9vayBmb3Igb3VyIGltYWdlIGVsZW1lbnQgcHJlZml4IGluIGFsbG93ZWRcbiAgLy8gcG9zaXRpb25zIChlaXRoZXIgYWZ0ZXIgYW4gJ2VsZW1lbnQnIG9yICdzY3JlZW5zaG90JyBwYXRoIHNlZ21lbnQpLCBhbmRcbiAgLy8gZW5zdXJlIHRoZSBwcmVmaXggaXMgZm9sbG93ZWQgYnkgc29tZXRoaW5nXG4gIGlmIChJTUdfRUxfVVJMX1JFLnRlc3QocmVxLm9yaWdpbmFsVXJsKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG5cbiAgLy8gYWxzbyBpZiBpdCBsb29rcyBsaWtlIHdlIGhhdmUgYW4gaW1hZ2UgZWxlbWVudCBpbiB0aGUgcmVxdWVzdCBib2R5IChhc1xuICAvLyBhIEpTT04gcGFyYW1ldGVyKSwgbmV2ZXIgcHJveHkuIEJhc2ljYWxseSBjaGVjayBhZ2FpbnN0IGEgcmVnZXhwIG9mIHRoZVxuICAvLyBqc29uIHN0cmluZyBvZiB0aGUgYm9keSwgd2hlcmUgd2Uga25vdyB3aGF0IHRoZSBmb3JtIG9mIGFuIGltYWdlIGVsZW1lbnRcbiAgLy8gbXVzdCBiZVxuICBjb25zdCBzdHJpbmdCb2R5ID0gSlNPTi5zdHJpbmdpZnkocmVxLmJvZHkpO1xuICBpZiAoc3RyaW5nQm9keSAmJiBJTUdfRUxfQk9EWV9SRS50ZXN0KHN0cmluZ0JvZHkpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRvSndwUHJveHkgKGRyaXZlciwgcmVxLCByZXMpIHtcbiAgU0VTU0lPTlNfQ0FDSEUuZ2V0TG9nZ2VyKHJlcS5wYXJhbXMuc2Vzc2lvbklkLCBleHRyYWN0UHJvdG9jb2woZHJpdmVyLCByZXEucGFyYW1zLnNlc3Npb25JZCkpXG4gICAgLmluZm8oJ0RyaXZlciBwcm94eSBhY3RpdmUsIHBhc3NpbmcgcmVxdWVzdCBvbiB2aWEgSFRUUCBwcm94eScpO1xuXG4gIC8vIGNoZWNrIHRoYXQgdGhlIGlubmVyIGRyaXZlciBoYXMgYSBwcm94eSBmdW5jdGlvblxuICBpZiAoIWRyaXZlci5jYW5Qcm94eShyZXEucGFyYW1zLnNlc3Npb25JZCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyeWluZyB0byBwcm94eSB0byBhIEpTT05XUCBzZXJ2ZXIgYnV0IGRyaXZlciBpcyB1bmFibGUgdG8gcHJveHknKTtcbiAgfVxuICB0cnkge1xuICAgIGNvbnN0IHByb3hpZWRSZXMgPSBhd2FpdCBkcml2ZXIuZXhlY3V0ZUNvbW1hbmQoJ3Byb3h5UmVxUmVzJywgcmVxLCByZXMsIHJlcS5wYXJhbXMuc2Vzc2lvbklkKTtcbiAgICBpZiAocHJveGllZFJlcyAmJiBwcm94aWVkUmVzLmVycm9yKSB0aHJvdyBwcm94aWVkUmVzLmVycm9yOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGN1cmx5XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChpc0Vycm9yVHlwZShlcnIsIGVycm9ycy5Qcm94eVJlcXVlc3RFcnJvcikpIHtcbiAgICAgIHRocm93IGVycjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgcHJveHkuIFByb3h5IGVycm9yOiAke2Vyci5tZXNzYWdlfWApO1xuICAgIH1cbiAgfVxufVxuXG5cbmV4cG9ydCB7XG4gIFByb3RvY29sLCByb3V0ZUNvbmZpZ3VyaW5nRnVuY3Rpb24sIGlzU2Vzc2lvbkNvbW1hbmQsXG4gIE1KU09OV1BfRUxFTUVOVF9LRVksIFczQ19FTEVNRU5UX0tFWSwgSU1BR0VfRUxFTUVOVF9QUkVGSVgsXG4gIGRyaXZlclNob3VsZERvSndwUHJveHksXG59O1xuIl0sImZpbGUiOiJsaWIvcHJvdG9jb2wvcHJvdG9jb2wuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
