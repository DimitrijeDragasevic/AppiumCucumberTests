"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.CUSTOM_STRATEGY = exports.IMAGE_STRATEGY = exports.helpers = exports.commands = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger"));

var _appiumSupport = require("appium-support");

var _lodash = _interopRequireDefault(require("lodash"));

var _2 = require("../../..");

var _images = require("./images");

var _protocol = require("../../protocol/protocol");

var _imageElement = require("../image-element");

const commands = {},
      helpers = {},
      extensions = {};
exports.helpers = helpers;
exports.commands = commands;
const IMAGE_STRATEGY = '-image';
exports.IMAGE_STRATEGY = IMAGE_STRATEGY;
const CUSTOM_STRATEGY = '-custom';
exports.CUSTOM_STRATEGY = CUSTOM_STRATEGY;
const FLOAT_PRECISION = 100000;

helpers.findElOrElsWithProcessing = async function findElOrElsWithProcessing(strategy, selector, mult, context) {
  this.validateLocatorStrategy(strategy);

  try {
    return await this.findElOrEls(strategy, selector, mult, context);
  } catch (err) {
    if (this.opts.printPageSourceOnFindFailure) {
      const src = await this.getPageSource();

      _logger.default.debug(`Error finding element${mult ? 's' : ''}: ${err.message}`);

      _logger.default.debug(`Page source requested through 'printPageSourceOnFindFailure':`);

      _logger.default.debug(src);
    }

    throw err;
  }
};

commands.findElement = async function findElement(strategy, selector) {
  if (strategy === IMAGE_STRATEGY) {
    return await this.findByImage(selector, {
      multiple: false
    });
  } else if (strategy === CUSTOM_STRATEGY) {
    return await this.findByCustom(selector, false);
  }

  return await this.findElOrElsWithProcessing(strategy, selector, false);
};

commands.findElements = async function findElements(strategy, selector) {
  if (strategy === IMAGE_STRATEGY) {
    return await this.findByImage(selector, {
      multiple: true
    });
  } else if (strategy === CUSTOM_STRATEGY) {
    return await this.findByCustom(selector, true);
  }

  return await this.findElOrElsWithProcessing(strategy, selector, true);
};

commands.findElementFromElement = async function findElementFromElement(strategy, selector, elementId) {
  return await this.findElOrElsWithProcessing(strategy, selector, false, elementId);
};

commands.findElementsFromElement = async function findElementsFromElement(strategy, selector, elementId) {
  return await this.findElOrElsWithProcessing(strategy, selector, true, elementId);
};

commands.findByCustom = async function findByCustom(selector, multiple) {
  const plugins = this.opts.customFindModules;

  if (!plugins) {
    throw new Error('Finding an element using a plugin is currently an ' + 'incubating feature. To use it you must manually install one or more ' + 'plugin modules in a way that they can be required by Appium, for ' + 'example installing them from the Appium directory, installing them ' + 'globally, or installing them elsewhere and passing an absolute path as ' + 'the capability. Then construct an object where the key is the shortcut ' + 'name for this plugin and the value is the module name or absolute path, ' + 'for example: {"p1": "my-find-plugin"}, and pass this in as the ' + "'customFindModules' capability.");
  }

  if (!_lodash.default.isPlainObject(plugins)) {
    throw new Error("Invalid format for the 'customFindModules' capability. " + 'It should be an object with keys corresponding to the short names and ' + 'values corresponding to the full names of the element finding plugins');
  }

  let [plugin, realSelector] = selector.split(':');

  if (_lodash.default.size(plugins) > 1 && !realSelector) {
    throw new Error(`Multiple element finding plugins were registered ` + `(${_lodash.default.keys(plugins)}), but your selector did not indicate which plugin ` + `to use. Ensure you put the short name of the plugin followed by ':' as ` + `the initial part of the selector string.`);
  }

  if (_lodash.default.size(plugins) === 1 && !realSelector) {
    realSelector = plugin;
    plugin = _lodash.default.keys(plugins)[0];
  }

  if (!plugins[plugin]) {
    throw new Error(`Selector specified use of element finding plugin ` + `'${plugin}' but it was not registered in the 'customFindModules' ` + `capability.`);
  }

  let finder;

  try {
    _logger.default.debug(`Find plugin '${plugin}' requested; will attempt to use it ` + `from '${plugins[plugin]}'`);

    finder = require(plugins[plugin]);
  } catch (err) {
    throw new Error(`Could not load your custom find module '${plugin}'. Did ` + `you put it somewhere Appium can 'require' it? Original error: ${err}`);
  }

  if (!finder || !_lodash.default.isFunction(finder.find)) {
    throw new Error('Your custom find module did not appear to be constructed ' + 'correctly. It needs to export an object with a `find` method.');
  }

  const customFinderLog = _appiumSupport.logger.getLogger(plugin);

  let elements;

  const condition = async () => {
    elements = await finder.find(this, customFinderLog, realSelector, multiple);

    if (!_lodash.default.isEmpty(elements) || multiple) {
      return true;
    }

    return false;
  };

  try {
    await this.implicitWaitForCondition(condition);
  } catch (err) {
    if (err.message.match(/Condition unmet/)) {
      throw new _2.errors.NoSuchElementError();
    }

    throw err;
  }

  return multiple ? elements : elements[0];
};

helpers.findByImage = async function findByImage(b64Template, {
  shouldCheckStaleness = false,
  multiple = false,
  ignoreDefaultImageTemplateScale = false
}) {
  const {
    imageMatchThreshold: threshold,
    fixImageTemplateSize,
    fixImageTemplateScale,
    defaultImageTemplateScale
  } = this.settings.getSettings();

  _logger.default.info(`Finding image element with match threshold ${threshold}`);

  if (!this.getWindowSize) {
    throw new Error("This driver does not support the required 'getWindowSize' command");
  }

  const {
    width: screenWidth,
    height: screenHeight
  } = await this.getWindowSize();

  if (fixImageTemplateSize) {
    b64Template = await this.ensureTemplateSize(b64Template, screenWidth, screenHeight);
  }

  let rect = null;

  const condition = async () => {
    try {
      const {
        b64Screenshot,
        scale
      } = await this.getScreenshotForImageFind(screenWidth, screenHeight);
      b64Template = await this.fixImageTemplateScale(b64Template, (0, _objectSpread2.default)({
        defaultImageTemplateScale,
        ignoreDefaultImageTemplateScale,
        fixImageTemplateScale
      }, scale));
      rect = (await this.compareImages(_images.MATCH_TEMPLATE_MODE, b64Screenshot, b64Template, {
        threshold
      })).rect;
      return true;
    } catch (err) {
      if (err.message.match(/Cannot find any occurrences/)) {
        return false;
      }

      throw err;
    }
  };

  try {
    await this.implicitWaitForCondition(condition);
  } catch (err) {
    if (!err.message.match(/Condition unmet/)) {
      throw err;
    }
  }

  if (!rect) {
    if (multiple) {
      return [];
    }

    throw new _2.errors.NoSuchElementError();
  }

  _logger.default.info(`Image template matched: ${JSON.stringify(rect)}`);

  const imgEl = new _imageElement.ImageElement(b64Template, rect);

  if (shouldCheckStaleness) {
    return imgEl;
  }

  this._imgElCache.set(imgEl.id, imgEl);

  const protoKey = this.isW3CProtocol() ? _protocol.W3C_ELEMENT_KEY : _protocol.MJSONWP_ELEMENT_KEY;
  const protocolEl = imgEl.asElement(protoKey);
  return multiple ? [protocolEl] : protocolEl;
};

helpers.ensureTemplateSize = async function ensureTemplateSize(b64Template, screenWidth, screenHeight) {
  let imgObj = await _appiumSupport.imageUtil.getJimpImage(b64Template);
  let {
    width: tplWidth,
    height: tplHeight
  } = imgObj.bitmap;

  _logger.default.info(`Template image is ${tplWidth}x${tplHeight}. Screen size is ${screenWidth}x${screenHeight}`);

  if (tplWidth <= screenWidth && tplHeight <= screenHeight) {
    return b64Template;
  }

  _logger.default.info(`Scaling template image from ${tplWidth}x${tplHeight} to match ` + `screen at ${screenWidth}x${screenHeight}`);

  imgObj = imgObj.scaleToFit(screenWidth, screenHeight);
  return (await imgObj.getBuffer(_appiumSupport.imageUtil.MIME_PNG)).toString('base64');
};

helpers.getScreenshotForImageFind = async function getScreenshotForImageFind(screenWidth, screenHeight) {
  if (!this.getScreenshot) {
    throw new Error("This driver does not support the required 'getScreenshot' command");
  }

  let b64Screenshot = await this.getScreenshot();

  if (!this.settings.getSettings().fixImageFindScreenshotDims) {
    _logger.default.info(`Not verifying screenshot dimensions match screen`);

    return {
      b64Screenshot
    };
  }

  _logger.default.info('Verifying screenshot size and aspect ratio');

  let imgObj = await _appiumSupport.imageUtil.getJimpImage(b64Screenshot);
  let {
    width: shotWidth,
    height: shotHeight
  } = imgObj.bitmap;

  if (screenWidth === shotWidth && screenHeight === shotHeight) {
    _logger.default.info('Screenshot size matched screen size');

    return {
      b64Screenshot
    };
  }

  const scale = {
    xScale: 1.0,
    yScale: 1.0
  };
  const screenAR = screenWidth / screenHeight;
  const shotAR = shotWidth / shotHeight;

  if (Math.round(screenAR * FLOAT_PRECISION) === Math.round(shotAR * FLOAT_PRECISION)) {
    _logger.default.info(`Screenshot aspect ratio '${shotAR}' (${shotWidth}x${shotHeight}) matched ` + `screen aspect ratio '${screenAR}' (${screenWidth}x${screenHeight})`);
  } else {
    _logger.default.warn(`When trying to find an element, determined that the screen ` + `aspect ratio and screenshot aspect ratio are different. Screen ` + `is ${screenWidth}x${screenHeight} whereas screenshot is ` + `${shotWidth}x${shotHeight}.`);

    const xScale = 1.0 * shotWidth / screenWidth;
    const yScale = 1.0 * shotHeight / screenHeight;
    const scaleFactor = xScale >= yScale ? yScale : xScale;

    _logger.default.warn(`Resizing screenshot to ${shotWidth * scaleFactor}x${shotHeight * scaleFactor} to match ` + `screen aspect ratio so that image element coordinates have a ` + `greater chance of being correct.`);

    imgObj = imgObj.resize(shotWidth * scaleFactor, shotHeight * scaleFactor);
    scale.xScale *= scaleFactor;
    scale.yScale *= scaleFactor;
    shotWidth = imgObj.bitmap.width;
    shotHeight = imgObj.bitmap.height;
  }

  if (screenWidth !== shotWidth && screenHeight !== shotHeight) {
    _logger.default.info(`Scaling screenshot from ${shotWidth}x${shotHeight} to match ` + `screen at ${screenWidth}x${screenHeight}`);

    imgObj = imgObj.resize(screenWidth, screenHeight);
    scale.xScale *= 1.0 * screenWidth / shotWidth;
    scale.yScale *= 1.0 * screenHeight / shotHeight;
  }

  b64Screenshot = (await imgObj.getBuffer(_appiumSupport.imageUtil.MIME_PNG)).toString('base64');
  return {
    b64Screenshot,
    scale
  };
};

const DEFAULT_FIX_IMAGE_TEMPLATE_SCALE = 1;

helpers.fixImageTemplateScale = async function fixImageTemplateScale(b64Template, opts = {}) {
  if (!opts) {
    return b64Template;
  }

  let {
    fixImageTemplateScale = false,
    defaultImageTemplateScale = _imageElement.DEFAULT_TEMPLATE_IMAGE_SCALE,
    ignoreDefaultImageTemplateScale = false,
    xScale = DEFAULT_FIX_IMAGE_TEMPLATE_SCALE,
    yScale = DEFAULT_FIX_IMAGE_TEMPLATE_SCALE
  } = opts;

  if (ignoreDefaultImageTemplateScale) {
    defaultImageTemplateScale = _imageElement.DEFAULT_TEMPLATE_IMAGE_SCALE;
  }

  if (defaultImageTemplateScale === _imageElement.DEFAULT_TEMPLATE_IMAGE_SCALE && !fixImageTemplateScale) {
    return b64Template;
  }

  if (fixImageTemplateScale) {
    xScale *= defaultImageTemplateScale;
    yScale *= defaultImageTemplateScale;
  } else {
    xScale = yScale = 1 * defaultImageTemplateScale;
  }

  if (!parseFloat(xScale) || !parseFloat(yScale)) {
    return b64Template;
  }

  if (Math.round(xScale * FLOAT_PRECISION) === Math.round(DEFAULT_FIX_IMAGE_TEMPLATE_SCALE * FLOAT_PRECISION) && Math.round(yScale * FLOAT_PRECISION === Math.round(DEFAULT_FIX_IMAGE_TEMPLATE_SCALE * FLOAT_PRECISION))) {
    return b64Template;
  }

  let imgTempObj = await _appiumSupport.imageUtil.getJimpImage(b64Template);
  let {
    width: baseTempWidth,
    height: baseTempHeigh
  } = imgTempObj.bitmap;
  const scaledWidth = baseTempWidth * xScale;
  const scaledHeight = baseTempHeigh * yScale;

  _logger.default.info(`Scaling template image from ${baseTempWidth}x${baseTempHeigh}` + ` to ${scaledWidth}x${scaledHeight}`);

  _logger.default.info(`The ratio is ${xScale} and ${yScale}`);

  imgTempObj = await imgTempObj.resize(scaledWidth, scaledHeight);
  return (await imgTempObj.getBuffer(_appiumSupport.imageUtil.MIME_PNG)).toString('base64');
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
