"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseCaps = parseCaps;
exports.processCapabilities = processCapabilities;
exports.validateCaps = validateCaps;
exports.mergeCaps = mergeCaps;
exports.findNonPrefixedCaps = findNonPrefixedCaps;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _desiredCaps = require("./desired-caps");

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("./logger"));

var _errors = require("../protocol/errors");

function mergeCaps(primary = {}, secondary = {}) {
  let result = Object.assign({}, primary);

  for (let [name, value] of _lodash.default.toPairs(secondary)) {
    if (!_lodash.default.isUndefined(primary[name])) {
      throw new _errors.errors.InvalidArgumentError(`property '${name}' should not exist on both primary (${JSON.stringify(primary)}) and secondary (${JSON.stringify(secondary)}) object`);
    }

    result[name] = value;
  }

  return result;
}

function validateCaps(caps, constraints = {}, opts = {}) {
  let {
    skipPresenceConstraint
  } = opts;

  if (!_lodash.default.isPlainObject(caps)) {
    throw new _errors.errors.InvalidArgumentError(`must be a JSON object`);
  }

  constraints = _lodash.default.cloneDeep(constraints);

  if (skipPresenceConstraint) {
    for (let key of _lodash.default.keys(constraints)) {
      delete constraints[key].presence;
    }
  }

  let validationErrors = _desiredCaps.validator.validate(_lodash.default.pickBy(caps, _appiumSupport.util.hasValue), constraints, {
    fullMessages: false
  });

  if (validationErrors) {
    let message = [];

    for (let [attribute, reasons] of _lodash.default.toPairs(validationErrors)) {
      for (let reason of reasons) {
        message.push(`'${attribute}' ${reason}`);
      }
    }

    throw new _errors.errors.InvalidArgumentError(message.join('; '));
  }

  return caps;
}

const STANDARD_CAPS = ['browserName', 'browserVersion', 'platformName', 'acceptInsecureCerts', 'pageLoadStrategy', 'proxy', 'setWindowRect', 'timeouts', 'unhandledPromptBehavior'];

function isStandardCap(cap) {
  return !!_lodash.default.find(STANDARD_CAPS, standardCap => standardCap.toLowerCase() === `${cap}`.toLowerCase());
}

function stripAppiumPrefixes(caps) {
  const prefix = 'appium:';

  const prefixedCaps = _lodash.default.filter(_lodash.default.keys(caps), cap => `${cap}`.startsWith(prefix));

  const badPrefixedCaps = [];

  for (let prefixedCap of prefixedCaps) {
    const strippedCapName = prefixedCap.substr(prefix.length);

    if (isStandardCap(strippedCapName)) {
      badPrefixedCaps.push(strippedCapName);
    }

    caps[strippedCapName] = caps[prefixedCap];
    delete caps[prefixedCap];
  }

  if (badPrefixedCaps.length > 0) {
    throw new _errors.errors.InvalidArgumentError(`The capabilities ${JSON.stringify(badPrefixedCaps)} are standard capabilities and should not have the "appium:" prefix`);
  }
}

function findNonPrefixedCaps({
  alwaysMatch = {},
  firstMatch = []
}) {
  return _lodash.default.chain([alwaysMatch, ...firstMatch]).reduce((unprefixedCaps, caps) => [...unprefixedCaps, ...(0, _lodash.default)(caps).keys().filter(cap => !cap.includes(':') && !isStandardCap(cap))], []).uniq().value();
}

function parseCaps(caps, constraints = {}, shouldValidateCaps = true) {
  if (!_lodash.default.isPlainObject(caps)) {
    throw new _errors.errors.InvalidArgumentError('The capabilities argument was not valid for the following reason(s): "capabilities" must be a JSON object.');
  }

  let {
    alwaysMatch: requiredCaps = {},
    firstMatch: allFirstMatchCaps = [{}]
  } = caps;

  if (!_lodash.default.isArray(allFirstMatchCaps)) {
    throw new _errors.errors.InvalidArgumentError('The capabilities.firstMatch argument was not valid for the following reason(s): "capabilities.firstMatch" must be a JSON array or undefined');
  }

  if (allFirstMatchCaps.length === 0) {
    allFirstMatchCaps.push({});
  }

  let nonPrefixedCaps = findNonPrefixedCaps(caps);

  if (!_lodash.default.isEmpty(nonPrefixedCaps)) {
    _logger.default.warn(`The capabilities ${JSON.stringify(nonPrefixedCaps)} are not standard capabilities and should have an extension prefix`);
  }

  stripAppiumPrefixes(requiredCaps);

  for (let firstMatchCaps of allFirstMatchCaps) {
    stripAppiumPrefixes(firstMatchCaps);
  }

  if (shouldValidateCaps) {
    requiredCaps = validateCaps(requiredCaps, constraints, {
      skipPresenceConstraint: true
    });
  }

  let filteredConstraints = (0, _objectSpread2.default)({}, constraints);

  let requiredCapsKeys = _lodash.default.keys(requiredCaps);

  for (let key of _lodash.default.keys(filteredConstraints)) {
    if (requiredCapsKeys.includes(key)) {
      delete filteredConstraints[key];
    }
  }

  let validationErrors = [];
  let validatedFirstMatchCaps = allFirstMatchCaps.map(firstMatchCaps => {
    try {
      return shouldValidateCaps ? validateCaps(firstMatchCaps, filteredConstraints) : firstMatchCaps;
    } catch (e) {
      validationErrors.push(e.message);
      return null;
    }
  }).filter(caps => !_lodash.default.isNull(caps));
  let matchedCaps = null;

  for (let firstMatchCaps of validatedFirstMatchCaps) {
    try {
      matchedCaps = mergeCaps(requiredCaps, firstMatchCaps);

      if (matchedCaps) {
        break;
      }
    } catch (err) {
      _logger.default.warn(err.message);
    }
  }

  return {
    requiredCaps,
    allFirstMatchCaps,
    validatedFirstMatchCaps,
    matchedCaps,
    validationErrors
  };
}

function processCapabilities(caps, constraints = {}, shouldValidateCaps = true) {
  const {
    matchedCaps,
    validationErrors
  } = parseCaps(caps, constraints, shouldValidateCaps);

  if (!_appiumSupport.util.hasValue(matchedCaps)) {
    if (_lodash.default.isArray(caps.firstMatch) && caps.firstMatch.length > 1) {
      throw new _errors.errors.InvalidArgumentError(`Could not find matching capabilities from ${JSON.stringify(caps)}:\n ${validationErrors.join('\n')}`);
    } else {
      throw new _errors.errors.InvalidArgumentError(validationErrors[0]);
    }
  }

  return matchedCaps;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
