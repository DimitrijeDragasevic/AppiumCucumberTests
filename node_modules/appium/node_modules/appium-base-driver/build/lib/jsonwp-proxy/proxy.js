"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.JWProxy = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _requestPromise = _interopRequireDefault(require("request-promise"));

var _status = require("../jsonwp-status/status");

var _errors = require("../protocol/errors");

var _driver = _interopRequireDefault(require("../basedriver/driver"));

var _routes = require("../protocol/routes");

var _protocolConverter = _interopRequireDefault(require("./protocol-converter"));

const log = _appiumSupport.logger.getLogger('WD Proxy');

const LOG_OBJ_LENGTH = 1024;
const DEFAULT_REQUEST_TIMEOUT = 240000;
const {
  MJSONWP,
  W3C
} = _driver.default.DRIVER_PROTOCOL;

class JWProxy {
  constructor(opts = {}) {
    Object.assign(this, {
      scheme: 'http',
      server: 'localhost',
      port: 4444,
      base: '/wd/hub',
      sessionId: null,
      timeout: DEFAULT_REQUEST_TIMEOUT
    }, opts);
    this.scheme = this.scheme.toLowerCase();
    this._activeRequests = [];
    this._downstreamProtocol = null;
    this.protocolConverter = new _protocolConverter.default(this.proxy.bind(this));
  }

  async request(...args) {
    const currentRequest = (0, _requestPromise.default)(...args);

    this._activeRequests.push(currentRequest);

    return await currentRequest.finally(() => _lodash.default.pull(this._activeRequests, currentRequest));
  }

  getActiveRequestsCount() {
    return this._activeRequests.length;
  }

  cancelActiveRequests() {
    try {
      for (let r of this._activeRequests) {
        r.cancel();
      }
    } finally {
      this._activeRequests = [];
    }
  }

  endpointRequiresSessionId(endpoint) {
    return !_lodash.default.includes(['/session', '/sessions', '/status'], endpoint);
  }

  set downstreamProtocol(value) {
    this._downstreamProtocol = value;
    this.protocolConverter.downstreamProtocol = value;
  }

  get downstreamProtocol() {
    return this._downstreamProtocol;
  }

  getUrlForProxy(url) {
    if (url === '') {
      url = '/';
    }

    const proxyBase = `${this.scheme}://${this.server}:${this.port}${this.base}`;
    const endpointRe = '(/(session|status))';
    let remainingUrl = '';

    if (/^http/.test(url)) {
      const first = new RegExp(`(https?://.+)${endpointRe}`).exec(url);

      if (!first) {
        throw new Error('Got a complete url but could not extract JWP endpoint');
      }

      remainingUrl = url.replace(first[1], '');
    } else if (new RegExp('^/').test(url)) {
      remainingUrl = url;
    } else {
      throw new Error(`Did not know what to do with url '${url}'`);
    }

    const stripPrefixRe = new RegExp('^.*?(/(session|status).*)$');

    if (stripPrefixRe.test(remainingUrl)) {
      remainingUrl = stripPrefixRe.exec(remainingUrl)[1];
    }

    if (!new RegExp(endpointRe).test(remainingUrl)) {
      remainingUrl = `/session/${this.sessionId}${remainingUrl}`;
    }

    const requiresSessionId = this.endpointRequiresSessionId(remainingUrl);

    if (requiresSessionId && this.sessionId === null) {
      throw new Error('Trying to proxy a session command without session id');
    }

    const sessionBaseRe = new RegExp('^/session/([^/]+)');

    if (sessionBaseRe.test(remainingUrl)) {
      const match = sessionBaseRe.exec(remainingUrl);
      remainingUrl = remainingUrl.replace(match[1], this.sessionId);
    } else if (requiresSessionId) {
      throw new Error(`Could not find :session section for url: ${remainingUrl}`);
    }

    remainingUrl = remainingUrl.replace(/\/$/, '');
    return proxyBase + remainingUrl;
  }

  async proxy(url, method, body = null) {
    method = method.toUpperCase();
    const newUrl = this.getUrlForProxy(url);
    const reqOpts = {
      agent: false,
      url: newUrl,
      method,
      headers: {
        'content-type': 'application/json; charset=utf-8',
        'user-agent': 'appium',
        accept: 'application/json, */*'
      },
      resolveWithFullResponse: true,
      timeout: this.timeout
    };

    if (body !== null) {
      if (typeof body !== 'object') {
        body = JSON.parse(body);
      }

      reqOpts.json = body;
    }

    if (method === 'GET') {
      reqOpts.json = null;
    }

    log.debug(`Proxying [${method} ${url || '/'}] to [${method} ${newUrl}] ` + (body ? `with body: ${_lodash.default.truncate(JSON.stringify(body), {
      length: LOG_OBJ_LENGTH
    })}` : 'with no body'));
    let res, resBody;

    try {
      res = await this.request(reqOpts);
      resBody = res.body;
      log.debug(`Got response with status ${res.statusCode}: ${_lodash.default.truncate(JSON.stringify(resBody), {
        length: LOG_OBJ_LENGTH
      })}`);

      if (/\/session$/.test(url) && method === 'POST') {
        if (res.statusCode === 200) {
          this.sessionId = resBody.sessionId;
        } else if (res.statusCode === 303) {
          this.sessionId = /\/session\/([^/]+)/.exec(resBody)[1];
        }
      }

      const resBodyObj = _appiumSupport.util.safeJsonParse(resBody);

      if (!this.downstreamProtocol) {
        this.downstreamProtocol = this.getProtocolFromResBody(resBodyObj);
        log.debug(`Determined that the downstream protocol for proxy is ${this.downstreamProtocol}`);
      }

      if (res.statusCode < 400 && this.downstreamProtocol === MJSONWP && parseInt(resBodyObj.status, 10) !== 0) {
        const message = `The request to ${url} has failed`;
        const err = new Error(message);
        err.message = message;
        err.error = resBody;
        err.statusCode = 500;
        throw err;
      }
    } catch (e) {
      let responseError = e.error;

      try {
        responseError = JSON.parse(responseError);
      } catch (e1) {
        log.warn(`Got an unexpected response: ` + _lodash.default.truncate(_lodash.default.isString(responseError) ? responseError : JSON.stringify(responseError), {
          length: 300
        }));
      }

      throw new _errors.errors.ProxyRequestError(`Could not proxy command to remote server. ` + `Original error: ${e.message}`, responseError, e.statusCode);
    }

    return [res, resBody];
  }

  getProtocolFromResBody(resBody) {
    if (!_lodash.default.isPlainObject(resBody)) {
      try {
        resBody = JSON.parse(resBody);
      } catch (err) {
        return;
      }
    }

    if (_appiumSupport.util.hasValue(resBody.status)) {
      return MJSONWP;
    }

    if (_appiumSupport.util.hasValue(resBody.value)) {
      return W3C;
    }
  }

  requestToCommandName(url, method) {
    const extractCommandName = pattern => {
      const pathMatch = pattern.exec(url);
      return pathMatch ? (0, _routes.routeToCommandName)(pathMatch[1], method) : null;
    };

    let commandName = (0, _routes.routeToCommandName)(url, method);

    if (!commandName && _lodash.default.includes(url, '/wd/hub/session/')) {
      commandName = extractCommandName(/\/wd\/hub\/session\/[^/]+(.+)/);
    }

    if (!commandName && _lodash.default.includes(url, '/wd/hub/')) {
      commandName = extractCommandName(/\/wd\/hub(\/.+)/);
    }

    return commandName;
  }

  async proxyCommand(url, method, body = null) {
    const commandName = this.requestToCommandName(url, method);

    if (!commandName) {
      return await this.proxy(url, method, body);
    }

    log.debug(`Matched '${url}' to command name '${commandName}'`);
    return await this.protocolConverter.convertAndProxy(commandName, url, method, body);
  }

  async command(url, method, body = null) {
    let response;
    let resBody;

    try {
      [response, resBody] = await this.proxyCommand(url, method, body);
    } catch (err) {
      if ((0, _errors.isErrorType)(err, _errors.errors.ProxyRequestError)) {
        throw err.getActualError();
      }

      throw new _errors.errors.UnknownError(err.message);
    }

    resBody = _appiumSupport.util.safeJsonParse(resBody);
    let protocol = this.getProtocolFromResBody(resBody);

    if (protocol === MJSONWP) {
      if (response.statusCode === 200 && resBody.status === 0) {
        return resBody.value;
      }

      const status = parseInt(resBody.status, 10);

      if (!isNaN(status) && status !== 0) {
        let message = resBody.value;

        if (_lodash.default.has(resBody.value, 'message')) {
          message = _lodash.default.isEmpty(message) ? resBody.value.message : `${message} ${resBody.value.message}`;
        }

        throw (0, _errors.errorFromMJSONWPStatusCode)(status, _lodash.default.isEmpty(message) ? (0, _status.getSummaryByCode)(status) : message);
      }
    } else if (protocol === W3C) {
      if (response.statusCode < 300) {
        return resBody.value;
      }

      if (_lodash.default.isPlainObject(resBody.value) && resBody.value.error) {
        throw (0, _errors.errorFromW3CJsonCode)(resBody.value.error, resBody.value.message, resBody.value.stacktrace);
      }
    } else if (response.statusCode === 200) {
      return resBody;
    }

    throw new _errors.errors.UnknownError(`Did not know what to do with response code '${response.statusCode}' ` + `and response body '${_lodash.default.truncate(JSON.stringify(resBody), {
      length: 300
    })}'`);
  }

  getSessionIdFromUrl(url) {
    const match = url.match(/\/session\/([^/]+)/);
    return match ? match[1] : null;
  }

  async proxyReqRes(req, res) {
    let [response, body] = await this.proxyCommand(req.originalUrl, req.method, req.body);
    res.headers = response.headers;
    res.set('content-type', response.headers['content-type']);
    body = _appiumSupport.util.safeJsonParse(body);

    if (body && body.sessionId) {
      const reqSessionId = this.getSessionIdFromUrl(req.originalUrl);

      if (reqSessionId) {
        log.info(`Replacing sessionId ${body.sessionId} with ${reqSessionId}`);
        body.sessionId = reqSessionId;
      } else if (this.sessionId) {
        log.info(`Replacing sessionId ${body.sessionId} with ${this.sessionId}`);
        body.sessionId = this.sessionId;
      }
    }

    res.status(response.statusCode).send(JSON.stringify(body));
  }

}

exports.JWProxy = JWProxy;
var _default = JWProxy;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9qc29ud3AtcHJveHkvcHJveHkuanMiXSwibmFtZXMiOlsibG9nIiwibG9nZ2VyIiwiZ2V0TG9nZ2VyIiwiTE9HX09CSl9MRU5HVEgiLCJERUZBVUxUX1JFUVVFU1RfVElNRU9VVCIsIk1KU09OV1AiLCJXM0MiLCJCYXNlRHJpdmVyIiwiRFJJVkVSX1BST1RPQ09MIiwiSldQcm94eSIsImNvbnN0cnVjdG9yIiwib3B0cyIsIk9iamVjdCIsImFzc2lnbiIsInNjaGVtZSIsInNlcnZlciIsInBvcnQiLCJiYXNlIiwic2Vzc2lvbklkIiwidGltZW91dCIsInRvTG93ZXJDYXNlIiwiX2FjdGl2ZVJlcXVlc3RzIiwiX2Rvd25zdHJlYW1Qcm90b2NvbCIsInByb3RvY29sQ29udmVydGVyIiwiUHJvdG9jb2xDb252ZXJ0ZXIiLCJwcm94eSIsImJpbmQiLCJyZXF1ZXN0IiwiYXJncyIsImN1cnJlbnRSZXF1ZXN0IiwicHVzaCIsImZpbmFsbHkiLCJfIiwicHVsbCIsImdldEFjdGl2ZVJlcXVlc3RzQ291bnQiLCJsZW5ndGgiLCJjYW5jZWxBY3RpdmVSZXF1ZXN0cyIsInIiLCJjYW5jZWwiLCJlbmRwb2ludFJlcXVpcmVzU2Vzc2lvbklkIiwiZW5kcG9pbnQiLCJpbmNsdWRlcyIsImRvd25zdHJlYW1Qcm90b2NvbCIsInZhbHVlIiwiZ2V0VXJsRm9yUHJveHkiLCJ1cmwiLCJwcm94eUJhc2UiLCJlbmRwb2ludFJlIiwicmVtYWluaW5nVXJsIiwidGVzdCIsImZpcnN0IiwiUmVnRXhwIiwiZXhlYyIsIkVycm9yIiwicmVwbGFjZSIsInN0cmlwUHJlZml4UmUiLCJyZXF1aXJlc1Nlc3Npb25JZCIsInNlc3Npb25CYXNlUmUiLCJtYXRjaCIsIm1ldGhvZCIsImJvZHkiLCJ0b1VwcGVyQ2FzZSIsIm5ld1VybCIsInJlcU9wdHMiLCJhZ2VudCIsImhlYWRlcnMiLCJhY2NlcHQiLCJyZXNvbHZlV2l0aEZ1bGxSZXNwb25zZSIsIkpTT04iLCJwYXJzZSIsImpzb24iLCJkZWJ1ZyIsInRydW5jYXRlIiwic3RyaW5naWZ5IiwicmVzIiwicmVzQm9keSIsInN0YXR1c0NvZGUiLCJyZXNCb2R5T2JqIiwidXRpbCIsInNhZmVKc29uUGFyc2UiLCJnZXRQcm90b2NvbEZyb21SZXNCb2R5IiwicGFyc2VJbnQiLCJzdGF0dXMiLCJtZXNzYWdlIiwiZXJyIiwiZXJyb3IiLCJlIiwicmVzcG9uc2VFcnJvciIsImUxIiwid2FybiIsImlzU3RyaW5nIiwiZXJyb3JzIiwiUHJveHlSZXF1ZXN0RXJyb3IiLCJpc1BsYWluT2JqZWN0IiwiaGFzVmFsdWUiLCJyZXF1ZXN0VG9Db21tYW5kTmFtZSIsImV4dHJhY3RDb21tYW5kTmFtZSIsInBhdHRlcm4iLCJwYXRoTWF0Y2giLCJjb21tYW5kTmFtZSIsInByb3h5Q29tbWFuZCIsImNvbnZlcnRBbmRQcm94eSIsImNvbW1hbmQiLCJyZXNwb25zZSIsImdldEFjdHVhbEVycm9yIiwiVW5rbm93bkVycm9yIiwicHJvdG9jb2wiLCJpc05hTiIsImhhcyIsImlzRW1wdHkiLCJzdGFja3RyYWNlIiwiZ2V0U2Vzc2lvbklkRnJvbVVybCIsInByb3h5UmVxUmVzIiwicmVxIiwib3JpZ2luYWxVcmwiLCJzZXQiLCJyZXFTZXNzaW9uSWQiLCJpbmZvIiwic2VuZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQSxNQUFNQSxHQUFHLEdBQUdDLHNCQUFPQyxTQUFQLENBQWlCLFVBQWpCLENBQVo7O0FBRUEsTUFBTUMsY0FBYyxHQUFHLElBQXZCO0FBQ0EsTUFBTUMsdUJBQXVCLEdBQUcsTUFBaEM7QUFFQSxNQUFNO0FBQUNDLEVBQUFBLE9BQUQ7QUFBVUMsRUFBQUE7QUFBVixJQUFpQkMsZ0JBQVdDLGVBQWxDOztBQUVBLE1BQU1DLE9BQU4sQ0FBYztBQUNaQyxFQUFBQSxXQUFXLENBQUVDLElBQUksR0FBRyxFQUFULEVBQWE7QUFDdEJDLElBQUFBLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLElBQWQsRUFBb0I7QUFDbEJDLE1BQUFBLE1BQU0sRUFBRSxNQURVO0FBRWxCQyxNQUFBQSxNQUFNLEVBQUUsV0FGVTtBQUdsQkMsTUFBQUEsSUFBSSxFQUFFLElBSFk7QUFJbEJDLE1BQUFBLElBQUksRUFBRSxTQUpZO0FBS2xCQyxNQUFBQSxTQUFTLEVBQUUsSUFMTztBQU1sQkMsTUFBQUEsT0FBTyxFQUFFZjtBQU5TLEtBQXBCLEVBT0dPLElBUEg7QUFRQSxTQUFLRyxNQUFMLEdBQWMsS0FBS0EsTUFBTCxDQUFZTSxXQUFaLEVBQWQ7QUFDQSxTQUFLQyxlQUFMLEdBQXVCLEVBQXZCO0FBQ0EsU0FBS0MsbUJBQUwsR0FBMkIsSUFBM0I7QUFDQSxTQUFLQyxpQkFBTCxHQUF5QixJQUFJQywwQkFBSixDQUFzQixLQUFLQyxLQUFMLENBQVdDLElBQVgsQ0FBZ0IsSUFBaEIsQ0FBdEIsQ0FBekI7QUFDRDs7QUFJRCxRQUFNQyxPQUFOLENBQWUsR0FBR0MsSUFBbEIsRUFBd0I7QUFDdEIsVUFBTUMsY0FBYyxHQUFHLDZCQUFRLEdBQUdELElBQVgsQ0FBdkI7O0FBQ0EsU0FBS1AsZUFBTCxDQUFxQlMsSUFBckIsQ0FBMEJELGNBQTFCOztBQUNBLFdBQU8sTUFBTUEsY0FBYyxDQUFDRSxPQUFmLENBQXVCLE1BQU1DLGdCQUFFQyxJQUFGLENBQU8sS0FBS1osZUFBWixFQUE2QlEsY0FBN0IsQ0FBN0IsQ0FBYjtBQUNEOztBQUVESyxFQUFBQSxzQkFBc0IsR0FBSTtBQUN4QixXQUFPLEtBQUtiLGVBQUwsQ0FBcUJjLE1BQTVCO0FBQ0Q7O0FBRURDLEVBQUFBLG9CQUFvQixHQUFJO0FBQ3RCLFFBQUk7QUFDRixXQUFLLElBQUlDLENBQVQsSUFBYyxLQUFLaEIsZUFBbkIsRUFBb0M7QUFDbENnQixRQUFBQSxDQUFDLENBQUNDLE1BQUY7QUFDRDtBQUNGLEtBSkQsU0FJVTtBQUNSLFdBQUtqQixlQUFMLEdBQXVCLEVBQXZCO0FBQ0Q7QUFDRjs7QUFFRGtCLEVBQUFBLHlCQUF5QixDQUFFQyxRQUFGLEVBQVk7QUFDbkMsV0FBTyxDQUFDUixnQkFBRVMsUUFBRixDQUFXLENBQUMsVUFBRCxFQUFhLFdBQWIsRUFBMEIsU0FBMUIsQ0FBWCxFQUFpREQsUUFBakQsQ0FBUjtBQUNEOztBQUVELE1BQUlFLGtCQUFKLENBQXdCQyxLQUF4QixFQUErQjtBQUM3QixTQUFLckIsbUJBQUwsR0FBMkJxQixLQUEzQjtBQUNBLFNBQUtwQixpQkFBTCxDQUF1Qm1CLGtCQUF2QixHQUE0Q0MsS0FBNUM7QUFDRDs7QUFFRCxNQUFJRCxrQkFBSixHQUEwQjtBQUN4QixXQUFPLEtBQUtwQixtQkFBWjtBQUNEOztBQUVEc0IsRUFBQUEsY0FBYyxDQUFFQyxHQUFGLEVBQU87QUFDbkIsUUFBSUEsR0FBRyxLQUFLLEVBQVosRUFBZ0I7QUFDZEEsTUFBQUEsR0FBRyxHQUFHLEdBQU47QUFDRDs7QUFDRCxVQUFNQyxTQUFTLEdBQUksR0FBRSxLQUFLaEMsTUFBTyxNQUFLLEtBQUtDLE1BQU8sSUFBRyxLQUFLQyxJQUFLLEdBQUUsS0FBS0MsSUFBSyxFQUEzRTtBQUNBLFVBQU04QixVQUFVLEdBQUcscUJBQW5CO0FBQ0EsUUFBSUMsWUFBWSxHQUFHLEVBQW5COztBQUNBLFFBQUksUUFBUUMsSUFBUixDQUFhSixHQUFiLENBQUosRUFBdUI7QUFDckIsWUFBTUssS0FBSyxHQUFJLElBQUlDLE1BQUosQ0FBWSxnQkFBZUosVUFBVyxFQUF0QyxDQUFELENBQTJDSyxJQUEzQyxDQUFnRFAsR0FBaEQsQ0FBZDs7QUFDQSxVQUFJLENBQUNLLEtBQUwsRUFBWTtBQUNWLGNBQU0sSUFBSUcsS0FBSixDQUFVLHVEQUFWLENBQU47QUFDRDs7QUFDREwsTUFBQUEsWUFBWSxHQUFHSCxHQUFHLENBQUNTLE9BQUosQ0FBWUosS0FBSyxDQUFDLENBQUQsQ0FBakIsRUFBc0IsRUFBdEIsQ0FBZjtBQUNELEtBTkQsTUFNTyxJQUFLLElBQUlDLE1BQUosQ0FBVyxJQUFYLENBQUQsQ0FBbUJGLElBQW5CLENBQXdCSixHQUF4QixDQUFKLEVBQWtDO0FBQ3ZDRyxNQUFBQSxZQUFZLEdBQUdILEdBQWY7QUFDRCxLQUZNLE1BRUE7QUFDTCxZQUFNLElBQUlRLEtBQUosQ0FBVyxxQ0FBb0NSLEdBQUksR0FBbkQsQ0FBTjtBQUNEOztBQUVELFVBQU1VLGFBQWEsR0FBRyxJQUFJSixNQUFKLENBQVcsNEJBQVgsQ0FBdEI7O0FBQ0EsUUFBSUksYUFBYSxDQUFDTixJQUFkLENBQW1CRCxZQUFuQixDQUFKLEVBQXNDO0FBQ3BDQSxNQUFBQSxZQUFZLEdBQUdPLGFBQWEsQ0FBQ0gsSUFBZCxDQUFtQkosWUFBbkIsRUFBaUMsQ0FBakMsQ0FBZjtBQUNEOztBQUVELFFBQUksQ0FBRSxJQUFJRyxNQUFKLENBQVdKLFVBQVgsQ0FBRCxDQUF5QkUsSUFBekIsQ0FBOEJELFlBQTlCLENBQUwsRUFBa0Q7QUFDaERBLE1BQUFBLFlBQVksR0FBSSxZQUFXLEtBQUs5QixTQUFVLEdBQUU4QixZQUFhLEVBQXpEO0FBQ0Q7O0FBRUQsVUFBTVEsaUJBQWlCLEdBQUcsS0FBS2pCLHlCQUFMLENBQStCUyxZQUEvQixDQUExQjs7QUFFQSxRQUFJUSxpQkFBaUIsSUFBSSxLQUFLdEMsU0FBTCxLQUFtQixJQUE1QyxFQUFrRDtBQUNoRCxZQUFNLElBQUltQyxLQUFKLENBQVUsc0RBQVYsQ0FBTjtBQUNEOztBQUVELFVBQU1JLGFBQWEsR0FBRyxJQUFJTixNQUFKLENBQVcsbUJBQVgsQ0FBdEI7O0FBQ0EsUUFBSU0sYUFBYSxDQUFDUixJQUFkLENBQW1CRCxZQUFuQixDQUFKLEVBQXNDO0FBR3BDLFlBQU1VLEtBQUssR0FBR0QsYUFBYSxDQUFDTCxJQUFkLENBQW1CSixZQUFuQixDQUFkO0FBQ0FBLE1BQUFBLFlBQVksR0FBR0EsWUFBWSxDQUFDTSxPQUFiLENBQXFCSSxLQUFLLENBQUMsQ0FBRCxDQUExQixFQUErQixLQUFLeEMsU0FBcEMsQ0FBZjtBQUNELEtBTEQsTUFLTyxJQUFJc0MsaUJBQUosRUFBdUI7QUFDNUIsWUFBTSxJQUFJSCxLQUFKLENBQVcsNENBQTJDTCxZQUFhLEVBQW5FLENBQU47QUFDRDs7QUFDREEsSUFBQUEsWUFBWSxHQUFHQSxZQUFZLENBQUNNLE9BQWIsQ0FBcUIsS0FBckIsRUFBNEIsRUFBNUIsQ0FBZjtBQUVBLFdBQU9SLFNBQVMsR0FBR0UsWUFBbkI7QUFDRDs7QUFFRCxRQUFNdkIsS0FBTixDQUFhb0IsR0FBYixFQUFrQmMsTUFBbEIsRUFBMEJDLElBQUksR0FBRyxJQUFqQyxFQUF1QztBQUNyQ0QsSUFBQUEsTUFBTSxHQUFHQSxNQUFNLENBQUNFLFdBQVAsRUFBVDtBQUNBLFVBQU1DLE1BQU0sR0FBRyxLQUFLbEIsY0FBTCxDQUFvQkMsR0FBcEIsQ0FBZjtBQUNBLFVBQU1rQixPQUFPLEdBQUc7QUFDZEMsTUFBQUEsS0FBSyxFQUFFLEtBRE87QUFFZG5CLE1BQUFBLEdBQUcsRUFBRWlCLE1BRlM7QUFHZEgsTUFBQUEsTUFIYztBQUlkTSxNQUFBQSxPQUFPLEVBQUU7QUFDUCx3QkFBZ0IsaUNBRFQ7QUFFUCxzQkFBYyxRQUZQO0FBR1BDLFFBQUFBLE1BQU0sRUFBRTtBQUhELE9BSks7QUFTZEMsTUFBQUEsdUJBQXVCLEVBQUUsSUFUWDtBQVVkaEQsTUFBQUEsT0FBTyxFQUFFLEtBQUtBO0FBVkEsS0FBaEI7O0FBWUEsUUFBSXlDLElBQUksS0FBSyxJQUFiLEVBQW1CO0FBQ2pCLFVBQUksT0FBT0EsSUFBUCxLQUFnQixRQUFwQixFQUE4QjtBQUM1QkEsUUFBQUEsSUFBSSxHQUFHUSxJQUFJLENBQUNDLEtBQUwsQ0FBV1QsSUFBWCxDQUFQO0FBQ0Q7O0FBQ0RHLE1BQUFBLE9BQU8sQ0FBQ08sSUFBUixHQUFlVixJQUFmO0FBQ0Q7O0FBR0QsUUFBSUQsTUFBTSxLQUFLLEtBQWYsRUFBc0I7QUFDcEJJLE1BQUFBLE9BQU8sQ0FBQ08sSUFBUixHQUFlLElBQWY7QUFDRDs7QUFFRHRFLElBQUFBLEdBQUcsQ0FBQ3VFLEtBQUosQ0FBVyxhQUFZWixNQUFPLElBQUdkLEdBQUcsSUFBSSxHQUFJLFNBQVFjLE1BQU8sSUFBR0csTUFBTyxJQUEzRCxJQUNBRixJQUFJLEdBQUksY0FBYTVCLGdCQUFFd0MsUUFBRixDQUFXSixJQUFJLENBQUNLLFNBQUwsQ0FBZWIsSUFBZixDQUFYLEVBQWlDO0FBQUN6QixNQUFBQSxNQUFNLEVBQUVoQztBQUFULEtBQWpDLENBQTJELEVBQTVFLEdBQWdGLGNBRHBGLENBQVY7QUFHQSxRQUFJdUUsR0FBSixFQUFTQyxPQUFUOztBQUNBLFFBQUk7QUFDRkQsTUFBQUEsR0FBRyxHQUFHLE1BQU0sS0FBSy9DLE9BQUwsQ0FBYW9DLE9BQWIsQ0FBWjtBQUNBWSxNQUFBQSxPQUFPLEdBQUdELEdBQUcsQ0FBQ2QsSUFBZDtBQUNBNUQsTUFBQUEsR0FBRyxDQUFDdUUsS0FBSixDQUFXLDRCQUEyQkcsR0FBRyxDQUFDRSxVQUFXLEtBQUk1QyxnQkFBRXdDLFFBQUYsQ0FBV0osSUFBSSxDQUFDSyxTQUFMLENBQWVFLE9BQWYsQ0FBWCxFQUFvQztBQUFDeEMsUUFBQUEsTUFBTSxFQUFFaEM7QUFBVCxPQUFwQyxDQUE4RCxFQUF2SDs7QUFDQSxVQUFJLGFBQWE4QyxJQUFiLENBQWtCSixHQUFsQixLQUEwQmMsTUFBTSxLQUFLLE1BQXpDLEVBQWlEO0FBQy9DLFlBQUllLEdBQUcsQ0FBQ0UsVUFBSixLQUFtQixHQUF2QixFQUE0QjtBQUMxQixlQUFLMUQsU0FBTCxHQUFpQnlELE9BQU8sQ0FBQ3pELFNBQXpCO0FBQ0QsU0FGRCxNQUVPLElBQUl3RCxHQUFHLENBQUNFLFVBQUosS0FBbUIsR0FBdkIsRUFBNEI7QUFDakMsZUFBSzFELFNBQUwsR0FBaUIscUJBQXFCa0MsSUFBckIsQ0FBMEJ1QixPQUExQixFQUFtQyxDQUFuQyxDQUFqQjtBQUNEO0FBQ0Y7O0FBQ0QsWUFBTUUsVUFBVSxHQUFHQyxvQkFBS0MsYUFBTCxDQUFtQkosT0FBbkIsQ0FBbkI7O0FBQ0EsVUFBSSxDQUFDLEtBQUtqQyxrQkFBVixFQUE4QjtBQUM1QixhQUFLQSxrQkFBTCxHQUEwQixLQUFLc0Msc0JBQUwsQ0FBNEJILFVBQTVCLENBQTFCO0FBQ0E3RSxRQUFBQSxHQUFHLENBQUN1RSxLQUFKLENBQVcsd0RBQXVELEtBQUs3QixrQkFBbUIsRUFBMUY7QUFDRDs7QUFDRCxVQUFJZ0MsR0FBRyxDQUFDRSxVQUFKLEdBQWlCLEdBQWpCLElBQXdCLEtBQUtsQyxrQkFBTCxLQUE0QnJDLE9BQXBELElBQStENEUsUUFBUSxDQUFDSixVQUFVLENBQUNLLE1BQVosRUFBb0IsRUFBcEIsQ0FBUixLQUFvQyxDQUF2RyxFQUEwRztBQUV4RyxjQUFNQyxPQUFPLEdBQUksa0JBQWlCdEMsR0FBSSxhQUF0QztBQUNBLGNBQU11QyxHQUFHLEdBQUcsSUFBSS9CLEtBQUosQ0FBVThCLE9BQVYsQ0FBWjtBQUNBQyxRQUFBQSxHQUFHLENBQUNELE9BQUosR0FBY0EsT0FBZDtBQUNBQyxRQUFBQSxHQUFHLENBQUNDLEtBQUosR0FBWVYsT0FBWjtBQUNBUyxRQUFBQSxHQUFHLENBQUNSLFVBQUosR0FBaUIsR0FBakI7QUFDQSxjQUFNUSxHQUFOO0FBQ0Q7QUFDRixLQXpCRCxDQXlCRSxPQUFPRSxDQUFQLEVBQVU7QUFDVixVQUFJQyxhQUFhLEdBQUdELENBQUMsQ0FBQ0QsS0FBdEI7O0FBQ0EsVUFBSTtBQUNGRSxRQUFBQSxhQUFhLEdBQUduQixJQUFJLENBQUNDLEtBQUwsQ0FBV2tCLGFBQVgsQ0FBaEI7QUFDRCxPQUZELENBRUUsT0FBT0MsRUFBUCxFQUFXO0FBQ1h4RixRQUFBQSxHQUFHLENBQUN5RixJQUFKLENBQVUsOEJBQUQsR0FDUHpELGdCQUFFd0MsUUFBRixDQUFXeEMsZ0JBQUUwRCxRQUFGLENBQVdILGFBQVgsSUFBNEJBLGFBQTVCLEdBQTRDbkIsSUFBSSxDQUFDSyxTQUFMLENBQWVjLGFBQWYsQ0FBdkQsRUFBc0Y7QUFBQ3BELFVBQUFBLE1BQU0sRUFBRTtBQUFULFNBQXRGLENBREY7QUFFRDs7QUFDRCxZQUFNLElBQUl3RCxlQUFPQyxpQkFBWCxDQUE4Qiw0Q0FBRCxHQUNaLG1CQUFrQk4sQ0FBQyxDQUFDSCxPQUFRLEVBRDdDLEVBQ2dESSxhQURoRCxFQUMrREQsQ0FBQyxDQUFDVixVQURqRSxDQUFOO0FBRUQ7O0FBQ0QsV0FBTyxDQUFDRixHQUFELEVBQU1DLE9BQU4sQ0FBUDtBQUNEOztBQUVESyxFQUFBQSxzQkFBc0IsQ0FBRUwsT0FBRixFQUFXO0FBQy9CLFFBQUksQ0FBQzNDLGdCQUFFNkQsYUFBRixDQUFnQmxCLE9BQWhCLENBQUwsRUFBK0I7QUFDN0IsVUFBSTtBQUNGQSxRQUFBQSxPQUFPLEdBQUdQLElBQUksQ0FBQ0MsS0FBTCxDQUFXTSxPQUFYLENBQVY7QUFDRCxPQUZELENBRUUsT0FBT1MsR0FBUCxFQUFZO0FBQ1o7QUFDRDtBQUNGOztBQUNELFFBQUlOLG9CQUFLZ0IsUUFBTCxDQUFjbkIsT0FBTyxDQUFDTyxNQUF0QixDQUFKLEVBQW1DO0FBQ2pDLGFBQU83RSxPQUFQO0FBQ0Q7O0FBQ0QsUUFBSXlFLG9CQUFLZ0IsUUFBTCxDQUFjbkIsT0FBTyxDQUFDaEMsS0FBdEIsQ0FBSixFQUFrQztBQUNoQyxhQUFPckMsR0FBUDtBQUNEO0FBQ0Y7O0FBRUR5RixFQUFBQSxvQkFBb0IsQ0FBRWxELEdBQUYsRUFBT2MsTUFBUCxFQUFlO0FBQ2pDLFVBQU1xQyxrQkFBa0IsR0FBSUMsT0FBRCxJQUFhO0FBQ3RDLFlBQU1DLFNBQVMsR0FBR0QsT0FBTyxDQUFDN0MsSUFBUixDQUFhUCxHQUFiLENBQWxCO0FBQ0EsYUFBT3FELFNBQVMsR0FBRyxnQ0FBbUJBLFNBQVMsQ0FBQyxDQUFELENBQTVCLEVBQWlDdkMsTUFBakMsQ0FBSCxHQUE4QyxJQUE5RDtBQUNELEtBSEQ7O0FBSUEsUUFBSXdDLFdBQVcsR0FBRyxnQ0FBbUJ0RCxHQUFuQixFQUF3QmMsTUFBeEIsQ0FBbEI7O0FBQ0EsUUFBSSxDQUFDd0MsV0FBRCxJQUFnQm5FLGdCQUFFUyxRQUFGLENBQVdJLEdBQVgsRUFBZ0Isa0JBQWhCLENBQXBCLEVBQXlEO0FBQ3ZEc0QsTUFBQUEsV0FBVyxHQUFHSCxrQkFBa0IsQ0FBQywrQkFBRCxDQUFoQztBQUNEOztBQUNELFFBQUksQ0FBQ0csV0FBRCxJQUFnQm5FLGdCQUFFUyxRQUFGLENBQVdJLEdBQVgsRUFBZ0IsVUFBaEIsQ0FBcEIsRUFBaUQ7QUFDL0NzRCxNQUFBQSxXQUFXLEdBQUdILGtCQUFrQixDQUFDLGlCQUFELENBQWhDO0FBQ0Q7O0FBQ0QsV0FBT0csV0FBUDtBQUNEOztBQUVELFFBQU1DLFlBQU4sQ0FBb0J2RCxHQUFwQixFQUF5QmMsTUFBekIsRUFBaUNDLElBQUksR0FBRyxJQUF4QyxFQUE4QztBQUM1QyxVQUFNdUMsV0FBVyxHQUFHLEtBQUtKLG9CQUFMLENBQTBCbEQsR0FBMUIsRUFBK0JjLE1BQS9CLENBQXBCOztBQUNBLFFBQUksQ0FBQ3dDLFdBQUwsRUFBa0I7QUFDaEIsYUFBTyxNQUFNLEtBQUsxRSxLQUFMLENBQVdvQixHQUFYLEVBQWdCYyxNQUFoQixFQUF3QkMsSUFBeEIsQ0FBYjtBQUNEOztBQUNENUQsSUFBQUEsR0FBRyxDQUFDdUUsS0FBSixDQUFXLFlBQVcxQixHQUFJLHNCQUFxQnNELFdBQVksR0FBM0Q7QUFFQSxXQUFPLE1BQU0sS0FBSzVFLGlCQUFMLENBQXVCOEUsZUFBdkIsQ0FBdUNGLFdBQXZDLEVBQW9EdEQsR0FBcEQsRUFBeURjLE1BQXpELEVBQWlFQyxJQUFqRSxDQUFiO0FBQ0Q7O0FBRUQsUUFBTTBDLE9BQU4sQ0FBZXpELEdBQWYsRUFBb0JjLE1BQXBCLEVBQTRCQyxJQUFJLEdBQUcsSUFBbkMsRUFBeUM7QUFDdkMsUUFBSTJDLFFBQUo7QUFDQSxRQUFJNUIsT0FBSjs7QUFDQSxRQUFJO0FBQ0YsT0FBQzRCLFFBQUQsRUFBVzVCLE9BQVgsSUFBc0IsTUFBTSxLQUFLeUIsWUFBTCxDQUFrQnZELEdBQWxCLEVBQXVCYyxNQUF2QixFQUErQkMsSUFBL0IsQ0FBNUI7QUFDRCxLQUZELENBRUUsT0FBT3dCLEdBQVAsRUFBWTtBQUNaLFVBQUkseUJBQVlBLEdBQVosRUFBaUJPLGVBQU9DLGlCQUF4QixDQUFKLEVBQWdEO0FBQzlDLGNBQU1SLEdBQUcsQ0FBQ29CLGNBQUosRUFBTjtBQUNEOztBQUNELFlBQU0sSUFBSWIsZUFBT2MsWUFBWCxDQUF3QnJCLEdBQUcsQ0FBQ0QsT0FBNUIsQ0FBTjtBQUNEOztBQUNEUixJQUFBQSxPQUFPLEdBQUdHLG9CQUFLQyxhQUFMLENBQW1CSixPQUFuQixDQUFWO0FBQ0EsUUFBSStCLFFBQVEsR0FBRyxLQUFLMUIsc0JBQUwsQ0FBNEJMLE9BQTVCLENBQWY7O0FBQ0EsUUFBSStCLFFBQVEsS0FBS3JHLE9BQWpCLEVBQTBCO0FBRXhCLFVBQUlrRyxRQUFRLENBQUMzQixVQUFULEtBQXdCLEdBQXhCLElBQStCRCxPQUFPLENBQUNPLE1BQVIsS0FBbUIsQ0FBdEQsRUFBeUQ7QUFDdkQsZUFBT1AsT0FBTyxDQUFDaEMsS0FBZjtBQUNEOztBQUNELFlBQU11QyxNQUFNLEdBQUdELFFBQVEsQ0FBQ04sT0FBTyxDQUFDTyxNQUFULEVBQWlCLEVBQWpCLENBQXZCOztBQUNBLFVBQUksQ0FBQ3lCLEtBQUssQ0FBQ3pCLE1BQUQsQ0FBTixJQUFrQkEsTUFBTSxLQUFLLENBQWpDLEVBQW9DO0FBQ2xDLFlBQUlDLE9BQU8sR0FBR1IsT0FBTyxDQUFDaEMsS0FBdEI7O0FBQ0EsWUFBSVgsZ0JBQUU0RSxHQUFGLENBQU1qQyxPQUFPLENBQUNoQyxLQUFkLEVBQXFCLFNBQXJCLENBQUosRUFBcUM7QUFDbkN3QyxVQUFBQSxPQUFPLEdBQUduRCxnQkFBRTZFLE9BQUYsQ0FBVTFCLE9BQVYsSUFBcUJSLE9BQU8sQ0FBQ2hDLEtBQVIsQ0FBY3dDLE9BQW5DLEdBQThDLEdBQUVBLE9BQVEsSUFBR1IsT0FBTyxDQUFDaEMsS0FBUixDQUFjd0MsT0FBUSxFQUEzRjtBQUNEOztBQUNELGNBQU0sd0NBQTJCRCxNQUEzQixFQUFtQ2xELGdCQUFFNkUsT0FBRixDQUFVMUIsT0FBVixJQUFxQiw4QkFBaUJELE1BQWpCLENBQXJCLEdBQWdEQyxPQUFuRixDQUFOO0FBQ0Q7QUFDRixLQWJELE1BYU8sSUFBSXVCLFFBQVEsS0FBS3BHLEdBQWpCLEVBQXNCO0FBRTNCLFVBQUlpRyxRQUFRLENBQUMzQixVQUFULEdBQXNCLEdBQTFCLEVBQStCO0FBQzdCLGVBQU9ELE9BQU8sQ0FBQ2hDLEtBQWY7QUFDRDs7QUFDRCxVQUFJWCxnQkFBRTZELGFBQUYsQ0FBZ0JsQixPQUFPLENBQUNoQyxLQUF4QixLQUFrQ2dDLE9BQU8sQ0FBQ2hDLEtBQVIsQ0FBYzBDLEtBQXBELEVBQTJEO0FBQ3pELGNBQU0sa0NBQXFCVixPQUFPLENBQUNoQyxLQUFSLENBQWMwQyxLQUFuQyxFQUEwQ1YsT0FBTyxDQUFDaEMsS0FBUixDQUFjd0MsT0FBeEQsRUFBaUVSLE9BQU8sQ0FBQ2hDLEtBQVIsQ0FBY21FLFVBQS9FLENBQU47QUFDRDtBQUNGLEtBUk0sTUFRQSxJQUFJUCxRQUFRLENBQUMzQixVQUFULEtBQXdCLEdBQTVCLEVBQWlDO0FBRXRDLGFBQU9ELE9BQVA7QUFDRDs7QUFDRCxVQUFNLElBQUlnQixlQUFPYyxZQUFYLENBQXlCLCtDQUE4Q0YsUUFBUSxDQUFDM0IsVUFBVyxJQUFuRSxHQUNDLHNCQUFxQjVDLGdCQUFFd0MsUUFBRixDQUFXSixJQUFJLENBQUNLLFNBQUwsQ0FBZUUsT0FBZixDQUFYLEVBQW9DO0FBQUN4QyxNQUFBQSxNQUFNLEVBQUU7QUFBVCxLQUFwQyxDQUFtRCxHQURqRyxDQUFOO0FBRUQ7O0FBRUQ0RSxFQUFBQSxtQkFBbUIsQ0FBRWxFLEdBQUYsRUFBTztBQUN4QixVQUFNYSxLQUFLLEdBQUdiLEdBQUcsQ0FBQ2EsS0FBSixDQUFVLG9CQUFWLENBQWQ7QUFDQSxXQUFPQSxLQUFLLEdBQUdBLEtBQUssQ0FBQyxDQUFELENBQVIsR0FBYyxJQUExQjtBQUNEOztBQUVELFFBQU1zRCxXQUFOLENBQW1CQyxHQUFuQixFQUF3QnZDLEdBQXhCLEVBQTZCO0FBQzNCLFFBQUksQ0FBQzZCLFFBQUQsRUFBVzNDLElBQVgsSUFBbUIsTUFBTSxLQUFLd0MsWUFBTCxDQUFrQmEsR0FBRyxDQUFDQyxXQUF0QixFQUFtQ0QsR0FBRyxDQUFDdEQsTUFBdkMsRUFBK0NzRCxHQUFHLENBQUNyRCxJQUFuRCxDQUE3QjtBQUVBYyxJQUFBQSxHQUFHLENBQUNULE9BQUosR0FBY3NDLFFBQVEsQ0FBQ3RDLE9BQXZCO0FBQ0FTLElBQUFBLEdBQUcsQ0FBQ3lDLEdBQUosQ0FBUSxjQUFSLEVBQXdCWixRQUFRLENBQUN0QyxPQUFULENBQWlCLGNBQWpCLENBQXhCO0FBSUFMLElBQUFBLElBQUksR0FBR2tCLG9CQUFLQyxhQUFMLENBQW1CbkIsSUFBbkIsQ0FBUDs7QUFDQSxRQUFJQSxJQUFJLElBQUlBLElBQUksQ0FBQzFDLFNBQWpCLEVBQTRCO0FBQzFCLFlBQU1rRyxZQUFZLEdBQUcsS0FBS0wsbUJBQUwsQ0FBeUJFLEdBQUcsQ0FBQ0MsV0FBN0IsQ0FBckI7O0FBQ0EsVUFBSUUsWUFBSixFQUFrQjtBQUNoQnBILFFBQUFBLEdBQUcsQ0FBQ3FILElBQUosQ0FBVSx1QkFBc0J6RCxJQUFJLENBQUMxQyxTQUFVLFNBQVFrRyxZQUFhLEVBQXBFO0FBQ0F4RCxRQUFBQSxJQUFJLENBQUMxQyxTQUFMLEdBQWlCa0csWUFBakI7QUFDRCxPQUhELE1BR08sSUFBSSxLQUFLbEcsU0FBVCxFQUFvQjtBQUN6QmxCLFFBQUFBLEdBQUcsQ0FBQ3FILElBQUosQ0FBVSx1QkFBc0J6RCxJQUFJLENBQUMxQyxTQUFVLFNBQVEsS0FBS0EsU0FBVSxFQUF0RTtBQUNBMEMsUUFBQUEsSUFBSSxDQUFDMUMsU0FBTCxHQUFpQixLQUFLQSxTQUF0QjtBQUNEO0FBQ0Y7O0FBQ0R3RCxJQUFBQSxHQUFHLENBQUNRLE1BQUosQ0FBV3FCLFFBQVEsQ0FBQzNCLFVBQXBCLEVBQWdDMEMsSUFBaEMsQ0FBcUNsRCxJQUFJLENBQUNLLFNBQUwsQ0FBZWIsSUFBZixDQUFyQztBQUNEOztBQXJSVzs7O2VBeVJDbkQsTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBsb2dnZXIsIHV0aWwgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgcmVxdWVzdCBmcm9tICdyZXF1ZXN0LXByb21pc2UnO1xuaW1wb3J0IHsgZ2V0U3VtbWFyeUJ5Q29kZSB9IGZyb20gJy4uL2pzb253cC1zdGF0dXMvc3RhdHVzJztcbmltcG9ydCB7IGVycm9ycywgaXNFcnJvclR5cGUsIGVycm9yRnJvbU1KU09OV1BTdGF0dXNDb2RlLCBlcnJvckZyb21XM0NKc29uQ29kZSB9IGZyb20gJy4uL3Byb3RvY29sL2Vycm9ycyc7XG5pbXBvcnQgQmFzZURyaXZlciBmcm9tICcuLi9iYXNlZHJpdmVyL2RyaXZlcic7XG5pbXBvcnQgeyByb3V0ZVRvQ29tbWFuZE5hbWUgfSBmcm9tICcuLi9wcm90b2NvbC9yb3V0ZXMnO1xuaW1wb3J0IFByb3RvY29sQ29udmVydGVyIGZyb20gJy4vcHJvdG9jb2wtY29udmVydGVyJztcblxuXG5jb25zdCBsb2cgPSBsb2dnZXIuZ2V0TG9nZ2VyKCdXRCBQcm94eScpO1xuLy8gVE9ETzogTWFrZSB0aGlzIHZhbHVlIGNvbmZpZ3VyYWJsZSBhcyBhIHNlcnZlciBzaWRlIGNhcGFiaWxpdHlcbmNvbnN0IExPR19PQkpfTEVOR1RIID0gMTAyNDsgLy8gTUFYIExFTkdUSCBMb2dnZWQgdG8gZmlsZSAvIGNvbnNvbGVcbmNvbnN0IERFRkFVTFRfUkVRVUVTVF9USU1FT1VUID0gMjQwMDAwO1xuXG5jb25zdCB7TUpTT05XUCwgVzNDfSA9IEJhc2VEcml2ZXIuRFJJVkVSX1BST1RPQ09MO1xuXG5jbGFzcyBKV1Byb3h5IHtcbiAgY29uc3RydWN0b3IgKG9wdHMgPSB7fSkge1xuICAgIE9iamVjdC5hc3NpZ24odGhpcywge1xuICAgICAgc2NoZW1lOiAnaHR0cCcsXG4gICAgICBzZXJ2ZXI6ICdsb2NhbGhvc3QnLFxuICAgICAgcG9ydDogNDQ0NCxcbiAgICAgIGJhc2U6ICcvd2QvaHViJyxcbiAgICAgIHNlc3Npb25JZDogbnVsbCxcbiAgICAgIHRpbWVvdXQ6IERFRkFVTFRfUkVRVUVTVF9USU1FT1VULFxuICAgIH0sIG9wdHMpO1xuICAgIHRoaXMuc2NoZW1lID0gdGhpcy5zY2hlbWUudG9Mb3dlckNhc2UoKTtcbiAgICB0aGlzLl9hY3RpdmVSZXF1ZXN0cyA9IFtdO1xuICAgIHRoaXMuX2Rvd25zdHJlYW1Qcm90b2NvbCA9IG51bGw7XG4gICAgdGhpcy5wcm90b2NvbENvbnZlcnRlciA9IG5ldyBQcm90b2NvbENvbnZlcnRlcih0aGlzLnByb3h5LmJpbmQodGhpcykpO1xuICB9XG5cbiAgLy8gYWJzdHJhY3QgdGhlIGNhbGwgYmVoaW5kIGEgbWVtYmVyIGZ1bmN0aW9uXG4gIC8vIHNvIHRoYXQgd2UgY2FuIG1vY2sgaXQgaW4gdGVzdHNcbiAgYXN5bmMgcmVxdWVzdCAoLi4uYXJncykge1xuICAgIGNvbnN0IGN1cnJlbnRSZXF1ZXN0ID0gcmVxdWVzdCguLi5hcmdzKTtcbiAgICB0aGlzLl9hY3RpdmVSZXF1ZXN0cy5wdXNoKGN1cnJlbnRSZXF1ZXN0KTtcbiAgICByZXR1cm4gYXdhaXQgY3VycmVudFJlcXVlc3QuZmluYWxseSgoKSA9PiBfLnB1bGwodGhpcy5fYWN0aXZlUmVxdWVzdHMsIGN1cnJlbnRSZXF1ZXN0KSk7XG4gIH1cblxuICBnZXRBY3RpdmVSZXF1ZXN0c0NvdW50ICgpIHtcbiAgICByZXR1cm4gdGhpcy5fYWN0aXZlUmVxdWVzdHMubGVuZ3RoO1xuICB9XG5cbiAgY2FuY2VsQWN0aXZlUmVxdWVzdHMgKCkge1xuICAgIHRyeSB7XG4gICAgICBmb3IgKGxldCByIG9mIHRoaXMuX2FjdGl2ZVJlcXVlc3RzKSB7XG4gICAgICAgIHIuY2FuY2VsKCk7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMuX2FjdGl2ZVJlcXVlc3RzID0gW107XG4gICAgfVxuICB9XG5cbiAgZW5kcG9pbnRSZXF1aXJlc1Nlc3Npb25JZCAoZW5kcG9pbnQpIHtcbiAgICByZXR1cm4gIV8uaW5jbHVkZXMoWycvc2Vzc2lvbicsICcvc2Vzc2lvbnMnLCAnL3N0YXR1cyddLCBlbmRwb2ludCk7XG4gIH1cblxuICBzZXQgZG93bnN0cmVhbVByb3RvY29sICh2YWx1ZSkge1xuICAgIHRoaXMuX2Rvd25zdHJlYW1Qcm90b2NvbCA9IHZhbHVlO1xuICAgIHRoaXMucHJvdG9jb2xDb252ZXJ0ZXIuZG93bnN0cmVhbVByb3RvY29sID0gdmFsdWU7XG4gIH1cblxuICBnZXQgZG93bnN0cmVhbVByb3RvY29sICgpIHtcbiAgICByZXR1cm4gdGhpcy5fZG93bnN0cmVhbVByb3RvY29sO1xuICB9XG5cbiAgZ2V0VXJsRm9yUHJveHkgKHVybCkge1xuICAgIGlmICh1cmwgPT09ICcnKSB7XG4gICAgICB1cmwgPSAnLyc7XG4gICAgfVxuICAgIGNvbnN0IHByb3h5QmFzZSA9IGAke3RoaXMuc2NoZW1lfTovLyR7dGhpcy5zZXJ2ZXJ9OiR7dGhpcy5wb3J0fSR7dGhpcy5iYXNlfWA7XG4gICAgY29uc3QgZW5kcG9pbnRSZSA9ICcoLyhzZXNzaW9ufHN0YXR1cykpJztcbiAgICBsZXQgcmVtYWluaW5nVXJsID0gJyc7XG4gICAgaWYgKC9eaHR0cC8udGVzdCh1cmwpKSB7XG4gICAgICBjb25zdCBmaXJzdCA9IChuZXcgUmVnRXhwKGAoaHR0cHM/Oi8vLispJHtlbmRwb2ludFJlfWApKS5leGVjKHVybCk7XG4gICAgICBpZiAoIWZpcnN0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignR290IGEgY29tcGxldGUgdXJsIGJ1dCBjb3VsZCBub3QgZXh0cmFjdCBKV1AgZW5kcG9pbnQnKTtcbiAgICAgIH1cbiAgICAgIHJlbWFpbmluZ1VybCA9IHVybC5yZXBsYWNlKGZpcnN0WzFdLCAnJyk7XG4gICAgfSBlbHNlIGlmICgobmV3IFJlZ0V4cCgnXi8nKSkudGVzdCh1cmwpKSB7XG4gICAgICByZW1haW5pbmdVcmwgPSB1cmw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRGlkIG5vdCBrbm93IHdoYXQgdG8gZG8gd2l0aCB1cmwgJyR7dXJsfSdgKTtcbiAgICB9XG5cbiAgICBjb25zdCBzdHJpcFByZWZpeFJlID0gbmV3IFJlZ0V4cCgnXi4qPygvKHNlc3Npb258c3RhdHVzKS4qKSQnKTtcbiAgICBpZiAoc3RyaXBQcmVmaXhSZS50ZXN0KHJlbWFpbmluZ1VybCkpIHtcbiAgICAgIHJlbWFpbmluZ1VybCA9IHN0cmlwUHJlZml4UmUuZXhlYyhyZW1haW5pbmdVcmwpWzFdO1xuICAgIH1cblxuICAgIGlmICghKG5ldyBSZWdFeHAoZW5kcG9pbnRSZSkpLnRlc3QocmVtYWluaW5nVXJsKSkge1xuICAgICAgcmVtYWluaW5nVXJsID0gYC9zZXNzaW9uLyR7dGhpcy5zZXNzaW9uSWR9JHtyZW1haW5pbmdVcmx9YDtcbiAgICB9XG5cbiAgICBjb25zdCByZXF1aXJlc1Nlc3Npb25JZCA9IHRoaXMuZW5kcG9pbnRSZXF1aXJlc1Nlc3Npb25JZChyZW1haW5pbmdVcmwpO1xuXG4gICAgaWYgKHJlcXVpcmVzU2Vzc2lvbklkICYmIHRoaXMuc2Vzc2lvbklkID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyeWluZyB0byBwcm94eSBhIHNlc3Npb24gY29tbWFuZCB3aXRob3V0IHNlc3Npb24gaWQnKTtcbiAgICB9XG5cbiAgICBjb25zdCBzZXNzaW9uQmFzZVJlID0gbmV3IFJlZ0V4cCgnXi9zZXNzaW9uLyhbXi9dKyknKTtcbiAgICBpZiAoc2Vzc2lvbkJhc2VSZS50ZXN0KHJlbWFpbmluZ1VybCkpIHtcbiAgICAgIC8vIHdlIGhhdmUgc29tZXRoaW5nIGxpa2UgL3Nlc3Npb24vOmlkL2Zvb2Jhciwgc28gd2UgbmVlZCB0byByZXBsYWNlXG4gICAgICAvLyB0aGUgc2Vzc2lvbiBpZFxuICAgICAgY29uc3QgbWF0Y2ggPSBzZXNzaW9uQmFzZVJlLmV4ZWMocmVtYWluaW5nVXJsKTtcbiAgICAgIHJlbWFpbmluZ1VybCA9IHJlbWFpbmluZ1VybC5yZXBsYWNlKG1hdGNoWzFdLCB0aGlzLnNlc3Npb25JZCk7XG4gICAgfSBlbHNlIGlmIChyZXF1aXJlc1Nlc3Npb25JZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgZmluZCA6c2Vzc2lvbiBzZWN0aW9uIGZvciB1cmw6ICR7cmVtYWluaW5nVXJsfWApO1xuICAgIH1cbiAgICByZW1haW5pbmdVcmwgPSByZW1haW5pbmdVcmwucmVwbGFjZSgvXFwvJC8sICcnKTsgLy8gY2FuJ3QgaGF2ZSB0cmFpbGluZyBzbGFzaGVzXG5cbiAgICByZXR1cm4gcHJveHlCYXNlICsgcmVtYWluaW5nVXJsO1xuICB9XG5cbiAgYXN5bmMgcHJveHkgKHVybCwgbWV0aG9kLCBib2R5ID0gbnVsbCkge1xuICAgIG1ldGhvZCA9IG1ldGhvZC50b1VwcGVyQ2FzZSgpO1xuICAgIGNvbnN0IG5ld1VybCA9IHRoaXMuZ2V0VXJsRm9yUHJveHkodXJsKTtcbiAgICBjb25zdCByZXFPcHRzID0ge1xuICAgICAgYWdlbnQ6IGZhbHNlLFxuICAgICAgdXJsOiBuZXdVcmwsXG4gICAgICBtZXRob2QsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCcsXG4gICAgICAgICd1c2VyLWFnZW50JzogJ2FwcGl1bScsXG4gICAgICAgIGFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24sICovKicsXG4gICAgICB9LFxuICAgICAgcmVzb2x2ZVdpdGhGdWxsUmVzcG9uc2U6IHRydWUsXG4gICAgICB0aW1lb3V0OiB0aGlzLnRpbWVvdXQsXG4gICAgfTtcbiAgICBpZiAoYm9keSAhPT0gbnVsbCkge1xuICAgICAgaWYgKHR5cGVvZiBib2R5ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBib2R5ID0gSlNPTi5wYXJzZShib2R5KTtcbiAgICAgIH1cbiAgICAgIHJlcU9wdHMuanNvbiA9IGJvZHk7XG4gICAgfVxuXG4gICAgLy8gR0VUIG1ldGhvZHMgc2hvdWxkbid0IGhhdmUgYW55IGJvZHkuIE1vc3Qgc2VydmVycyBhcmUgT0sgd2l0aCB0aGlzLCBidXQgV2ViRHJpdmVyQWdlbnQgdGhyb3dzIDQwMCBlcnJvcnNcbiAgICBpZiAobWV0aG9kID09PSAnR0VUJykge1xuICAgICAgcmVxT3B0cy5qc29uID0gbnVsbDtcbiAgICB9XG5cbiAgICBsb2cuZGVidWcoYFByb3h5aW5nIFske21ldGhvZH0gJHt1cmwgfHwgJy8nfV0gdG8gWyR7bWV0aG9kfSAke25ld1VybH1dIGAgK1xuICAgICAgICAgICAgIChib2R5ID8gYHdpdGggYm9keTogJHtfLnRydW5jYXRlKEpTT04uc3RyaW5naWZ5KGJvZHkpLCB7bGVuZ3RoOiBMT0dfT0JKX0xFTkdUSH0pfWAgOiAnd2l0aCBubyBib2R5JykpO1xuXG4gICAgbGV0IHJlcywgcmVzQm9keTtcbiAgICB0cnkge1xuICAgICAgcmVzID0gYXdhaXQgdGhpcy5yZXF1ZXN0KHJlcU9wdHMpO1xuICAgICAgcmVzQm9keSA9IHJlcy5ib2R5O1xuICAgICAgbG9nLmRlYnVnKGBHb3QgcmVzcG9uc2Ugd2l0aCBzdGF0dXMgJHtyZXMuc3RhdHVzQ29kZX06ICR7Xy50cnVuY2F0ZShKU09OLnN0cmluZ2lmeShyZXNCb2R5KSwge2xlbmd0aDogTE9HX09CSl9MRU5HVEh9KX1gKTtcbiAgICAgIGlmICgvXFwvc2Vzc2lvbiQvLnRlc3QodXJsKSAmJiBtZXRob2QgPT09ICdQT1NUJykge1xuICAgICAgICBpZiAocmVzLnN0YXR1c0NvZGUgPT09IDIwMCkge1xuICAgICAgICAgIHRoaXMuc2Vzc2lvbklkID0gcmVzQm9keS5zZXNzaW9uSWQ7XG4gICAgICAgIH0gZWxzZSBpZiAocmVzLnN0YXR1c0NvZGUgPT09IDMwMykge1xuICAgICAgICAgIHRoaXMuc2Vzc2lvbklkID0gL1xcL3Nlc3Npb25cXC8oW14vXSspLy5leGVjKHJlc0JvZHkpWzFdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCByZXNCb2R5T2JqID0gdXRpbC5zYWZlSnNvblBhcnNlKHJlc0JvZHkpO1xuICAgICAgaWYgKCF0aGlzLmRvd25zdHJlYW1Qcm90b2NvbCkge1xuICAgICAgICB0aGlzLmRvd25zdHJlYW1Qcm90b2NvbCA9IHRoaXMuZ2V0UHJvdG9jb2xGcm9tUmVzQm9keShyZXNCb2R5T2JqKTtcbiAgICAgICAgbG9nLmRlYnVnKGBEZXRlcm1pbmVkIHRoYXQgdGhlIGRvd25zdHJlYW0gcHJvdG9jb2wgZm9yIHByb3h5IGlzICR7dGhpcy5kb3duc3RyZWFtUHJvdG9jb2x9YCk7XG4gICAgICB9XG4gICAgICBpZiAocmVzLnN0YXR1c0NvZGUgPCA0MDAgJiYgdGhpcy5kb3duc3RyZWFtUHJvdG9jb2wgPT09IE1KU09OV1AgJiYgcGFyc2VJbnQocmVzQm9keU9iai5zdGF0dXMsIDEwKSAhPT0gMCkge1xuICAgICAgICAvLyBTb21lIHNlcnZlcnMsIGxpa2UgY2hyb21lZHJpdmVyIG1heSByZXR1cm4gcmVzcG9uc2UgY29kZSAyMDAgZm9yIG5vbi16ZXJvIEpTT05XUCBzdGF0dXNlc1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYFRoZSByZXF1ZXN0IHRvICR7dXJsfSBoYXMgZmFpbGVkYDtcbiAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgICBlcnIubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgIGVyci5lcnJvciA9IHJlc0JvZHk7XG4gICAgICAgIGVyci5zdGF0dXNDb2RlID0gNTAwO1xuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgbGV0IHJlc3BvbnNlRXJyb3IgPSBlLmVycm9yO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVzcG9uc2VFcnJvciA9IEpTT04ucGFyc2UocmVzcG9uc2VFcnJvcik7XG4gICAgICB9IGNhdGNoIChlMSkge1xuICAgICAgICBsb2cud2FybihgR290IGFuIHVuZXhwZWN0ZWQgcmVzcG9uc2U6IGAgK1xuICAgICAgICAgIF8udHJ1bmNhdGUoXy5pc1N0cmluZyhyZXNwb25zZUVycm9yKSA/IHJlc3BvbnNlRXJyb3IgOiBKU09OLnN0cmluZ2lmeShyZXNwb25zZUVycm9yKSwge2xlbmd0aDogMzAwfSkpO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IGVycm9ycy5Qcm94eVJlcXVlc3RFcnJvcihgQ291bGQgbm90IHByb3h5IGNvbW1hbmQgdG8gcmVtb3RlIHNlcnZlci4gYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYE9yaWdpbmFsIGVycm9yOiAke2UubWVzc2FnZX1gLCByZXNwb25zZUVycm9yLCBlLnN0YXR1c0NvZGUpO1xuICAgIH1cbiAgICByZXR1cm4gW3JlcywgcmVzQm9keV07XG4gIH1cblxuICBnZXRQcm90b2NvbEZyb21SZXNCb2R5IChyZXNCb2R5KSB7XG4gICAgaWYgKCFfLmlzUGxhaW5PYmplY3QocmVzQm9keSkpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlc0JvZHkgPSBKU09OLnBhcnNlKHJlc0JvZHkpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHV0aWwuaGFzVmFsdWUocmVzQm9keS5zdGF0dXMpKSB7XG4gICAgICByZXR1cm4gTUpTT05XUDtcbiAgICB9XG4gICAgaWYgKHV0aWwuaGFzVmFsdWUocmVzQm9keS52YWx1ZSkpIHtcbiAgICAgIHJldHVybiBXM0M7XG4gICAgfVxuICB9XG5cbiAgcmVxdWVzdFRvQ29tbWFuZE5hbWUgKHVybCwgbWV0aG9kKSB7XG4gICAgY29uc3QgZXh0cmFjdENvbW1hbmROYW1lID0gKHBhdHRlcm4pID0+IHtcbiAgICAgIGNvbnN0IHBhdGhNYXRjaCA9IHBhdHRlcm4uZXhlYyh1cmwpO1xuICAgICAgcmV0dXJuIHBhdGhNYXRjaCA/IHJvdXRlVG9Db21tYW5kTmFtZShwYXRoTWF0Y2hbMV0sIG1ldGhvZCkgOiBudWxsO1xuICAgIH07XG4gICAgbGV0IGNvbW1hbmROYW1lID0gcm91dGVUb0NvbW1hbmROYW1lKHVybCwgbWV0aG9kKTtcbiAgICBpZiAoIWNvbW1hbmROYW1lICYmIF8uaW5jbHVkZXModXJsLCAnL3dkL2h1Yi9zZXNzaW9uLycpKSB7XG4gICAgICBjb21tYW5kTmFtZSA9IGV4dHJhY3RDb21tYW5kTmFtZSgvXFwvd2RcXC9odWJcXC9zZXNzaW9uXFwvW14vXSsoLispLyk7XG4gICAgfVxuICAgIGlmICghY29tbWFuZE5hbWUgJiYgXy5pbmNsdWRlcyh1cmwsICcvd2QvaHViLycpKSB7XG4gICAgICBjb21tYW5kTmFtZSA9IGV4dHJhY3RDb21tYW5kTmFtZSgvXFwvd2RcXC9odWIoXFwvLispLyk7XG4gICAgfVxuICAgIHJldHVybiBjb21tYW5kTmFtZTtcbiAgfVxuXG4gIGFzeW5jIHByb3h5Q29tbWFuZCAodXJsLCBtZXRob2QsIGJvZHkgPSBudWxsKSB7XG4gICAgY29uc3QgY29tbWFuZE5hbWUgPSB0aGlzLnJlcXVlc3RUb0NvbW1hbmROYW1lKHVybCwgbWV0aG9kKTtcbiAgICBpZiAoIWNvbW1hbmROYW1lKSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5wcm94eSh1cmwsIG1ldGhvZCwgYm9keSk7XG4gICAgfVxuICAgIGxvZy5kZWJ1ZyhgTWF0Y2hlZCAnJHt1cmx9JyB0byBjb21tYW5kIG5hbWUgJyR7Y29tbWFuZE5hbWV9J2ApO1xuXG4gICAgcmV0dXJuIGF3YWl0IHRoaXMucHJvdG9jb2xDb252ZXJ0ZXIuY29udmVydEFuZFByb3h5KGNvbW1hbmROYW1lLCB1cmwsIG1ldGhvZCwgYm9keSk7XG4gIH1cblxuICBhc3luYyBjb21tYW5kICh1cmwsIG1ldGhvZCwgYm9keSA9IG51bGwpIHtcbiAgICBsZXQgcmVzcG9uc2U7XG4gICAgbGV0IHJlc0JvZHk7XG4gICAgdHJ5IHtcbiAgICAgIFtyZXNwb25zZSwgcmVzQm9keV0gPSBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZCh1cmwsIG1ldGhvZCwgYm9keSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAoaXNFcnJvclR5cGUoZXJyLCBlcnJvcnMuUHJveHlSZXF1ZXN0RXJyb3IpKSB7XG4gICAgICAgIHRocm93IGVyci5nZXRBY3R1YWxFcnJvcigpO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IGVycm9ycy5Vbmtub3duRXJyb3IoZXJyLm1lc3NhZ2UpO1xuICAgIH1cbiAgICByZXNCb2R5ID0gdXRpbC5zYWZlSnNvblBhcnNlKHJlc0JvZHkpO1xuICAgIGxldCBwcm90b2NvbCA9IHRoaXMuZ2V0UHJvdG9jb2xGcm9tUmVzQm9keShyZXNCb2R5KTtcbiAgICBpZiAocHJvdG9jb2wgPT09IE1KU09OV1ApIHtcbiAgICAgIC8vIEdvdCByZXNwb25zZSBpbiBNSlNPTldQIGZvcm1hdFxuICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDIwMCAmJiByZXNCb2R5LnN0YXR1cyA9PT0gMCkge1xuICAgICAgICByZXR1cm4gcmVzQm9keS52YWx1ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHN0YXR1cyA9IHBhcnNlSW50KHJlc0JvZHkuc3RhdHVzLCAxMCk7XG4gICAgICBpZiAoIWlzTmFOKHN0YXR1cykgJiYgc3RhdHVzICE9PSAwKSB7XG4gICAgICAgIGxldCBtZXNzYWdlID0gcmVzQm9keS52YWx1ZTtcbiAgICAgICAgaWYgKF8uaGFzKHJlc0JvZHkudmFsdWUsICdtZXNzYWdlJykpIHtcbiAgICAgICAgICBtZXNzYWdlID0gXy5pc0VtcHR5KG1lc3NhZ2UpID8gcmVzQm9keS52YWx1ZS5tZXNzYWdlIDogYCR7bWVzc2FnZX0gJHtyZXNCb2R5LnZhbHVlLm1lc3NhZ2V9YDtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlcnJvckZyb21NSlNPTldQU3RhdHVzQ29kZShzdGF0dXMsIF8uaXNFbXB0eShtZXNzYWdlKSA/IGdldFN1bW1hcnlCeUNvZGUoc3RhdHVzKSA6IG1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocHJvdG9jb2wgPT09IFczQykge1xuICAgICAgLy8gR290IHJlc3BvbnNlIGluIFczQyBmb3JtYXRcbiAgICAgIGlmIChyZXNwb25zZS5zdGF0dXNDb2RlIDwgMzAwKSB7XG4gICAgICAgIHJldHVybiByZXNCb2R5LnZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKF8uaXNQbGFpbk9iamVjdChyZXNCb2R5LnZhbHVlKSAmJiByZXNCb2R5LnZhbHVlLmVycm9yKSB7XG4gICAgICAgIHRocm93IGVycm9yRnJvbVczQ0pzb25Db2RlKHJlc0JvZHkudmFsdWUuZXJyb3IsIHJlc0JvZHkudmFsdWUubWVzc2FnZSwgcmVzQm9keS52YWx1ZS5zdGFja3RyYWNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDIwMCkge1xuICAgICAgLy8gVW5rbm93biBwcm90b2NvbC4gS2VlcGluZyBpdCBiZWNhdXNlIG9mIHRoZSBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gICAgICByZXR1cm4gcmVzQm9keTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IGVycm9ycy5Vbmtub3duRXJyb3IoYERpZCBub3Qga25vdyB3aGF0IHRvIGRvIHdpdGggcmVzcG9uc2UgY29kZSAnJHtyZXNwb25zZS5zdGF0dXNDb2RlfScgYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYGFuZCByZXNwb25zZSBib2R5ICcke18udHJ1bmNhdGUoSlNPTi5zdHJpbmdpZnkocmVzQm9keSksIHtsZW5ndGg6IDMwMH0pfSdgKTtcbiAgfVxuXG4gIGdldFNlc3Npb25JZEZyb21VcmwgKHVybCkge1xuICAgIGNvbnN0IG1hdGNoID0gdXJsLm1hdGNoKC9cXC9zZXNzaW9uXFwvKFteL10rKS8pO1xuICAgIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogbnVsbDtcbiAgfVxuXG4gIGFzeW5jIHByb3h5UmVxUmVzIChyZXEsIHJlcykge1xuICAgIGxldCBbcmVzcG9uc2UsIGJvZHldID0gYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQocmVxLm9yaWdpbmFsVXJsLCByZXEubWV0aG9kLCByZXEuYm9keSk7XG5cbiAgICByZXMuaGVhZGVycyA9IHJlc3BvbnNlLmhlYWRlcnM7XG4gICAgcmVzLnNldCgnY29udGVudC10eXBlJywgcmVzcG9uc2UuaGVhZGVyc1snY29udGVudC10eXBlJ10pO1xuICAgIC8vIGlmIHRoZSBwcm94aWVkIHJlc3BvbnNlIGNvbnRhaW5zIGEgc2Vzc2lvbklkIHRoYXQgdGhlIGRvd25zdHJlYW1cbiAgICAvLyBkcml2ZXIgaGFzIGdlbmVyYXRlZCwgd2UgZG9uJ3Qgd2FudCB0byByZXR1cm4gdGhhdCB0byB0aGUgY2xpZW50LlxuICAgIC8vIEluc3RlYWQsIHJldHVybiB0aGUgaWQgZnJvbSB0aGUgcmVxdWVzdCBvciBmcm9tIGN1cnJlbnQgc2Vzc2lvblxuICAgIGJvZHkgPSB1dGlsLnNhZmVKc29uUGFyc2UoYm9keSk7XG4gICAgaWYgKGJvZHkgJiYgYm9keS5zZXNzaW9uSWQpIHtcbiAgICAgIGNvbnN0IHJlcVNlc3Npb25JZCA9IHRoaXMuZ2V0U2Vzc2lvbklkRnJvbVVybChyZXEub3JpZ2luYWxVcmwpO1xuICAgICAgaWYgKHJlcVNlc3Npb25JZCkge1xuICAgICAgICBsb2cuaW5mbyhgUmVwbGFjaW5nIHNlc3Npb25JZCAke2JvZHkuc2Vzc2lvbklkfSB3aXRoICR7cmVxU2Vzc2lvbklkfWApO1xuICAgICAgICBib2R5LnNlc3Npb25JZCA9IHJlcVNlc3Npb25JZDtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5zZXNzaW9uSWQpIHtcbiAgICAgICAgbG9nLmluZm8oYFJlcGxhY2luZyBzZXNzaW9uSWQgJHtib2R5LnNlc3Npb25JZH0gd2l0aCAke3RoaXMuc2Vzc2lvbklkfWApO1xuICAgICAgICBib2R5LnNlc3Npb25JZCA9IHRoaXMuc2Vzc2lvbklkO1xuICAgICAgfVxuICAgIH1cbiAgICByZXMuc3RhdHVzKHJlc3BvbnNlLnN0YXR1c0NvZGUpLnNlbmQoSlNPTi5zdHJpbmdpZnkoYm9keSkpO1xuICB9XG59XG5cbmV4cG9ydCB7IEpXUHJveHkgfTtcbmV4cG9ydCBkZWZhdWx0IEpXUHJveHk7XG4iXSwiZmlsZSI6ImxpYi9qc29ud3AtcHJveHkvcHJveHkuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
