"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _utf = _interopRequireDefault(require("utf7"));

var _appiumAndroidDriver = require("appium-android-driver");

var _driver = require("./driver");

const {
  imap
} = _utf.default;
let extensions = {},
    commands = {},
    helpers = {};

commands.launchApp = async function () {
  await this.startSelendroidSession();
};

commands.reset = async function () {
  _logger.default.debug("Running generic full reset");

  let oldImpWait = this.implicitWaitMs;
  let oldCommandTimeoutMs = this.commandTimeoutMs;
  let oldSessionId = this.sessionId;
  await this.deleteSession();

  _logger.default.debug("Restarting app");

  await this.startSelendroidSession();
  this.implicitWait(oldImpWait);
  this.timeouts('command', oldCommandTimeoutMs);
  this.sessionId = oldSessionId;
};

commands.performMultiAction = async function (elId, actions) {
  if (elId) {
    throw new Error("Selendroid actions do not support element id");
  }

  return await this.selendroid.jwproxy.command('/action', 'POST', {
    payload: actions
  });
};

function encodeString(value, unicode) {
  for (let i = 0; i < value.length; i++) {
    let c = value.charCodeAt(i);

    if (unicode && (c > 127 || c === 38)) {
      if (c >= parseInt("E000", 16) && c <= parseInt("E040", 16)) {} else {
        value = imap.encode(value);
        break;
      }
    }
  }

  return value;
}

commands.setValue = async function (value, elementId) {
  if (value instanceof Array) {
    value = value.join("");
  }

  _logger.default.debug(`Setting text on element '${elementId}': '${value}'`);

  value = encodeString(value, this.opts.unicodeKeyboard);
  await this.selendroid.jwproxy.command(`/element/${elementId}/value`, 'POST', {
    value: [value]
  });
};

commands.getElementRect = async function (elementId) {
  const location = await this.selendroid.jwproxy.command(`/element/${elementId}/location`, 'GET');
  const size = await this.selendroid.jwproxy.command(`/element/${elementId}/size`, 'GET');
  return Object.assign(location, size);
};

commands.keys = async function (value) {
  if (value instanceof Array) {
    value = value.join("");
  }

  _logger.default.debug(`Setting text: '${value}'`);

  value = encodeString(value, this.opts.unicodeKeyboard);
  await this.selendroid.jwproxy.command('/keys', 'POST', {
    value: [value]
  });
};

commands.keyevent = async function (keycode, metastate) {
  _logger.default.debug(`Ignoring metastate ${metastate}`);

  await this.adb.keyevent(keycode);
};

commands.back = async function () {
  await this.adb.keyevent(4);
};

commands.getContexts = async function () {
  let chromiumViews = [];
  let webviews = await _appiumAndroidDriver.webviewHelpers.getWebviews(this.adb, this.opts.androidDeviceSocket);

  if (_lodash.default.includes(webviews, _appiumAndroidDriver.CHROMIUM_WIN)) {
    chromiumViews = [_appiumAndroidDriver.CHROMIUM_WIN];
  } else {
    chromiumViews = [];
  }

  _logger.default.info('Getting window handles from Selendroid');

  let selendroidViews = await this.selendroid.jwproxy.command('/window_handles', 'GET', {});
  this.contexts = _lodash.default.union(selendroidViews, chromiumViews);

  _logger.default.info(`Available contexts: ${JSON.stringify(this.contexts)}`);

  return this.contexts;
};

helpers.switchContext = async function (name) {
  await this.selendroid.jwproxy.command('/window', 'POST', {
    name
  });
};

helpers.isChromedriverContext = function (windowName) {
  return windowName === _appiumAndroidDriver.CHROMIUM_WIN;
};

helpers.wrapBootstrapDisconnect = async function (wrapped) {
  await wrapped();
  await this.adb.restart();
  await this.adb.forwardPort(this.opts.systemPort, _driver.DEVICE_PORT);
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
