"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.fs = void 0;

require("source-map-support/register");

var _fs2 = _interopRequireDefault(require("fs"));

var _rimraf = _interopRequireDefault(require("rimraf"));

var _md5File = _interopRequireDefault(require("md5-file"));

var _ncp = _interopRequireDefault(require("ncp"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _mv = _interopRequireDefault(require("mv"));

var _which = _interopRequireDefault(require("which"));

var _glob = _interopRequireDefault(require("glob"));

var _crypto = _interopRequireDefault(require("crypto"));

const md5 = _bluebird.default.promisify(_md5File.default);

let fs = {
  async hasAccess(path) {
    try {
      await this.access(path, fs.F_OK | fs.R_OK);
    } catch (err) {
      return false;
    }

    return true;
  },

  exists(path) {
    return this.hasAccess(path);
  },

  rimraf: _bluebird.default.promisify(_rimraf.default),

  async mkdir(dirName) {
    let _mkdir = _bluebird.default.promisify(_fs2.default.mkdir);

    try {
      await _mkdir(dirName);
    } catch (err) {
      if (err && err.code !== "EEXIST") {
        throw err;
      }
    }
  },

  async copyFile(source, destination, ...otherArgs) {
    if (!(await this.hasAccess(source))) {
      throw new Error(`The file at '${source}' does not exist or is not accessible`);
    }

    return await _bluebird.default.promisify(_ncp.default)(source, destination, ...otherArgs);
  },

  async md5(filePath) {
    return await md5(filePath);
  },

  mv: _bluebird.default.promisify(_mv.default),
  which: _bluebird.default.promisify(_which.default),
  glob: _bluebird.default.promisify(_glob.default),

  async hash(filePath, algorithm = 'sha1') {
    return await new _bluebird.default((resolve, reject) => {
      const fileHash = _crypto.default.createHash(algorithm);

      const readStream = _fs2.default.createReadStream(filePath);

      readStream.on('error', e => reject(new Error(`Cannot calculate ${algorithm} hash for '${filePath}'. Original error: ${e.message}`)));
      readStream.on('data', chunk => fileHash.update(chunk));
      readStream.on('end', () => resolve(fileHash.digest('hex')));
    });
  }

};
exports.fs = fs;
const simples = ['open', 'close', 'access', 'readFile', 'writeFile', 'write', 'read', 'readlink', 'chmod', 'unlink', 'readdir', 'stat', 'rename', 'lstat'];

for (const s of simples) {
  fs[s] = _bluebird.default.promisify(_fs2.default[s]);
}

var _default = fs;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9mcy5qcyJdLCJuYW1lcyI6WyJtZDUiLCJCIiwicHJvbWlzaWZ5IiwibWQ1ZmlsZSIsImZzIiwiaGFzQWNjZXNzIiwicGF0aCIsImFjY2VzcyIsIkZfT0siLCJSX09LIiwiZXJyIiwiZXhpc3RzIiwicmltcmFmIiwibWtkaXIiLCJkaXJOYW1lIiwiX21rZGlyIiwiX2ZzIiwiY29kZSIsImNvcHlGaWxlIiwic291cmNlIiwiZGVzdGluYXRpb24iLCJvdGhlckFyZ3MiLCJFcnJvciIsIm5jcCIsImZpbGVQYXRoIiwibXYiLCJ3aGljaCIsImdsb2IiLCJoYXNoIiwiYWxnb3JpdGhtIiwicmVzb2x2ZSIsInJlamVjdCIsImZpbGVIYXNoIiwiY3J5cHRvIiwiY3JlYXRlSGFzaCIsInJlYWRTdHJlYW0iLCJjcmVhdGVSZWFkU3RyZWFtIiwib24iLCJlIiwibWVzc2FnZSIsImNodW5rIiwidXBkYXRlIiwiZGlnZXN0Iiwic2ltcGxlcyIsInMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0EsTUFBTUEsR0FBRyxHQUFHQyxrQkFBRUMsU0FBRixDQUFZQyxnQkFBWixDQUFaOztBQUVBLElBQUlDLEVBQUUsR0FBRztBQUNQLFFBQU1DLFNBQU4sQ0FBaUJDLElBQWpCLEVBQXVCO0FBQ3JCLFFBQUk7QUFDRixZQUFNLEtBQUtDLE1BQUwsQ0FBWUQsSUFBWixFQUFrQkYsRUFBRSxDQUFDSSxJQUFILEdBQVVKLEVBQUUsQ0FBQ0ssSUFBL0IsQ0FBTjtBQUNELEtBRkQsQ0FFRSxPQUFPQyxHQUFQLEVBQVk7QUFDWixhQUFPLEtBQVA7QUFDRDs7QUFDRCxXQUFPLElBQVA7QUFDRCxHQVJNOztBQVNQQyxFQUFBQSxNQUFNLENBQUVMLElBQUYsRUFBUTtBQUFFLFdBQU8sS0FBS0QsU0FBTCxDQUFlQyxJQUFmLENBQVA7QUFBOEIsR0FUdkM7O0FBVVBNLEVBQUFBLE1BQU0s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ZTogc3RhcnRcbmltcG9ydCBfZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHJpbXJhZiBmcm9tICdyaW1yYWYnO1xuaW1wb3J0IG1kNWZpbGUgZnJvbSAnbWQ1LWZpbGUnO1xuaW1wb3J0IG5jcCBmcm9tICduY3AnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IG12IGZyb20gJ212JztcbmltcG9ydCB3aGljaCBmcm9tICd3aGljaCc7XG5pbXBvcnQgZ2xvYiBmcm9tICdnbG9iJztcbmltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJztcblxuXG5jb25zdCBtZDUgPSBCLnByb21pc2lmeShtZDVmaWxlKTtcblxubGV0IGZzID0ge1xuICBhc3luYyBoYXNBY2Nlc3MgKHBhdGgpIHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5hY2Nlc3MocGF0aCwgZnMuRl9PSyB8IGZzLlJfT0spO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgZXhpc3RzIChwYXRoKSB7IHJldHVybiB0aGlzLmhhc0FjY2VzcyhwYXRoKTsgfSxcbiAgcmltcmFmOiBCLnByb21pc2lmeShyaW1yYWYpLFxuICBhc3luYyBta2RpciAoZGlyTmFtZSkge1xuICAgIGxldCBfbWtkaXIgPSBCLnByb21pc2lmeShfZnMubWtkaXIpO1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBfbWtkaXIoZGlyTmFtZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAoZXJyICYmIGVyci5jb2RlICE9PSBcIkVFWElTVFwiKSB7XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGFzeW5jIGNvcHlGaWxlIChzb3VyY2UsIGRlc3RpbmF0aW9uLCAuLi5vdGhlckFyZ3MpIHtcbiAgICBpZiAoIWF3YWl0IHRoaXMuaGFzQWNjZXNzKHNvdXJjZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIGZpbGUgYXQgJyR7c291cmNlfScgZG9lcyBub3QgZXhpc3Qgb3IgaXMgbm90IGFjY2Vzc2libGVgKTtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IChCLnByb21pc2lmeShuY3ApKShzb3VyY2UsIGRlc3RpbmF0aW9uLCAuLi5vdGhlckFyZ3MpO1xuICB9LFxuICBhc3luYyBtZDUgKGZpbGVQYXRoKSB7XG4gICAgcmV0dXJuIGF3YWl0IG1kNShmaWxlUGF0aCk7XG4gIH0sXG4gIG12OiBCLnByb21pc2lmeShtdiksXG4gIHdoaWNoOiBCLnByb21pc2lmeSh3aGljaCksXG4gIGdsb2I6IEIucHJvbWlzaWZ5KGdsb2IpLFxuICBhc3luYyBoYXNoIChmaWxlUGF0aCwgYWxnb3JpdGhtID0gJ3NoYTEnKSB7XG4gICAgcmV0dXJuIGF3YWl0IG5ldyBCKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IGZpbGVIYXNoID0gY3J5cHRvLmNyZWF0ZUhhc2goYWxnb3JpdGhtKTtcbiAgICAgIGNvbnN0IHJlYWRTdHJlYW0gPSBfZnMuY3JlYXRlUmVhZFN0cmVhbShmaWxlUGF0aCk7XG4gICAgICByZWFkU3RyZWFtLm9uKCdlcnJvcicsIChlKSA9PiByZWplY3QoXG4gICAgICAgIG5ldyBFcnJvcihgQ2Fubm90IGNhbGN1bGF0ZSAke2FsZ29yaXRobX0gaGFzaCBmb3IgJyR7ZmlsZVBhdGh9Jy4gT3JpZ2luYWwgZXJyb3I6ICR7ZS5tZXNzYWdlfWApKSk7XG4gICAgICByZWFkU3RyZWFtLm9uKCdkYXRhJywgKGNodW5rKSA9PiBmaWxlSGFzaC51cGRhdGUoY2h1bmspKTtcbiAgICAgIHJlYWRTdHJlYW0ub24oJ2VuZCcsICgpID0+IHJlc29sdmUoZmlsZUhhc2guZGlnZXN0KCdoZXgnKSkpO1xuICAgIH0pO1xuICB9LFxufTtcblxuY29uc3Qgc2ltcGxlcyA9IFtcbiAgJ29wZW4nLCAnY2xvc2UnLCAnYWNjZXNzJywgJ3JlYWRGaWxlJywgJ3dyaXRlRmlsZScsICd3cml0ZScsICdyZWFkJyxcbiAgJ3JlYWRsaW5rJywgJ2NobW9kJywgJ3VubGluaycsICdyZWFkZGlyJywgJ3N0YXQnLCAncmVuYW1lJywgJ2xzdGF0Jyxcbl07XG5cbmZvciAoY29uc3QgcyBvZiBzaW1wbGVzKSB7XG4gIGZzW3NdID0gQi5wcm9taXNpZnkoX2ZzW3NdKTtcbn1cblxuZXhwb3J0IHsgZnMgfTtcbmV4cG9ydCBkZWZhdWx0IGZzO1xuIl0sImZpbGUiOiJsaWIvZnMuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
