"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_ADB_PORT = exports.ADB = exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _os = _interopRequireDefault(require("os"));

var _path = _interopRequireDefault(require("path"));

var _index = _interopRequireDefault(require("./tools/index.js"));

var _helpers = require("./helpers");

var _systemCalls = require("./tools/system-calls");

const DEFAULT_ADB_PORT = 5037;
exports.DEFAULT_ADB_PORT = DEFAULT_ADB_PORT;

const JAR_PATH = _path.default.resolve(_helpers.rootDir, 'jars');

const DEFAULT_OPTS = {
  sdkRoot: null,
  udid: null,
  appDeviceReadyTimeout: null,
  useKeystore: null,
  keystorePath: null,
  keystorePassword: null,
  keyAlias: null,
  keyPassword: null,
  executable: {
    path: "adb",
    defaultArgs: []
  },
  tmpDir: _os.default.tmpdir(),
  curDeviceId: null,
  emulatorPort: null,
  logcat: null,
  binaries: {},
  instrumentProc: null,
  javaVersion: null,
  suppressKillServer: null,
  jars: {},
  helperJarPath: JAR_PATH,
  adbPort: DEFAULT_ADB_PORT,
  adbExecTimeout: _systemCalls.DEFAULT_ADB_EXEC_TIMEOUT
};

class ADB {
  constructor(opts = {}) {
    if (typeof opts.sdkRoot === "undefined") {
      opts.sdkRoot = process.env.ANDROID_HOME || '';
    }

    Object.assign(this, opts);

    _lodash.default.defaultsDeep(this, _lodash.default.cloneDeep(DEFAULT_OPTS));

    if (opts.remoteAdbHost) {
      this.executable.defaultArgs.push("-H", opts.remoteAdbHost);
    }

    if (opts.remoteAdbPort) {
      this.adbPort = opts.remoteAdbPort;
    }

    this.executable.defaultArgs.push("-P", this.adbPort);
    this.initJars();
  }

  initJars() {
    const tempJars = ['move_manifest.jar', 'sign.jar', 'appium_apk_tools.jar', 'unsign.jar', 'verify.jar'];

    for (const jarName of tempJars) {
      this.jars[jarName] = _path.default.resolve(JAR_PATH, jarName);
    }
  }

}

exports.ADB = ADB;

ADB.createADB = async function (opts) {
  let adb = new ADB(opts);
  await adb.getAdbWithCorrectAdbPath();
  return adb;
};

for (let [fnName, fn] of _lodash.default.toPairs(_index.default)) {
  ADB.prototype[fnName] = fn;
}

var _default = ADB;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9hZGIuanMiXSwibmFtZXMiOlsiREVGQVVMVF9BREJfUE9SVCIsIkpBUl9QQVRIIiwicGF0aCIsInJlc29sdmUiLCJyb290RGlyIiwiREVGQVVMVF9PUFRTIiwic2RrUm9vdCIsInVkaWQiLCJhcHBEZXZpY2VSZWFkeVRpbWVvdXQiLCJ1c2VLZXlzdG9yZSIsImtleXN0b3JlUGF0aCIsImtleXN0b3JlUGFzc3dvcmQiLCJrZXlBbGlhcyIsImtleVBhc3N3b3JkIiwiZXhlY3V0YWJsZSIsImRlZmF1bHRBcmdzIiwidG1wRGlyIiwib3MiLCJ0bXBkaXIiLCJjdXJEZXZpY2VJZCIsImVtdWxhdG9yUG9ydCIsImxvZ2NhdCIsImJpbmFyaWVzIiwiaW5zdHJ1bWVudFByb2MiLCJqYXZhVmVyc2lvbiIsInN1cHByZXNzS2lsbFNlcnZlciIsImphcnMiLCJoZWxwZXJKYXJQYXRoIiwiYWRiUG9ydCIsImFkYkV4ZWNUaW1lb3V0IiwiREVGQVVMVF9BREJfRVhFQ19USU1FT1VUIiwiQURCIiwiY29uc3RydWN0b3IiLCJvcHRzIiwicHJvY2VzcyIsImVudiIsIkFORFJPSURfSE9NRSIsIk9iamVjdCIsImFzc2lnbiIsIl8iLCJkZWZhdWx0c0RlZXAiLCJjbG9uZURlZXAiLCJyZW1vdGVBZGJIb3N0IiwicHVzaCIsInJlbW90ZUFkYlBvcnQiLCJpbml0SmFycyIsInRlbXBKYXJzIiwiamFyTmFtZSIsImNyZWF0ZUFEQiIsImFkYiIsImdldEFkYldpdGhDb3JyZWN0QWRiUGF0aCIsImZuTmFtZSIsImZuIiwidG9QYWlycyIsIm1ldGhvZHMiLCJwcm90b3R5cGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUEsTUFBTUEsZ0JBQWdCLEdBQUcsSUFBekI7OztBQUNBLE1BQU1DLFFBQVEsR0FBR0MsY0FBS0MsT0FBTCxDQUFhQyxnQkFBYixFQUFzQixNQUF0QixDQUFqQjs7QUFDQSxNQUFNQyxZQUFZLEdBQUc7QUFDbkJDLEVBQUFBLE9BQU8sRUFBRSxJQURVO0FBRW5CQyxFQUFBQSxJQUFJLEVBQUUsSUFGYTtBQUduQkMsRUFBQUEscUJBQXFCLEVBQUUsSUFISjtBQUluQkMsRUFBQUEsV0FBVyxFQUFFLElBSk07QUFLbkJDLEVBQUFBLFlBQVksRUFBRSxJQUxLO0FBTW5CQyxFQUFBQSxnQkFBZ0IsRUFBRSxJQU5DO0FBT25CQyxFQUFBQSxRQUFRLEVBQUUsSUFQUztBQVFuQkMsRUFBQUEsV0FBVyxFQUFFLElBUk07QUFTbkJDLEVBQUFBLFVBQVUsRUFBRTtBQUFDWixJQUFBQSxJQUFJLEVBQUUsS0FBUDtBQUFjYSxJQUFBQSxXQUFXLEVBQUU7QUFBM0IsR0FUTztBQVVuQkMsRUFBQUEsTUFBTSxFQUFFQyxZQUFHQyxNQUFILEVBVlc7QUFXbkJDLEVBQUFBLFdBQVcsRUFBRSxJQVhNO0FBWW5CQyxFQUFBQSxZQUFZLEVBQUUsSUFaSztBQWFuQkMsRUFBQUEsTUFBTSxFQUFFLElBYlc7QUFjbkJDLEVBQUFBLFFBQVEsRUFBRSxFQWRTO0FBZW5CQyxFQUFBQSxjQUFjLEVBQUUsSUFmRztBQWdCbkJDLEVBQUFBLFdBQVcsRUFBRSxJQWhCTTtBQWlCbkJDLEVBQUFBLGtCQUFrQixFQUFFLElBakJEO0FBa0JuQkMsRUFBQUEsSUFBSSxFQUFFLEVBbEJhO0FBbUJuQkMsRUFBQUEsYUFBYSxFQUFFMUIsUUFuQkk7QUFvQm5CMkIsRUFBQUEsT0FBTyxFQUFFNUIsZ0JBcEJVO0FBcUJuQjZCLEVBQUFBLGNBQWMsRUFBRUM7QUFyQkcsQ0FBckI7O0FBd0JBLE1BQU1DLEdBQU4sQ0FBVTtBQUNSQyxFQUFBQSxXQUFXLENBQUVDLElBQUksR0FBRyxFQUFULEVBQWE7QUFDdEIsUUFBSSxPQUFPQSxJQUFJLENBQUMzQixPQUFaLEtBQXdCLFdBQTVCLEVBQXlDO0FBQ3ZDMkIsTUFBQUEsSUFBSSxDQUFDM0IsT0FBTCxHQUFlNEIsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFlBQVosSUFBNEIsRUFBM0M7QUFDRDs7QUFFREMsSUFBQUEsTUFBTSxDQUFDQyxNQUFQLENBQWMsSUFBZCxFQUFvQkwsSUFBcEI7O0FBQ0FNLG9CQUFFQyxZQUFGLENBQWUsSUFBZixFQUFxQkQsZ0JBQUVFLFNBQUYsQ0FBWXBDLFlBQVosQ0FBckI7O0FBRUEsUUFBSTRCLElBQUksQ0FBQ1MsYUFBVCxFQUF3QjtBQUN0QixXQUFLNUIsVUFBTCxDQUFnQkMsV0FBaEIsQ0FBNEI0QixJQUE1QixDQUFpQyxJQUFqQyxFQUF1Q1YsSUFBSSxDQUFDUyxhQUE1QztBQUNEOztBQUdELFFBQUlULElBQUksQ0FBQ1csYUFBVCxFQUF3QjtBQUN0QixXQUFLaEIsT0FBTCxHQUFlSyxJQUFJLENBQUNXLGFBQXBCO0FBQ0Q7O0FBQ0QsU0FBSzlCLFVBQUwsQ0FBZ0JDLFdBQWhCLENBQTRCNEIsSUFBNUIsQ0FBaUMsSUFBakMsRUFBdUMsS0FBS2YsT0FBNUM7QUFFQSxTQUFLaUIsUUFBTDtBQUNEOztBQUVEQSxFQUFBQSxRQUFRLEdBQUk7QUFDVixVQUFNQyxRQUFRLEdBQUcsQ0FDZixtQkFEZSxFQUNNLFVBRE4sRUFDa0Isc0JBRGxCLEVBRWYsWUFGZSxFQUVELFlBRkMsQ0FBakI7O0FBSUEsU0FBSyxNQUFNQyxPQUFYLElBQXNCRCxRQUF0QixFQUFnQztBQUM5QixXQUFLcEIsSUFBTCxDQUFVcUIsT0FBVixJQUFxQjdDLGNBQUtDLE9BQUwsQ0FBYUYsUUFBYixFQUF1QjhDLE9BQXZCLENBQXJCO0FBQ0Q7QUFDRjs7QUE5Qk87Ozs7QUFpQ1ZoQixHQUFHLENBQUNpQixTQUFKLEdBQWdCLGdCQUFnQmYsSUFBaEIsRUFBc0I7QUFDcEMsTUFBSWdCLEdBQUcsR0FBRyxJQUFJbEIsR0FBSixDQUFRRSxJQUFSLENBQVY7QUFDQSxRQUFNZ0IsR0FBRyxDQUFDQyx3QkFBSixFQUFOO0FBQ0EsU0FBT0QsR0FBUDtBQUNELENBSkQ7O0FBT0EsS0FBSyxJQUFJLENBQUNFLE1BQUQsRUFBU0MsRUFBVCxDQUFULElBQXlCYixnQkFBRWMsT0FBRixDQUFVQyxjQUFWLENBQXpCLEVBQTZDO0FBQzNDdkIsRUFBQUEsR0FBRyxDQUFDd0IsU0FBSixDQUFjSixNQUFkLElBQXdCQyxFQUF4QjtBQUNEOztlQUVjckIsRyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgb3MgZnJvbSAnb3MnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgbWV0aG9kcyBmcm9tICcuL3Rvb2xzL2luZGV4LmpzJztcbmltcG9ydCB7IHJvb3REaXIgfSBmcm9tICcuL2hlbHBlcnMnO1xuaW1wb3J0IHsgREVGQVVMVF9BREJfRVhFQ19USU1FT1VUIH0gZnJvbSAnLi90b29scy9zeXN0ZW0tY2FsbHMnO1xuXG5jb25zdCBERUZBVUxUX0FEQl9QT1JUID0gNTAzNztcbmNvbnN0IEpBUl9QQVRIID0gcGF0aC5yZXNvbHZlKHJvb3REaXIsICdqYXJzJyk7XG5jb25zdCBERUZBVUxUX09QVFMgPSB7XG4gIHNka1Jvb3Q6IG51bGwsXG4gIHVkaWQ6IG51bGwsXG4gIGFwcERldmljZVJlYWR5VGltZW91dDogbnVsbCxcbiAgdXNlS2V5c3RvcmU6IG51bGwsXG4gIGtleXN0b3JlUGF0aDogbnVsbCxcbiAga2V5c3RvcmVQYXNzd29yZDogbnVsbCxcbiAga2V5QWxpYXM6IG51bGwsXG4gIGtleVBhc3N3b3JkOiBudWxsLFxuICBleGVjdXRhYmxlOiB7cGF0aDogXCJhZGJcIiwgZGVmYXVsdEFyZ3M6IFtdfSxcbiAgdG1wRGlyOiBvcy50bXBkaXIoKSxcbiAgY3VyRGV2aWNlSWQ6IG51bGwsXG4gIGVtdWxhdG9yUG9ydDogbnVsbCxcbiAgbG9nY2F0OiBudWxsLFxuICBiaW5hcmllczoge30sXG4gIGluc3RydW1lbnRQcm9jOiBudWxsLFxuICBqYXZhVmVyc2lvbjogbnVsbCxcbiAgc3VwcHJlc3NLaWxsU2VydmVyOiBudWxsLFxuICBqYXJzOiB7fSxcbiAgaGVscGVySmFyUGF0aDogSkFSX1BBVEgsXG4gIGFkYlBvcnQ6IERFRkFVTFRfQURCX1BPUlQsXG4gIGFkYkV4ZWNUaW1lb3V0OiBERUZBVUxUX0FEQl9FWEVDX1RJTUVPVVRcbn07XG5cbmNsYXNzIEFEQiB7XG4gIGNvbnN0cnVjdG9yIChvcHRzID0ge30pIHtcbiAgICBpZiAodHlwZW9mIG9wdHMuc2RrUm9vdCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgb3B0cy5zZGtSb290ID0gcHJvY2Vzcy5lbnYuQU5EUk9JRF9IT01FIHx8ICcnO1xuICAgIH1cblxuICAgIE9iamVjdC5hc3NpZ24odGhpcywgb3B0cyk7XG4gICAgXy5kZWZhdWx0c0RlZXAodGhpcywgXy5jbG9uZURlZXAoREVGQVVMVF9PUFRTKSk7XG5cbiAgICBpZiAob3B0cy5yZW1vdGVBZGJIb3N0KSB7XG4gICAgICB0aGlzLmV4ZWN1dGFibGUuZGVmYXVsdEFyZ3MucHVzaChcIi1IXCIsIG9wdHMucmVtb3RlQWRiSG9zdCk7XG4gICAgfVxuICAgIC8vIFRPRE8gZmlndXJlIG91dCB3aHkgd2UgaGF2ZSB0aGlzIG9wdGlvbiBhcyBpdCBkb2VzIG5vdCBhcHBlYXIgdG8gYmVcbiAgICAvLyB1c2VkIGFueXdoZXJlLiBQcm9iYWJseSBkZXByZWNhdGUgaW4gZmF2b3Igb2Ygc2ltcGxlIG9wdHMuYWRiUG9ydFxuICAgIGlmIChvcHRzLnJlbW90ZUFkYlBvcnQpIHtcbiAgICAgIHRoaXMuYWRiUG9ydCA9IG9wdHMucmVtb3RlQWRiUG9ydDtcbiAgICB9XG4gICAgdGhpcy5leGVjdXRhYmxlLmRlZmF1bHRBcmdzLnB1c2goXCItUFwiLCB0aGlzLmFkYlBvcnQpO1xuXG4gICAgdGhpcy5pbml0SmFycygpO1xuICB9XG5cbiAgaW5pdEphcnMgKCkge1xuICAgIGNvbnN0IHRlbXBKYXJzID0gW1xuICAgICAgJ21vdmVfbWFuaWZlc3QuamFyJywgJ3NpZ24uamFyJywgJ2FwcGl1bV9hcGtfdG9vbHMuamFyJyxcbiAgICAgICd1bnNpZ24uamFyJywgJ3ZlcmlmeS5qYXInLFxuICAgIF07XG4gICAgZm9yIChjb25zdCBqYXJOYW1lIG9mIHRlbXBKYXJzKSB7XG4gICAgICB0aGlzLmphcnNbamFyTmFtZV0gPSBwYXRoLnJlc29sdmUoSkFSX1BBVEgsIGphck5hbWUpO1xuICAgIH1cbiAgfVxufVxuXG5BREIuY3JlYXRlQURCID0gYXN5bmMgZnVuY3Rpb24gKG9wdHMpIHtcbiAgbGV0IGFkYiA9IG5ldyBBREIob3B0cyk7XG4gIGF3YWl0IGFkYi5nZXRBZGJXaXRoQ29ycmVjdEFkYlBhdGgoKTtcbiAgcmV0dXJuIGFkYjtcbn07XG5cbi8vIGFkZCBhbGwgdGhlIG1ldGhvZHMgdG8gdGhlIEFEQiBwcm90b3R5cGVcbmZvciAobGV0IFtmbk5hbWUsIGZuXSBvZiBfLnRvUGFpcnMobWV0aG9kcykpIHtcbiAgQURCLnByb3RvdHlwZVtmbk5hbWVdID0gZm47XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFEQjtcbmV4cG9ydCB7IEFEQiwgREVGQVVMVF9BREJfUE9SVCB9O1xuIl0sImZpbGUiOiJsaWIvYWRiLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
